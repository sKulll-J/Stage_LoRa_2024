
AnalogRead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bf0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005d80  08005d80  00015d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e08  08005e08  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e08  08005e08  00015e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e10  08005e10  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e10  08005e10  00015e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e14  08005e14  00015e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000005c  08005e74  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08005e74  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e6ab  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e07  00000000  00000000  0002e77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  00030588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b6  00000000  00000000  00031220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000277fc  00000000  00000000  00031bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e85f  00000000  00000000  000593d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000faafb  00000000  00000000  00067c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003aec  00000000  00000000  0016272c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00166218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d68 	.word	0x08005d68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005d68 	.word	0x08005d68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b5b0      	push	{r4, r5, r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5e:	f000 fb91 	bl	8001484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d62:	f000 f8a7 	bl	8000eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d66:	f000 f99d 	bl	80010a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d6a:	f000 f96b 	bl	8001044 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d6e:	f000 f8f3 	bl	8000f58 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2120      	movs	r1, #32
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f002 fa73 	bl	8003264 <HAL_GPIO_WritePin>
	  uint16_t value_adc = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	84fb      	strh	r3, [r7, #38]	; 0x26

	      value_adc+=1;
 8000d82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d84:	3301      	adds	r3, #1
 8000d86:	84fb      	strh	r3, [r7, #38]	; 0x26
	      HAL_ADC_Start(&hadc1);
 8000d88:	4845      	ldr	r0, [pc, #276]	; (8000ea0 <main+0x148>)
 8000d8a:	f000 ff9d 	bl	8001cc8 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d8e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d92:	4843      	ldr	r0, [pc, #268]	; (8000ea0 <main+0x148>)
 8000d94:	f001 f886 	bl	8001ea4 <HAL_ADC_PollForConversion>
	      value_adc=HAL_ADC_GetValue(&hadc1);
 8000d98:	4841      	ldr	r0, [pc, #260]	; (8000ea0 <main+0x148>)
 8000d9a:	f001 f95b 	bl	8002054 <HAL_ADC_GetValue>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	84fb      	strh	r3, [r7, #38]	; 0x26

		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2120      	movs	r1, #32
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f002 fa5b 	bl	8003264 <HAL_GPIO_WritePin>
		  HAL_ADC_Stop(&hadc1);
 8000dae:	483c      	ldr	r0, [pc, #240]	; (8000ea0 <main+0x148>)
 8000db0:	f001 f844 	bl	8001e3c <HAL_ADC_Stop>
		  char buffer[20];
		  	  int ent = (value_adc*5.069/4095);
 8000db4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fbac 	bl	8000514 <__aeabi_i2d>
 8000dbc:	a334      	add	r3, pc, #208	; (adr r3, 8000e90 <main+0x138>)
 8000dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc2:	f7ff fc11 	bl	80005e8 <__aeabi_dmul>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4619      	mov	r1, r3
 8000dce:	a332      	add	r3, pc, #200	; (adr r3, 8000e98 <main+0x140>)
 8000dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd4:	f7ff fd32 	bl	800083c <__aeabi_ddiv>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4610      	mov	r0, r2
 8000dde:	4619      	mov	r1, r3
 8000de0:	f7ff fe14 	bl	8000a0c <__aeabi_d2iz>
 8000de4:	4603      	mov	r3, r0
 8000de6:	623b      	str	r3, [r7, #32]
		  	  int dec = ((value_adc*5.069*1000/4095)-(ent*1000))/10;
 8000de8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fb92 	bl	8000514 <__aeabi_i2d>
 8000df0:	a327      	add	r3, pc, #156	; (adr r3, 8000e90 <main+0x138>)
 8000df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df6:	f7ff fbf7 	bl	80005e8 <__aeabi_dmul>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4610      	mov	r0, r2
 8000e00:	4619      	mov	r1, r3
 8000e02:	f04f 0200 	mov.w	r2, #0
 8000e06:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <main+0x14c>)
 8000e08:	f7ff fbee 	bl	80005e8 <__aeabi_dmul>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	4610      	mov	r0, r2
 8000e12:	4619      	mov	r1, r3
 8000e14:	a320      	add	r3, pc, #128	; (adr r3, 8000e98 <main+0x140>)
 8000e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1a:	f7ff fd0f 	bl	800083c <__aeabi_ddiv>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	460b      	mov	r3, r1
 8000e22:	4614      	mov	r4, r2
 8000e24:	461d      	mov	r5, r3
 8000e26:	6a3b      	ldr	r3, [r7, #32]
 8000e28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e2c:	fb02 f303 	mul.w	r3, r2, r3
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fb6f 	bl	8000514 <__aeabi_i2d>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	4629      	mov	r1, r5
 8000e3e:	f7ff fa1b 	bl	8000278 <__aeabi_dsub>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4610      	mov	r0, r2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f04f 0200 	mov.w	r2, #0
 8000e4e:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <main+0x150>)
 8000e50:	f7ff fcf4 	bl	800083c <__aeabi_ddiv>
 8000e54:	4602      	mov	r2, r0
 8000e56:	460b      	mov	r3, r1
 8000e58:	4610      	mov	r0, r2
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f7ff fdd6 	bl	8000a0c <__aeabi_d2iz>
 8000e60:	4603      	mov	r3, r0
 8000e62:	61fb      	str	r3, [r7, #28]
		  	  int length = sprintf(buffer, "%d.%02d V\r\n",ent, dec );
 8000e64:	1d38      	adds	r0, r7, #4
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	6a3a      	ldr	r2, [r7, #32]
 8000e6a:	4910      	ldr	r1, [pc, #64]	; (8000eac <main+0x154>)
 8000e6c:	f004 fad8 	bl	8005420 <siprintf>
 8000e70:	61b8      	str	r0, [r7, #24]
		  	  //int length = sprintf(buffer, "%hu\r\n", value_adc);
		  	      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, length, HAL_MAX_DELAY);
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	1d39      	adds	r1, r7, #4
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <main+0x158>)
 8000e7e:	f003 fd77 	bl	8004970 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000e82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e86:	f000 fb79 	bl	800157c <HAL_Delay>
  {
 8000e8a:	e772      	b.n	8000d72 <main+0x1a>
 8000e8c:	f3af 8000 	nop.w
 8000e90:	ef9db22d 	.word	0xef9db22d
 8000e94:	401446a7 	.word	0x401446a7
 8000e98:	00000000 	.word	0x00000000
 8000e9c:	40affe00 	.word	0x40affe00
 8000ea0:	20000078 	.word	0x20000078
 8000ea4:	408f4000 	.word	0x408f4000
 8000ea8:	40240000 	.word	0x40240000
 8000eac:	08005d80 	.word	0x08005d80
 8000eb0:	200000dc 	.word	0x200000dc

08000eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b096      	sub	sp, #88	; 0x58
 8000eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2244      	movs	r2, #68	; 0x44
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f004 facc 	bl	8005460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec8:	463b      	mov	r3, r7
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ed6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000eda:	f002 f9e9 	bl	80032b0 <HAL_PWREx_ControlVoltageScaling>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ee4:	f000 f944 	bl	8001170 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef2:	2310      	movs	r3, #16
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000efa:	2302      	movs	r3, #2
 8000efc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000efe:	2301      	movs	r3, #1
 8000f00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f02:	230a      	movs	r3, #10
 8000f04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f06:	2307      	movs	r3, #7
 8000f08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4618      	mov	r0, r3
 8000f18:	f002 fa20 	bl	800335c <HAL_RCC_OscConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000f22:	f000 f925 	bl	8001170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f26:	230f      	movs	r3, #15
 8000f28:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 fde8 	bl	8003b14 <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f4a:	f000 f911 	bl	8001170 <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3758      	adds	r7, #88	; 0x58
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <MX_ADC1_Init+0xe0>)
 8000f7c:	4a2f      	ldr	r2, [pc, #188]	; (800103c <MX_ADC1_Init+0xe4>)
 8000f7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f80:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <MX_ADC1_Init+0xe0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f86:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <MX_ADC1_Init+0xe0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <MX_ADC1_Init+0xe0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f92:	4b29      	ldr	r3, [pc, #164]	; (8001038 <MX_ADC1_Init+0xe0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f98:	4b27      	ldr	r3, [pc, #156]	; (8001038 <MX_ADC1_Init+0xe0>)
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <MX_ADC1_Init+0xe0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <MX_ADC1_Init+0xe0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000faa:	4b23      	ldr	r3, [pc, #140]	; (8001038 <MX_ADC1_Init+0xe0>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb0:	4b21      	ldr	r3, [pc, #132]	; (8001038 <MX_ADC1_Init+0xe0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <MX_ADC1_Init+0xe0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <MX_ADC1_Init+0xe0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <MX_ADC1_Init+0xe0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <MX_ADC1_Init+0xe0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <MX_ADC1_Init+0xe0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fda:	4817      	ldr	r0, [pc, #92]	; (8001038 <MX_ADC1_Init+0xe0>)
 8000fdc:	f000 fd24 	bl	8001a28 <HAL_ADC_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000fe6:	f000 f8c3 	bl	8001170 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4810      	ldr	r0, [pc, #64]	; (8001038 <MX_ADC1_Init+0xe0>)
 8000ff6:	f001 fdf5 	bl	8002be4 <HAL_ADCEx_MultiModeConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001000:	f000 f8b6 	bl	8001170 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_ADC1_Init+0xe8>)
 8001006:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001008:	2306      	movs	r3, #6
 800100a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800100c:	2306      	movs	r3, #6
 800100e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001010:	237f      	movs	r3, #127	; 0x7f
 8001012:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001014:	2304      	movs	r3, #4
 8001016:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_ADC1_Init+0xe0>)
 8001022:	f001 f825 	bl	8002070 <HAL_ADC_ConfigChannel>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800102c:	f000 f8a0 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3728      	adds	r7, #40	; 0x28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000078 	.word	0x20000078
 800103c:	50040000 	.word	0x50040000
 8001040:	25b00200 	.word	0x25b00200

08001044 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_USART2_UART_Init+0x58>)
 800104a:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <MX_USART2_UART_Init+0x5c>)
 800104c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_USART2_UART_Init+0x58>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_USART2_UART_Init+0x58>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_USART2_UART_Init+0x58>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_USART2_UART_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_USART2_UART_Init+0x58>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_USART2_UART_Init+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_USART2_UART_Init+0x58>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <MX_USART2_UART_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_USART2_UART_Init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_USART2_UART_Init+0x58>)
 8001088:	f003 fc24 	bl	80048d4 <HAL_UART_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001092:	f000 f86d 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200000dc 	.word	0x200000dc
 80010a0:	40004400 	.word	0x40004400

080010a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <MX_GPIO_Init+0xc4>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a2a      	ldr	r2, [pc, #168]	; (8001168 <MX_GPIO_Init+0xc4>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b28      	ldr	r3, [pc, #160]	; (8001168 <MX_GPIO_Init+0xc4>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d2:	4b25      	ldr	r3, [pc, #148]	; (8001168 <MX_GPIO_Init+0xc4>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a24      	ldr	r2, [pc, #144]	; (8001168 <MX_GPIO_Init+0xc4>)
 80010d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <MX_GPIO_Init+0xc4>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <MX_GPIO_Init+0xc4>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <MX_GPIO_Init+0xc4>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_GPIO_Init+0xc4>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <MX_GPIO_Init+0xc4>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	4a18      	ldr	r2, [pc, #96]	; (8001168 <MX_GPIO_Init+0xc4>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_GPIO_Init+0xc4>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2120      	movs	r1, #32
 800111e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001122:	f002 f89f 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001126:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800112c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <MX_GPIO_Init+0xc8>)
 800113e:	f001 fee7 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001142:	2320      	movs	r3, #32
 8001144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f001 fed8 	bl	8002f10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40021000 	.word	0x40021000
 800116c:	48000800 	.word	0x48000800

08001170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
}
 8001176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001178:	e7fe      	b.n	8001178 <Error_Handler+0x8>
	...

0800117c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_MspInit+0x44>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_MspInit+0x44>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6613      	str	r3, [r2, #96]	; 0x60
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_MspInit+0x44>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_MspInit+0x44>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_MspInit+0x44>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	6593      	str	r3, [r2, #88]	; 0x58
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_MspInit+0x44>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b0ac      	sub	sp, #176	; 0xb0
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2288      	movs	r2, #136	; 0x88
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f004 f93b 	bl	8005460 <memset>
  if(hadc->Instance==ADC1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a27      	ldr	r2, [pc, #156]	; (800128c <HAL_ADC_MspInit+0xc8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d147      	bne.n	8001284 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011f8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001206:	2301      	movs	r3, #1
 8001208:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800120a:	2308      	movs	r3, #8
 800120c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800120e:	2307      	movs	r3, #7
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001212:	2302      	movs	r3, #2
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001216:	2302      	movs	r3, #2
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800121a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4618      	mov	r0, r3
 8001226:	f002 fe99 	bl	8003f5c <HAL_RCCEx_PeriphCLKConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001230:	f7ff ff9e 	bl	8001170 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_ADC_MspInit+0xcc>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001238:	4a15      	ldr	r2, [pc, #84]	; (8001290 <HAL_ADC_MspInit+0xcc>)
 800123a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800123e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_ADC_MspInit+0xcc>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <HAL_ADC_MspInit+0xcc>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <HAL_ADC_MspInit+0xcc>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <HAL_ADC_MspInit+0xcc>)
 800125a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001264:	2310      	movs	r3, #16
 8001266:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800126a:	230b      	movs	r3, #11
 800126c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800127a:	4619      	mov	r1, r3
 800127c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001280:	f001 fe46 	bl	8002f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001284:	bf00      	nop
 8001286:	37b0      	adds	r7, #176	; 0xb0
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	50040000 	.word	0x50040000
 8001290:	40021000 	.word	0x40021000

08001294 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b0ac      	sub	sp, #176	; 0xb0
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2288      	movs	r2, #136	; 0x88
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 f8d3 	bl	8005460 <memset>
  if(huart->Instance==USART2)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a21      	ldr	r2, [pc, #132]	; (8001344 <HAL_UART_MspInit+0xb0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d13b      	bne.n	800133c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012c4:	2302      	movs	r3, #2
 80012c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 fe43 	bl	8003f5c <HAL_RCCEx_PeriphCLKConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012dc:	f7ff ff48 	bl	8001170 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_UART_MspInit+0xb4>)
 80012e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e4:	4a18      	ldr	r2, [pc, #96]	; (8001348 <HAL_UART_MspInit+0xb4>)
 80012e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ea:	6593      	str	r3, [r2, #88]	; 0x58
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_UART_MspInit+0xb4>)
 80012ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_UART_MspInit+0xb4>)
 80012fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fc:	4a12      	ldr	r2, [pc, #72]	; (8001348 <HAL_UART_MspInit+0xb4>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001304:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_UART_MspInit+0xb4>)
 8001306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001310:	230c      	movs	r3, #12
 8001312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001328:	2307      	movs	r3, #7
 800132a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001332:	4619      	mov	r1, r3
 8001334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001338:	f001 fdea 	bl	8002f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800133c:	bf00      	nop
 800133e:	37b0      	adds	r7, #176	; 0xb0
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40004400 	.word	0x40004400
 8001348:	40021000 	.word	0x40021000

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001350:	e7fe      	b.n	8001350 <NMI_Handler+0x4>

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <MemManage_Handler+0x4>

0800135e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <UsageFault_Handler+0x4>

0800136a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001398:	f000 f8d0 	bl	800153c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a8:	4a14      	ldr	r2, [pc, #80]	; (80013fc <_sbrk+0x5c>)
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <_sbrk+0x60>)
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <_sbrk+0x64>)
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <_sbrk+0x68>)
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d0:	f004 f84e 	bl	8005470 <__errno>
 80013d4:	4603      	mov	r3, r0
 80013d6:	220c      	movs	r2, #12
 80013d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	e009      	b.n	80013f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <_sbrk+0x64>)
 80013f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20018000 	.word	0x20018000
 8001400:	00000400 	.word	0x00000400
 8001404:	20000164 	.word	0x20000164
 8001408:	200002b8 	.word	0x200002b8

0800140c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <SystemInit+0x20>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <SystemInit+0x20>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001468 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001434:	f7ff ffea 	bl	800140c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <LoopForever+0x6>)
  ldr r1, =_edata
 800143a:	490d      	ldr	r1, [pc, #52]	; (8001470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800143c:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <LoopForever+0xe>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001450:	4c0a      	ldr	r4, [pc, #40]	; (800147c <LoopForever+0x16>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145e:	f004 f80d 	bl	800547c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001462:	f7ff fc79 	bl	8000d58 <main>

08001466 <LoopForever>:

LoopForever:
    b LoopForever
 8001466:	e7fe      	b.n	8001466 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001468:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001474:	08005e18 	.word	0x08005e18
  ldr r2, =_sbss
 8001478:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800147c:	200002b4 	.word	0x200002b4

08001480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC1_2_IRQHandler>
	...

08001484 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_Init+0x3c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_Init+0x3c>)
 8001494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001498:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149a:	2003      	movs	r0, #3
 800149c:	f001 fd04 	bl	8002ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014a0:	2000      	movs	r0, #0
 80014a2:	f000 f80f 	bl	80014c4 <HAL_InitTick>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	e001      	b.n	80014b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014b2:	f7ff fe63 	bl	800117c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014b6:	79fb      	ldrb	r3, [r7, #7]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40022000 	.word	0x40022000

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_InitTick+0x6c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d023      	beq.n	8001520 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_InitTick+0x70>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <HAL_InitTick+0x6c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 fd01 	bl	8002ef6 <HAL_SYSTICK_Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10f      	bne.n	800151a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d809      	bhi.n	8001514 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f001 fcd9 	bl	8002ebe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800150c:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <HAL_InitTick+0x74>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e007      	b.n	8001524 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
 8001518:	e004      	b.n	8001524 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e001      	b.n	8001524 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000008 	.word	0x20000008
 8001534:	20000000 	.word	0x20000000
 8001538:	20000004 	.word	0x20000004

0800153c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_IncTick+0x20>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_IncTick+0x24>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <HAL_IncTick+0x24>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008
 8001560:	20000168 	.word	0x20000168

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000168 	.word	0x20000168

0800157c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff ffee 	bl	8001564 <HAL_GetTick>
 8001588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001594:	d005      	beq.n	80015a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_Delay+0x44>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a2:	bf00      	nop
 80015a4:	f7ff ffde 	bl	8001564 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d8f7      	bhi.n	80015a4 <HAL_Delay+0x28>
  {
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000008 	.word	0x20000008

080015c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	609a      	str	r2, [r3, #8]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	609a      	str	r2, [r3, #8]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3360      	adds	r3, #96	; 0x60
 800163e:	461a      	mov	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <LL_ADC_SetOffset+0x44>)
 800164e:	4013      	ands	r3, r2
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	4313      	orrs	r3, r2
 800165c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001664:	bf00      	nop
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	03fff000 	.word	0x03fff000

08001674 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3360      	adds	r3, #96	; 0x60
 8001682:	461a      	mov	r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3360      	adds	r3, #96	; 0x60
 80016b0:	461a      	mov	r2, r3
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	431a      	orrs	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016ca:	bf00      	nop
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3330      	adds	r3, #48	; 0x30
 800170c:	461a      	mov	r2, r3
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	4413      	add	r3, r2
 800171a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	211f      	movs	r1, #31
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	401a      	ands	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	0e9b      	lsrs	r3, r3, #26
 8001734:	f003 011f 	and.w	r1, r3, #31
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	f003 031f 	and.w	r3, r3, #31
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	431a      	orrs	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001748:	bf00      	nop
 800174a:	371c      	adds	r7, #28
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	3314      	adds	r3, #20
 8001764:	461a      	mov	r2, r3
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	0e5b      	lsrs	r3, r3, #25
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	4413      	add	r3, r2
 8001772:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	0d1b      	lsrs	r3, r3, #20
 800177c:	f003 031f 	and.w	r3, r3, #31
 8001780:	2107      	movs	r1, #7
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	401a      	ands	r2, r3
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	0d1b      	lsrs	r3, r3, #20
 800178e:	f003 031f 	and.w	r3, r3, #31
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	431a      	orrs	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800179e:	bf00      	nop
 80017a0:	371c      	adds	r7, #28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c4:	43db      	mvns	r3, r3
 80017c6:	401a      	ands	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f003 0318 	and.w	r3, r3, #24
 80017ce:	4908      	ldr	r1, [pc, #32]	; (80017f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017d0:	40d9      	lsrs	r1, r3
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	400b      	ands	r3, r1
 80017d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017da:	431a      	orrs	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	0007ffff 	.word	0x0007ffff

080017f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 031f 	and.w	r3, r3, #31
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800183c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6093      	str	r3, [r2, #8]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001864:	d101      	bne.n	800186a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001888:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800188c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018b4:	d101      	bne.n	80018ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018dc:	f043 0201 	orr.w	r2, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001900:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001904:	f043 0202 	orr.w	r2, r3, #2
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <LL_ADC_IsEnabled+0x18>
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <LL_ADC_IsEnabled+0x1a>
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b02      	cmp	r3, #2
 8001950:	d101      	bne.n	8001956 <LL_ADC_IsDisableOngoing+0x18>
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <LL_ADC_IsDisableOngoing+0x1a>
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001974:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001978:	f043 0204 	orr.w	r2, r3, #4
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800199c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019a0:	f043 0210 	orr.w	r2, r3, #16
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d101      	bne.n	80019cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019ee:	f043 0220 	orr.w	r2, r3, #32
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	d101      	bne.n	8001a1a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e130      	b.n	8001ca4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d109      	bne.n	8001a64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff fbb7 	bl	80011c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fef1 	bl	8001850 <LL_ADC_IsDeepPowerDownEnabled>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d004      	beq.n	8001a7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fed7 	bl	800182c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff0c 	bl	80018a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d115      	bne.n	8001aba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fef0 	bl	8001878 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a98:	4b84      	ldr	r3, [pc, #528]	; (8001cac <HAL_ADC_Init+0x284>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	099b      	lsrs	r3, r3, #6
 8001a9e:	4a84      	ldr	r2, [pc, #528]	; (8001cb0 <HAL_ADC_Init+0x288>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	099b      	lsrs	r3, r3, #6
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001aac:	e002      	b.n	8001ab4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f9      	bne.n	8001aae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff feee 	bl	80018a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10d      	bne.n	8001ae6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ace:	f043 0210 	orr.w	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	f043 0201 	orr.w	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff62 	bl	80019b4 <LL_ADC_REG_IsConversionOngoing>
 8001af0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 80c9 	bne.w	8001c92 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f040 80c5 	bne.w	8001c92 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b10:	f043 0202 	orr.w	r2, r3, #2
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fefb 	bl	8001918 <LL_ADC_IsEnabled>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d115      	bne.n	8001b54 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b28:	4862      	ldr	r0, [pc, #392]	; (8001cb4 <HAL_ADC_Init+0x28c>)
 8001b2a:	f7ff fef5 	bl	8001918 <LL_ADC_IsEnabled>
 8001b2e:	4604      	mov	r4, r0
 8001b30:	4861      	ldr	r0, [pc, #388]	; (8001cb8 <HAL_ADC_Init+0x290>)
 8001b32:	f7ff fef1 	bl	8001918 <LL_ADC_IsEnabled>
 8001b36:	4603      	mov	r3, r0
 8001b38:	431c      	orrs	r4, r3
 8001b3a:	4860      	ldr	r0, [pc, #384]	; (8001cbc <HAL_ADC_Init+0x294>)
 8001b3c:	f7ff feec 	bl	8001918 <LL_ADC_IsEnabled>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4323      	orrs	r3, r4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d105      	bne.n	8001b54 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	485c      	ldr	r0, [pc, #368]	; (8001cc0 <HAL_ADC_Init+0x298>)
 8001b50:	f7ff fd38 	bl	80015c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7e5b      	ldrb	r3, [r3, #25]
 8001b58:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b5e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b64:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b6a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b72:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d106      	bne.n	8001b90 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	3b01      	subs	r3, #1
 8001b88:	045b      	lsls	r3, r3, #17
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d009      	beq.n	8001bac <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	4b44      	ldr	r3, [pc, #272]	; (8001cc4 <HAL_ADC_Init+0x29c>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	69b9      	ldr	r1, [r7, #24]
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff1c 	bl	8001a02 <LL_ADC_INJ_IsConversionOngoing>
 8001bca:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d13d      	bne.n	8001c4e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d13a      	bne.n	8001c4e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bdc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001be4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bf4:	f023 0302 	bic.w	r3, r3, #2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	69b9      	ldr	r1, [r7, #24]
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d118      	bne.n	8001c3e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c16:	f023 0304 	bic.w	r3, r3, #4
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c22:	4311      	orrs	r1, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c28:	4311      	orrs	r1, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	611a      	str	r2, [r3, #16]
 8001c3c:	e007      	b.n	8001c4e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0201 	bic.w	r2, r2, #1
 8001c4c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d10c      	bne.n	8001c70 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	f023 010f 	bic.w	r1, r3, #15
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	1e5a      	subs	r2, r3, #1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c6e:	e007      	b.n	8001c80 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 020f 	bic.w	r2, r2, #15
 8001c7e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c84:	f023 0303 	bic.w	r3, r3, #3
 8001c88:	f043 0201 	orr.w	r2, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	655a      	str	r2, [r3, #84]	; 0x54
 8001c90:	e007      	b.n	8001ca2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c96:	f043 0210 	orr.w	r2, r3, #16
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ca2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3724      	adds	r7, #36	; 0x24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd90      	pop	{r4, r7, pc}
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	053e2d63 	.word	0x053e2d63
 8001cb4:	50040000 	.word	0x50040000
 8001cb8:	50040100 	.word	0x50040100
 8001cbc:	50040200 	.word	0x50040200
 8001cc0:	50040300 	.word	0x50040300
 8001cc4:	fff0c007 	.word	0xfff0c007

08001cc8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cd0:	4857      	ldr	r0, [pc, #348]	; (8001e30 <HAL_ADC_Start+0x168>)
 8001cd2:	f7ff fd8f 	bl	80017f4 <LL_ADC_GetMultimode>
 8001cd6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fe69 	bl	80019b4 <LL_ADC_REG_IsConversionOngoing>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f040 809c 	bne.w	8001e22 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_Start+0x30>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e097      	b.n	8001e28 <HAL_ADC_Start+0x160>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fe63 	bl	80029cc <ADC_Enable>
 8001d06:	4603      	mov	r3, r0
 8001d08:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f040 8083 	bne.w	8001e18 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a42      	ldr	r2, [pc, #264]	; (8001e34 <HAL_ADC_Start+0x16c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d002      	beq.n	8001d36 <HAL_ADC_Start+0x6e>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	e000      	b.n	8001d38 <HAL_ADC_Start+0x70>
 8001d36:	4b40      	ldr	r3, [pc, #256]	; (8001e38 <HAL_ADC_Start+0x170>)
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d002      	beq.n	8001d46 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d105      	bne.n	8001d52 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d5e:	d106      	bne.n	8001d6e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	f023 0206 	bic.w	r2, r3, #6
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d6c:	e002      	b.n	8001d74 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	221c      	movs	r2, #28
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a2a      	ldr	r2, [pc, #168]	; (8001e34 <HAL_ADC_Start+0x16c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d002      	beq.n	8001d94 <HAL_ADC_Start+0xcc>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	e000      	b.n	8001d96 <HAL_ADC_Start+0xce>
 8001d94:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <HAL_ADC_Start+0x170>)
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d008      	beq.n	8001db0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	2b05      	cmp	r3, #5
 8001da8:	d002      	beq.n	8001db0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d114      	bne.n	8001dda <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fdc6 	bl	8001964 <LL_ADC_REG_StartConversion>
 8001dd8:	e025      	b.n	8001e26 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <HAL_ADC_Start+0x16c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d002      	beq.n	8001df6 <HAL_ADC_Start+0x12e>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	e000      	b.n	8001df8 <HAL_ADC_Start+0x130>
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <HAL_ADC_Start+0x170>)
 8001df8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00f      	beq.n	8001e26 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	655a      	str	r2, [r3, #84]	; 0x54
 8001e16:	e006      	b.n	8001e26 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001e20:	e001      	b.n	8001e26 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e22:	2302      	movs	r3, #2
 8001e24:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	50040300 	.word	0x50040300
 8001e34:	50040100 	.word	0x50040100
 8001e38:	50040000 	.word	0x50040000

08001e3c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_Stop+0x16>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e023      	b.n	8001e9a <HAL_ADC_Stop+0x5e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001e5a:	2103      	movs	r1, #3
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 fcf9 	bl	8002854 <ADC_ConversionStop>
 8001e62:	4603      	mov	r3, r0
 8001e64:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d111      	bne.n	8001e90 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fe33 	bl	8002ad8 <ADC_Disable>
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d109      	bne.n	8001e90 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	f043 0201 	orr.w	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eae:	4866      	ldr	r0, [pc, #408]	; (8002048 <HAL_ADC_PollForConversion+0x1a4>)
 8001eb0:	f7ff fca0 	bl	80017f4 <LL_ADC_GetMultimode>
 8001eb4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d102      	bne.n	8001ec4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	e02a      	b.n	8001f1a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2b05      	cmp	r3, #5
 8001ece:	d002      	beq.n	8001ed6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2b09      	cmp	r3, #9
 8001ed4:	d111      	bne.n	8001efa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee8:	f043 0220 	orr.w	r2, r3, #32
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0a4      	b.n	800203e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001ef8:	e00f      	b.n	8001f1a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001efa:	4853      	ldr	r0, [pc, #332]	; (8002048 <HAL_ADC_PollForConversion+0x1a4>)
 8001efc:	f7ff fc88 	bl	8001810 <LL_ADC_GetMultiDMATransfer>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d007      	beq.n	8001f16 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0a:	f043 0220 	orr.w	r2, r3, #32
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e093      	b.n	800203e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f16:	2304      	movs	r3, #4
 8001f18:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f1a:	f7ff fb23 	bl	8001564 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f20:	e021      	b.n	8001f66 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f28:	d01d      	beq.n	8001f66 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f2a:	f7ff fb1b 	bl	8001564 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d302      	bcc.n	8001f40 <HAL_ADC_PollForConversion+0x9c>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d112      	bne.n	8001f66 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10b      	bne.n	8001f66 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f52:	f043 0204 	orr.w	r2, r3, #4
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e06b      	b.n	800203e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0d6      	beq.n	8001f22 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fba6 	bl	80016d6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01c      	beq.n	8001fca <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7e5b      	ldrb	r3, [r3, #25]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d118      	bne.n	8001fca <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d111      	bne.n	8001fca <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001faa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d105      	bne.n	8001fca <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc2:	f043 0201 	orr.w	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a1f      	ldr	r2, [pc, #124]	; (800204c <HAL_ADC_PollForConversion+0x1a8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d002      	beq.n	8001fda <HAL_ADC_PollForConversion+0x136>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	e000      	b.n	8001fdc <HAL_ADC_PollForConversion+0x138>
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_ADC_PollForConversion+0x1ac>)
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d008      	beq.n	8001ff6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	d002      	beq.n	8001ff6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b09      	cmp	r3, #9
 8001ff4:	d104      	bne.n	8002000 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	e00c      	b.n	800201a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a11      	ldr	r2, [pc, #68]	; (800204c <HAL_ADC_PollForConversion+0x1a8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d002      	beq.n	8002010 <HAL_ADC_PollForConversion+0x16c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	e000      	b.n	8002012 <HAL_ADC_PollForConversion+0x16e>
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_ADC_PollForConversion+0x1ac>)
 8002012:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	2b08      	cmp	r3, #8
 800201e:	d104      	bne.n	800202a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2208      	movs	r2, #8
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	e008      	b.n	800203c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d103      	bne.n	800203c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	220c      	movs	r2, #12
 800203a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	50040300 	.word	0x50040300
 800204c:	50040100 	.word	0x50040100
 8002050:	50040000 	.word	0x50040000

08002054 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b0b6      	sub	sp, #216	; 0xd8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x22>
 800208e:	2302      	movs	r3, #2
 8002090:	e3c9      	b.n	8002826 <HAL_ADC_ConfigChannel+0x7b6>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fc88 	bl	80019b4 <LL_ADC_REG_IsConversionOngoing>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 83aa 	bne.w	8002800 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d824      	bhi.n	8002106 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	3b02      	subs	r3, #2
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d81b      	bhi.n	80020fe <HAL_ADC_ConfigChannel+0x8e>
 80020c6:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <HAL_ADC_ConfigChannel+0x5c>)
 80020c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020cc:	080020dd 	.word	0x080020dd
 80020d0:	080020e5 	.word	0x080020e5
 80020d4:	080020ed 	.word	0x080020ed
 80020d8:	080020f5 	.word	0x080020f5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80020dc:	230c      	movs	r3, #12
 80020de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80020e2:	e010      	b.n	8002106 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80020e4:	2312      	movs	r3, #18
 80020e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80020ea:	e00c      	b.n	8002106 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80020ec:	2318      	movs	r3, #24
 80020ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80020f2:	e008      	b.n	8002106 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80020f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80020fc:	e003      	b.n	8002106 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80020fe:	2306      	movs	r3, #6
 8002100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002104:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002114:	f7ff faf2 	bl	80016fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fc49 	bl	80019b4 <LL_ADC_REG_IsConversionOngoing>
 8002122:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fc69 	bl	8001a02 <LL_ADC_INJ_IsConversionOngoing>
 8002130:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002134:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002138:	2b00      	cmp	r3, #0
 800213a:	f040 81a4 	bne.w	8002486 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800213e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002142:	2b00      	cmp	r3, #0
 8002144:	f040 819f 	bne.w	8002486 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	6819      	ldr	r1, [r3, #0]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	461a      	mov	r2, r3
 8002156:	f7ff fafd 	bl	8001754 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	08db      	lsrs	r3, r3, #3
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b04      	cmp	r3, #4
 800217a:	d00a      	beq.n	8002192 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	6919      	ldr	r1, [r3, #16]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800218c:	f7ff fa4e 	bl	800162c <LL_ADC_SetOffset>
 8002190:	e179      	b.n	8002486 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fa6b 	bl	8001674 <LL_ADC_GetOffsetChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10a      	bne.n	80021be <HAL_ADC_ConfigChannel+0x14e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2100      	movs	r1, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fa60 	bl	8001674 <LL_ADC_GetOffsetChannel>
 80021b4:	4603      	mov	r3, r0
 80021b6:	0e9b      	lsrs	r3, r3, #26
 80021b8:	f003 021f 	and.w	r2, r3, #31
 80021bc:	e01e      	b.n	80021fc <HAL_ADC_ConfigChannel+0x18c>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fa55 	bl	8001674 <LL_ADC_GetOffsetChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80021ec:	2320      	movs	r3, #32
 80021ee:	e004      	b.n	80021fa <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80021f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002204:	2b00      	cmp	r3, #0
 8002206:	d105      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1a4>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	0e9b      	lsrs	r3, r3, #26
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	e018      	b.n	8002246 <HAL_ADC_ConfigChannel+0x1d6>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800222c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002238:	2320      	movs	r3, #32
 800223a:	e004      	b.n	8002246 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800223c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002246:	429a      	cmp	r2, r3
 8002248:	d106      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fa24 	bl	80016a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2101      	movs	r1, #1
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fa08 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8002264:	4603      	mov	r3, r0
 8002266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10a      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x214>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2101      	movs	r1, #1
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff f9fd 	bl	8001674 <LL_ADC_GetOffsetChannel>
 800227a:	4603      	mov	r3, r0
 800227c:	0e9b      	lsrs	r3, r3, #26
 800227e:	f003 021f 	and.w	r2, r3, #31
 8002282:	e01e      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x252>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f9f2 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80022a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80022aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80022b2:	2320      	movs	r3, #32
 80022b4:	e004      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80022b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <HAL_ADC_ConfigChannel+0x26a>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	0e9b      	lsrs	r3, r3, #26
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	e018      	b.n	800230c <HAL_ADC_ConfigChannel+0x29c>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80022ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80022f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80022fe:	2320      	movs	r3, #32
 8002300:	e004      	b.n	800230c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002302:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800230c:	429a      	cmp	r2, r3
 800230e:	d106      	bne.n	800231e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2200      	movs	r2, #0
 8002316:	2101      	movs	r1, #1
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff f9c1 	bl	80016a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2102      	movs	r1, #2
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff f9a5 	bl	8001674 <LL_ADC_GetOffsetChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10a      	bne.n	800234a <HAL_ADC_ConfigChannel+0x2da>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2102      	movs	r1, #2
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff f99a 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	0e9b      	lsrs	r3, r3, #26
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	e01e      	b.n	8002388 <HAL_ADC_ConfigChannel+0x318>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2102      	movs	r1, #2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff f98f 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800236c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002370:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002378:	2320      	movs	r3, #32
 800237a:	e004      	b.n	8002386 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800237c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x330>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0e9b      	lsrs	r3, r3, #26
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	e014      	b.n	80023ca <HAL_ADC_ConfigChannel+0x35a>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80023ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80023b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80023bc:	2320      	movs	r3, #32
 80023be:	e004      	b.n	80023ca <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80023c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023c4:	fab3 f383 	clz	r3, r3
 80023c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d106      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2200      	movs	r2, #0
 80023d4:	2102      	movs	r1, #2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff f962 	bl	80016a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2103      	movs	r1, #3
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff f946 	bl	8001674 <LL_ADC_GetOffsetChannel>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10a      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x398>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2103      	movs	r1, #3
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff f93b 	bl	8001674 <LL_ADC_GetOffsetChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	0e9b      	lsrs	r3, r3, #26
 8002402:	f003 021f 	and.w	r2, r3, #31
 8002406:	e017      	b.n	8002438 <HAL_ADC_ConfigChannel+0x3c8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2103      	movs	r1, #3
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff f930 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8002414:	4603      	mov	r3, r0
 8002416:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002422:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800242a:	2320      	movs	r3, #32
 800242c:	e003      	b.n	8002436 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800242e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002440:	2b00      	cmp	r3, #0
 8002442:	d105      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x3e0>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0e9b      	lsrs	r3, r3, #26
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	e011      	b.n	8002474 <HAL_ADC_ConfigChannel+0x404>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800245e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002460:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002462:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002468:	2320      	movs	r3, #32
 800246a:	e003      	b.n	8002474 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800246c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002474:	429a      	cmp	r2, r3
 8002476:	d106      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2200      	movs	r2, #0
 800247e:	2103      	movs	r1, #3
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff f90d 	bl	80016a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fa44 	bl	8001918 <LL_ADC_IsEnabled>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	f040 8140 	bne.w	8002718 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	6819      	ldr	r1, [r3, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	461a      	mov	r2, r3
 80024a6:	f7ff f981 	bl	80017ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4a8f      	ldr	r2, [pc, #572]	; (80026ec <HAL_ADC_ConfigChannel+0x67c>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	f040 8131 	bne.w	8002718 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_ADC_ConfigChannel+0x46e>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	0e9b      	lsrs	r3, r3, #26
 80024cc:	3301      	adds	r3, #1
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	2b09      	cmp	r3, #9
 80024d4:	bf94      	ite	ls
 80024d6:	2301      	movls	r3, #1
 80024d8:	2300      	movhi	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	e019      	b.n	8002512 <HAL_ADC_ConfigChannel+0x4a2>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80024ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80024f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80024f6:	2320      	movs	r3, #32
 80024f8:	e003      	b.n	8002502 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80024fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	b2db      	uxtb	r3, r3
 8002502:	3301      	adds	r3, #1
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	2b09      	cmp	r3, #9
 800250a:	bf94      	ite	ls
 800250c:	2301      	movls	r3, #1
 800250e:	2300      	movhi	r3, #0
 8002510:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002512:	2b00      	cmp	r3, #0
 8002514:	d079      	beq.n	800260a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251e:	2b00      	cmp	r3, #0
 8002520:	d107      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x4c2>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	0e9b      	lsrs	r3, r3, #26
 8002528:	3301      	adds	r3, #1
 800252a:	069b      	lsls	r3, r3, #26
 800252c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002530:	e015      	b.n	800255e <HAL_ADC_ConfigChannel+0x4ee>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002542:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800254a:	2320      	movs	r3, #32
 800254c:	e003      	b.n	8002556 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800254e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	3301      	adds	r3, #1
 8002558:	069b      	lsls	r3, r3, #26
 800255a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002566:	2b00      	cmp	r3, #0
 8002568:	d109      	bne.n	800257e <HAL_ADC_ConfigChannel+0x50e>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	0e9b      	lsrs	r3, r3, #26
 8002570:	3301      	adds	r3, #1
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	2101      	movs	r1, #1
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	e017      	b.n	80025ae <HAL_ADC_ConfigChannel+0x53e>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800258c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002596:	2320      	movs	r3, #32
 8002598:	e003      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800259a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	2101      	movs	r1, #1
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	ea42 0103 	orr.w	r1, r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10a      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x564>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	0e9b      	lsrs	r3, r3, #26
 80025c4:	3301      	adds	r3, #1
 80025c6:	f003 021f 	and.w	r2, r3, #31
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	051b      	lsls	r3, r3, #20
 80025d2:	e018      	b.n	8002606 <HAL_ADC_ConfigChannel+0x596>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80025e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80025e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80025ec:	2320      	movs	r3, #32
 80025ee:	e003      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80025f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	3301      	adds	r3, #1
 80025fa:	f003 021f 	and.w	r2, r3, #31
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002606:	430b      	orrs	r3, r1
 8002608:	e081      	b.n	800270e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002612:	2b00      	cmp	r3, #0
 8002614:	d107      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x5b6>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	0e9b      	lsrs	r3, r3, #26
 800261c:	3301      	adds	r3, #1
 800261e:	069b      	lsls	r3, r3, #26
 8002620:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002624:	e015      	b.n	8002652 <HAL_ADC_ConfigChannel+0x5e2>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800263e:	2320      	movs	r3, #32
 8002640:	e003      	b.n	800264a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	3301      	adds	r3, #1
 800264c:	069b      	lsls	r3, r3, #26
 800264e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x602>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	0e9b      	lsrs	r3, r3, #26
 8002664:	3301      	adds	r3, #1
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	2101      	movs	r1, #1
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	e017      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x632>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	61bb      	str	r3, [r7, #24]
  return result;
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800268a:	2320      	movs	r3, #32
 800268c:	e003      	b.n	8002696 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	fab3 f383 	clz	r3, r3
 8002694:	b2db      	uxtb	r3, r3
 8002696:	3301      	adds	r3, #1
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	2101      	movs	r1, #1
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	ea42 0103 	orr.w	r1, r2, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10d      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x65e>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	0e9b      	lsrs	r3, r3, #26
 80026b8:	3301      	adds	r3, #1
 80026ba:	f003 021f 	and.w	r2, r3, #31
 80026be:	4613      	mov	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	3b1e      	subs	r3, #30
 80026c6:	051b      	lsls	r3, r3, #20
 80026c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026cc:	e01e      	b.n	800270c <HAL_ADC_ConfigChannel+0x69c>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	60fb      	str	r3, [r7, #12]
  return result;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d104      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80026e6:	2320      	movs	r3, #32
 80026e8:	e006      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x688>
 80026ea:	bf00      	nop
 80026ec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	f003 021f 	and.w	r2, r3, #31
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	3b1e      	subs	r3, #30
 8002706:	051b      	lsls	r3, r3, #20
 8002708:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800270c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002712:	4619      	mov	r1, r3
 8002714:	f7ff f81e 	bl	8001754 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b44      	ldr	r3, [pc, #272]	; (8002830 <HAL_ADC_ConfigChannel+0x7c0>)
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d07a      	beq.n	800281a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002724:	4843      	ldr	r0, [pc, #268]	; (8002834 <HAL_ADC_ConfigChannel+0x7c4>)
 8002726:	f7fe ff73 	bl	8001610 <LL_ADC_GetCommonPathInternalCh>
 800272a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a41      	ldr	r2, [pc, #260]	; (8002838 <HAL_ADC_ConfigChannel+0x7c8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d12c      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002738:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800273c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d126      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a3c      	ldr	r2, [pc, #240]	; (800283c <HAL_ADC_ConfigChannel+0x7cc>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d004      	beq.n	8002758 <HAL_ADC_ConfigChannel+0x6e8>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a3b      	ldr	r2, [pc, #236]	; (8002840 <HAL_ADC_ConfigChannel+0x7d0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d15d      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002758:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800275c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002760:	4619      	mov	r1, r3
 8002762:	4834      	ldr	r0, [pc, #208]	; (8002834 <HAL_ADC_ConfigChannel+0x7c4>)
 8002764:	f7fe ff41 	bl	80015ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002768:	4b36      	ldr	r3, [pc, #216]	; (8002844 <HAL_ADC_ConfigChannel+0x7d4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	099b      	lsrs	r3, r3, #6
 800276e:	4a36      	ldr	r2, [pc, #216]	; (8002848 <HAL_ADC_ConfigChannel+0x7d8>)
 8002770:	fba2 2303 	umull	r2, r3, r2, r3
 8002774:	099b      	lsrs	r3, r3, #6
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002782:	e002      	b.n	800278a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	3b01      	subs	r3, #1
 8002788:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f9      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002790:	e040      	b.n	8002814 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a2d      	ldr	r2, [pc, #180]	; (800284c <HAL_ADC_ConfigChannel+0x7dc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d118      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800279c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d112      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a23      	ldr	r2, [pc, #140]	; (800283c <HAL_ADC_ConfigChannel+0x7cc>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d004      	beq.n	80027bc <HAL_ADC_ConfigChannel+0x74c>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a22      	ldr	r2, [pc, #136]	; (8002840 <HAL_ADC_ConfigChannel+0x7d0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d12d      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027c4:	4619      	mov	r1, r3
 80027c6:	481b      	ldr	r0, [pc, #108]	; (8002834 <HAL_ADC_ConfigChannel+0x7c4>)
 80027c8:	f7fe ff0f 	bl	80015ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027cc:	e024      	b.n	8002818 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_ADC_ConfigChannel+0x7e0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d120      	bne.n	800281a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d11a      	bne.n	800281a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a14      	ldr	r2, [pc, #80]	; (800283c <HAL_ADC_ConfigChannel+0x7cc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d115      	bne.n	800281a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027f6:	4619      	mov	r1, r3
 80027f8:	480e      	ldr	r0, [pc, #56]	; (8002834 <HAL_ADC_ConfigChannel+0x7c4>)
 80027fa:	f7fe fef6 	bl	80015ea <LL_ADC_SetCommonPathInternalCh>
 80027fe:	e00c      	b.n	800281a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002804:	f043 0220 	orr.w	r2, r3, #32
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002812:	e002      	b.n	800281a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002814:	bf00      	nop
 8002816:	e000      	b.n	800281a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002818:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002822:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002826:	4618      	mov	r0, r3
 8002828:	37d8      	adds	r7, #216	; 0xd8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	80080000 	.word	0x80080000
 8002834:	50040300 	.word	0x50040300
 8002838:	c7520000 	.word	0xc7520000
 800283c:	50040000 	.word	0x50040000
 8002840:	50040200 	.word	0x50040200
 8002844:	20000000 	.word	0x20000000
 8002848:	053e2d63 	.word	0x053e2d63
 800284c:	cb840000 	.word	0xcb840000
 8002850:	80000001 	.word	0x80000001

08002854 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff f8a2 	bl	80019b4 <LL_ADC_REG_IsConversionOngoing>
 8002870:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff f8c3 	bl	8001a02 <LL_ADC_INJ_IsConversionOngoing>
 800287c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d103      	bne.n	800288c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 8098 	beq.w	80029bc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d02a      	beq.n	80028f0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	7e5b      	ldrb	r3, [r3, #25]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d126      	bne.n	80028f0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	7e1b      	ldrb	r3, [r3, #24]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d122      	bne.n	80028f0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80028aa:	2301      	movs	r3, #1
 80028ac:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028ae:	e014      	b.n	80028da <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	4a45      	ldr	r2, [pc, #276]	; (80029c8 <ADC_ConversionStop+0x174>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d90d      	bls.n	80028d4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028bc:	f043 0210 	orr.w	r2, r3, #16
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c8:	f043 0201 	orr.w	r2, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e074      	b.n	80029be <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	3301      	adds	r3, #1
 80028d8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e4:	2b40      	cmp	r3, #64	; 0x40
 80028e6:	d1e3      	bne.n	80028b0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2240      	movs	r2, #64	; 0x40
 80028ee:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d014      	beq.n	8002920 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff f85a 	bl	80019b4 <LL_ADC_REG_IsConversionOngoing>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00c      	beq.n	8002920 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff f817 	bl	800193e <LL_ADC_IsDisableOngoing>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d104      	bne.n	8002920 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff f836 	bl	800198c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d014      	beq.n	8002950 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff f869 	bl	8001a02 <LL_ADC_INJ_IsConversionOngoing>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00c      	beq.n	8002950 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe ffff 	bl	800193e <LL_ADC_IsDisableOngoing>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d104      	bne.n	8002950 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff f845 	bl	80019da <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d005      	beq.n	8002962 <ADC_ConversionStop+0x10e>
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d105      	bne.n	8002968 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800295c:	230c      	movs	r3, #12
 800295e:	617b      	str	r3, [r7, #20]
        break;
 8002960:	e005      	b.n	800296e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002962:	2308      	movs	r3, #8
 8002964:	617b      	str	r3, [r7, #20]
        break;
 8002966:	e002      	b.n	800296e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002968:	2304      	movs	r3, #4
 800296a:	617b      	str	r3, [r7, #20]
        break;
 800296c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800296e:	f7fe fdf9 	bl	8001564 <HAL_GetTick>
 8002972:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002974:	e01b      	b.n	80029ae <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002976:	f7fe fdf5 	bl	8001564 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b05      	cmp	r3, #5
 8002982:	d914      	bls.n	80029ae <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00d      	beq.n	80029ae <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	f043 0210 	orr.w	r2, r3, #16
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a2:	f043 0201 	orr.w	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e007      	b.n	80029be <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1dc      	bne.n	8002976 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3720      	adds	r7, #32
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	a33fffff 	.word	0xa33fffff

080029cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe ff9b 	bl	8001918 <LL_ADC_IsEnabled>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d169      	bne.n	8002abc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <ADC_Enable+0xfc>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00d      	beq.n	8002a12 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fa:	f043 0210 	orr.w	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	f043 0201 	orr.w	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e055      	b.n	8002abe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe ff56 	bl	80018c8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a1c:	482b      	ldr	r0, [pc, #172]	; (8002acc <ADC_Enable+0x100>)
 8002a1e:	f7fe fdf7 	bl	8001610 <LL_ADC_GetCommonPathInternalCh>
 8002a22:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a2c:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <ADC_Enable+0x104>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	099b      	lsrs	r3, r3, #6
 8002a32:	4a28      	ldr	r2, [pc, #160]	; (8002ad4 <ADC_Enable+0x108>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	099b      	lsrs	r3, r3, #6
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a46:	e002      	b.n	8002a4e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f9      	bne.n	8002a48 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a54:	f7fe fd86 	bl	8001564 <HAL_GetTick>
 8002a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a5a:	e028      	b.n	8002aae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe ff59 	bl	8001918 <LL_ADC_IsEnabled>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d104      	bne.n	8002a76 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe ff29 	bl	80018c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a76:	f7fe fd75 	bl	8001564 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d914      	bls.n	8002aae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d00d      	beq.n	8002aae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a96:	f043 0210 	orr.w	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	f043 0201 	orr.w	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e007      	b.n	8002abe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d1cf      	bne.n	8002a5c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	8000003f 	.word	0x8000003f
 8002acc:	50040300 	.word	0x50040300
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	053e2d63 	.word	0x053e2d63

08002ad8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe ff2a 	bl	800193e <LL_ADC_IsDisableOngoing>
 8002aea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe ff11 	bl	8001918 <LL_ADC_IsEnabled>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d047      	beq.n	8002b8c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d144      	bne.n	8002b8c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 030d 	and.w	r3, r3, #13
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d10c      	bne.n	8002b2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe feeb 	bl	80018f0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2203      	movs	r2, #3
 8002b20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b22:	f7fe fd1f 	bl	8001564 <HAL_GetTick>
 8002b26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b28:	e029      	b.n	8002b7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	f043 0210 	orr.w	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	f043 0201 	orr.w	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e023      	b.n	8002b8e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b46:	f7fe fd0d 	bl	8001564 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d914      	bls.n	8002b7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00d      	beq.n	8002b7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b66:	f043 0210 	orr.w	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e007      	b.n	8002b8e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1dc      	bne.n	8002b46 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <LL_ADC_IsEnabled>:
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <LL_ADC_IsEnabled+0x18>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <LL_ADC_IsEnabled+0x1a>
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_ADC_REG_IsConversionOngoing>:
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d101      	bne.n	8002bd4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b09f      	sub	sp, #124	; 0x7c
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e093      	b.n	8002d2a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a47      	ldr	r2, [pc, #284]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d102      	bne.n	8002c22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c1c:	4b46      	ldr	r3, [pc, #280]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	e001      	b.n	8002c26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10b      	bne.n	8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c30:	f043 0220 	orr.w	r2, r3, #32
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e072      	b.n	8002d2a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff ffb8 	bl	8002bbc <LL_ADC_REG_IsConversionOngoing>
 8002c4c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ffb2 	bl	8002bbc <LL_ADC_REG_IsConversionOngoing>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d154      	bne.n	8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d151      	bne.n	8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c64:	4b35      	ldr	r3, [pc, #212]	; (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002c66:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d02c      	beq.n	8002cca <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	6859      	ldr	r1, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c82:	035b      	lsls	r3, r3, #13
 8002c84:	430b      	orrs	r3, r1
 8002c86:	431a      	orrs	r2, r3
 8002c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c8c:	4829      	ldr	r0, [pc, #164]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c8e:	f7ff ff82 	bl	8002b96 <LL_ADC_IsEnabled>
 8002c92:	4604      	mov	r4, r0
 8002c94:	4828      	ldr	r0, [pc, #160]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c96:	f7ff ff7e 	bl	8002b96 <LL_ADC_IsEnabled>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	431c      	orrs	r4, r3
 8002c9e:	4828      	ldr	r0, [pc, #160]	; (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002ca0:	f7ff ff79 	bl	8002b96 <LL_ADC_IsEnabled>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4323      	orrs	r3, r4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d137      	bne.n	8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cb4:	f023 030f 	bic.w	r3, r3, #15
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	6811      	ldr	r1, [r2, #0]
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	6892      	ldr	r2, [r2, #8]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cc8:	e028      	b.n	8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cd6:	4817      	ldr	r0, [pc, #92]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002cd8:	f7ff ff5d 	bl	8002b96 <LL_ADC_IsEnabled>
 8002cdc:	4604      	mov	r4, r0
 8002cde:	4816      	ldr	r0, [pc, #88]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ce0:	f7ff ff59 	bl	8002b96 <LL_ADC_IsEnabled>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	431c      	orrs	r4, r3
 8002ce8:	4815      	ldr	r0, [pc, #84]	; (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002cea:	f7ff ff54 	bl	8002b96 <LL_ADC_IsEnabled>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4323      	orrs	r3, r4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d112      	bne.n	8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cfe:	f023 030f 	bic.w	r3, r3, #15
 8002d02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d04:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d06:	e009      	b.n	8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	f043 0220 	orr.w	r2, r3, #32
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002d1a:	e000      	b.n	8002d1e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d26:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	377c      	adds	r7, #124	; 0x7c
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd90      	pop	{r4, r7, pc}
 8002d32:	bf00      	nop
 8002d34:	50040000 	.word	0x50040000
 8002d38:	50040100 	.word	0x50040100
 8002d3c:	50040300 	.word	0x50040300
 8002d40:	50040200 	.word	0x50040200

08002d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d60:	4013      	ands	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d76:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	60d3      	str	r3, [r2, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <__NVIC_GetPriorityGrouping+0x18>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	f003 0307 	and.w	r3, r3, #7
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	db0a      	blt.n	8002dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	490c      	ldr	r1, [pc, #48]	; (8002df4 <__NVIC_SetPriority+0x4c>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	0112      	lsls	r2, r2, #4
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	440b      	add	r3, r1
 8002dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd0:	e00a      	b.n	8002de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4908      	ldr	r1, [pc, #32]	; (8002df8 <__NVIC_SetPriority+0x50>)
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	3b04      	subs	r3, #4
 8002de0:	0112      	lsls	r2, r2, #4
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	440b      	add	r3, r1
 8002de6:	761a      	strb	r2, [r3, #24]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000e100 	.word	0xe000e100
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f1c3 0307 	rsb	r3, r3, #7
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	bf28      	it	cs
 8002e1a:	2304      	movcs	r3, #4
 8002e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3304      	adds	r3, #4
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d902      	bls.n	8002e2c <NVIC_EncodePriority+0x30>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3b03      	subs	r3, #3
 8002e2a:	e000      	b.n	8002e2e <NVIC_EncodePriority+0x32>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	f04f 32ff 	mov.w	r2, #4294967295
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	401a      	ands	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e44:	f04f 31ff 	mov.w	r1, #4294967295
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43d9      	mvns	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	4313      	orrs	r3, r2
         );
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3724      	adds	r7, #36	; 0x24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e74:	d301      	bcc.n	8002e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e76:	2301      	movs	r3, #1
 8002e78:	e00f      	b.n	8002e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <SysTick_Config+0x40>)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e82:	210f      	movs	r1, #15
 8002e84:	f04f 30ff 	mov.w	r0, #4294967295
 8002e88:	f7ff ff8e 	bl	8002da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <SysTick_Config+0x40>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e92:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <SysTick_Config+0x40>)
 8002e94:	2207      	movs	r2, #7
 8002e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	e000e010 	.word	0xe000e010

08002ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff ff47 	bl	8002d44 <__NVIC_SetPriorityGrouping>
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b086      	sub	sp, #24
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed0:	f7ff ff5c 	bl	8002d8c <__NVIC_GetPriorityGrouping>
 8002ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	6978      	ldr	r0, [r7, #20]
 8002edc:	f7ff ff8e 	bl	8002dfc <NVIC_EncodePriority>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff5d 	bl	8002da8 <__NVIC_SetPriority>
}
 8002eee:	bf00      	nop
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff ffb0 	bl	8002e64 <SysTick_Config>
 8002f04:	4603      	mov	r3, r0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f1e:	e17f      	b.n	8003220 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	2101      	movs	r1, #1
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8171 	beq.w	800321a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d005      	beq.n	8002f50 <HAL_GPIO_Init+0x40>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d130      	bne.n	8002fb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	2203      	movs	r2, #3
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f86:	2201      	movs	r2, #1
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4013      	ands	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	f003 0201 	and.w	r2, r3, #1
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d118      	bne.n	8002ff0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	08db      	lsrs	r3, r3, #3
 8002fda:	f003 0201 	and.w	r2, r3, #1
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d017      	beq.n	800302c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	2203      	movs	r2, #3
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d123      	bne.n	8003080 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	08da      	lsrs	r2, r3, #3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3208      	adds	r2, #8
 8003040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003044:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	220f      	movs	r2, #15
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	08da      	lsrs	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3208      	adds	r2, #8
 800307a:	6939      	ldr	r1, [r7, #16]
 800307c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	2203      	movs	r2, #3
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4013      	ands	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0203 	and.w	r2, r3, #3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80ac 	beq.w	800321a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c2:	4b5f      	ldr	r3, [pc, #380]	; (8003240 <HAL_GPIO_Init+0x330>)
 80030c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c6:	4a5e      	ldr	r2, [pc, #376]	; (8003240 <HAL_GPIO_Init+0x330>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6613      	str	r3, [r2, #96]	; 0x60
 80030ce:	4b5c      	ldr	r3, [pc, #368]	; (8003240 <HAL_GPIO_Init+0x330>)
 80030d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030da:	4a5a      	ldr	r2, [pc, #360]	; (8003244 <HAL_GPIO_Init+0x334>)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	089b      	lsrs	r3, r3, #2
 80030e0:	3302      	adds	r3, #2
 80030e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	220f      	movs	r2, #15
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4013      	ands	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003104:	d025      	beq.n	8003152 <HAL_GPIO_Init+0x242>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a4f      	ldr	r2, [pc, #316]	; (8003248 <HAL_GPIO_Init+0x338>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01f      	beq.n	800314e <HAL_GPIO_Init+0x23e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a4e      	ldr	r2, [pc, #312]	; (800324c <HAL_GPIO_Init+0x33c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d019      	beq.n	800314a <HAL_GPIO_Init+0x23a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a4d      	ldr	r2, [pc, #308]	; (8003250 <HAL_GPIO_Init+0x340>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_GPIO_Init+0x236>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a4c      	ldr	r2, [pc, #304]	; (8003254 <HAL_GPIO_Init+0x344>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00d      	beq.n	8003142 <HAL_GPIO_Init+0x232>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a4b      	ldr	r2, [pc, #300]	; (8003258 <HAL_GPIO_Init+0x348>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <HAL_GPIO_Init+0x22e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a4a      	ldr	r2, [pc, #296]	; (800325c <HAL_GPIO_Init+0x34c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d101      	bne.n	800313a <HAL_GPIO_Init+0x22a>
 8003136:	2306      	movs	r3, #6
 8003138:	e00c      	b.n	8003154 <HAL_GPIO_Init+0x244>
 800313a:	2307      	movs	r3, #7
 800313c:	e00a      	b.n	8003154 <HAL_GPIO_Init+0x244>
 800313e:	2305      	movs	r3, #5
 8003140:	e008      	b.n	8003154 <HAL_GPIO_Init+0x244>
 8003142:	2304      	movs	r3, #4
 8003144:	e006      	b.n	8003154 <HAL_GPIO_Init+0x244>
 8003146:	2303      	movs	r3, #3
 8003148:	e004      	b.n	8003154 <HAL_GPIO_Init+0x244>
 800314a:	2302      	movs	r3, #2
 800314c:	e002      	b.n	8003154 <HAL_GPIO_Init+0x244>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <HAL_GPIO_Init+0x244>
 8003152:	2300      	movs	r3, #0
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	f002 0203 	and.w	r2, r2, #3
 800315a:	0092      	lsls	r2, r2, #2
 800315c:	4093      	lsls	r3, r2
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003164:	4937      	ldr	r1, [pc, #220]	; (8003244 <HAL_GPIO_Init+0x334>)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	3302      	adds	r3, #2
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003172:	4b3b      	ldr	r3, [pc, #236]	; (8003260 <HAL_GPIO_Init+0x350>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	43db      	mvns	r3, r3
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003196:	4a32      	ldr	r2, [pc, #200]	; (8003260 <HAL_GPIO_Init+0x350>)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800319c:	4b30      	ldr	r3, [pc, #192]	; (8003260 <HAL_GPIO_Init+0x350>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031c0:	4a27      	ldr	r2, [pc, #156]	; (8003260 <HAL_GPIO_Init+0x350>)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031c6:	4b26      	ldr	r3, [pc, #152]	; (8003260 <HAL_GPIO_Init+0x350>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031ea:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <HAL_GPIO_Init+0x350>)
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80031f0:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <HAL_GPIO_Init+0x350>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4013      	ands	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003214:	4a12      	ldr	r2, [pc, #72]	; (8003260 <HAL_GPIO_Init+0x350>)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	3301      	adds	r3, #1
 800321e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	f47f ae78 	bne.w	8002f20 <HAL_GPIO_Init+0x10>
  }
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40021000 	.word	0x40021000
 8003244:	40010000 	.word	0x40010000
 8003248:	48000400 	.word	0x48000400
 800324c:	48000800 	.word	0x48000800
 8003250:	48000c00 	.word	0x48000c00
 8003254:	48001000 	.word	0x48001000
 8003258:	48001400 	.word	0x48001400
 800325c:	48001800 	.word	0x48001800
 8003260:	40010400 	.word	0x40010400

08003264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
 8003270:	4613      	mov	r3, r2
 8003272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003274:	787b      	ldrb	r3, [r7, #1]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003280:	e002      	b.n	8003288 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003282:	887a      	ldrh	r2, [r7, #2]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003298:	4b04      	ldr	r3, [pc, #16]	; (80032ac <HAL_PWREx_GetVoltageRange+0x18>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40007000 	.word	0x40007000

080032b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032be:	d130      	bne.n	8003322 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032c0:	4b23      	ldr	r3, [pc, #140]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032cc:	d038      	beq.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032d6:	4a1e      	ldr	r2, [pc, #120]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2232      	movs	r2, #50	; 0x32
 80032e4:	fb02 f303 	mul.w	r3, r2, r3
 80032e8:	4a1b      	ldr	r2, [pc, #108]	; (8003358 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	0c9b      	lsrs	r3, r3, #18
 80032f0:	3301      	adds	r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f4:	e002      	b.n	80032fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032fc:	4b14      	ldr	r3, [pc, #80]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003308:	d102      	bne.n	8003310 <HAL_PWREx_ControlVoltageScaling+0x60>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f2      	bne.n	80032f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331c:	d110      	bne.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e00f      	b.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003322:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800332a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332e:	d007      	beq.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003330:	4b07      	ldr	r3, [pc, #28]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003338:	4a05      	ldr	r2, [pc, #20]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800333a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800333e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40007000 	.word	0x40007000
 8003354:	20000000 	.word	0x20000000
 8003358:	431bde83 	.word	0x431bde83

0800335c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e3ca      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800336e:	4b97      	ldr	r3, [pc, #604]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003378:	4b94      	ldr	r3, [pc, #592]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80e4 	beq.w	8003558 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <HAL_RCC_OscConfig+0x4a>
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b0c      	cmp	r3, #12
 800339a:	f040 808b 	bne.w	80034b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	f040 8087 	bne.w	80034b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033a6:	4b89      	ldr	r3, [pc, #548]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <HAL_RCC_OscConfig+0x62>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e3a2      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1a      	ldr	r2, [r3, #32]
 80033c2:	4b82      	ldr	r3, [pc, #520]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d004      	beq.n	80033d8 <HAL_RCC_OscConfig+0x7c>
 80033ce:	4b7f      	ldr	r3, [pc, #508]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d6:	e005      	b.n	80033e4 <HAL_RCC_OscConfig+0x88>
 80033d8:	4b7c      	ldr	r3, [pc, #496]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80033da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d223      	bcs.n	8003430 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fd55 	bl	8003e9c <RCC_SetFlashLatencyFromMSIRange>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e383      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033fc:	4b73      	ldr	r3, [pc, #460]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a72      	ldr	r2, [pc, #456]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003402:	f043 0308 	orr.w	r3, r3, #8
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b70      	ldr	r3, [pc, #448]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	496d      	ldr	r1, [pc, #436]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800341a:	4b6c      	ldr	r3, [pc, #432]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	4968      	ldr	r1, [pc, #416]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800342a:	4313      	orrs	r3, r2
 800342c:	604b      	str	r3, [r1, #4]
 800342e:	e025      	b.n	800347c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003430:	4b66      	ldr	r3, [pc, #408]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a65      	ldr	r2, [pc, #404]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003436:	f043 0308 	orr.w	r3, r3, #8
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	4b63      	ldr	r3, [pc, #396]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	4960      	ldr	r1, [pc, #384]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800344e:	4b5f      	ldr	r3, [pc, #380]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	495b      	ldr	r1, [pc, #364]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d109      	bne.n	800347c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fd15 	bl	8003e9c <RCC_SetFlashLatencyFromMSIRange>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e343      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800347c:	f000 fc4a 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8003480:	4602      	mov	r2, r0
 8003482:	4b52      	ldr	r3, [pc, #328]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	4950      	ldr	r1, [pc, #320]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 800348e:	5ccb      	ldrb	r3, [r1, r3]
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	fa22 f303 	lsr.w	r3, r2, r3
 8003498:	4a4e      	ldr	r2, [pc, #312]	; (80035d4 <HAL_RCC_OscConfig+0x278>)
 800349a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800349c:	4b4e      	ldr	r3, [pc, #312]	; (80035d8 <HAL_RCC_OscConfig+0x27c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fe f80f 	bl	80014c4 <HAL_InitTick>
 80034a6:	4603      	mov	r3, r0
 80034a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d052      	beq.n	8003556 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	e327      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d032      	beq.n	8003522 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034bc:	4b43      	ldr	r3, [pc, #268]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a42      	ldr	r2, [pc, #264]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034c8:	f7fe f84c 	bl	8001564 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034d0:	f7fe f848 	bl	8001564 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e310      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034e2:	4b3a      	ldr	r3, [pc, #232]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ee:	4b37      	ldr	r3, [pc, #220]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a36      	ldr	r2, [pc, #216]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034f4:	f043 0308 	orr.w	r3, r3, #8
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4b34      	ldr	r3, [pc, #208]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4931      	ldr	r1, [pc, #196]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003508:	4313      	orrs	r3, r2
 800350a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800350c:	4b2f      	ldr	r3, [pc, #188]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	492c      	ldr	r1, [pc, #176]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
 8003520:	e01a      	b.n	8003558 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003522:	4b2a      	ldr	r3, [pc, #168]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a29      	ldr	r2, [pc, #164]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800352e:	f7fe f819 	bl	8001564 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003536:	f7fe f815 	bl	8001564 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e2dd      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003548:	4b20      	ldr	r3, [pc, #128]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f0      	bne.n	8003536 <HAL_RCC_OscConfig+0x1da>
 8003554:	e000      	b.n	8003558 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003556:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d074      	beq.n	800364e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b08      	cmp	r3, #8
 8003568:	d005      	beq.n	8003576 <HAL_RCC_OscConfig+0x21a>
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b0c      	cmp	r3, #12
 800356e:	d10e      	bne.n	800358e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b03      	cmp	r3, #3
 8003574:	d10b      	bne.n	800358e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003576:	4b15      	ldr	r3, [pc, #84]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d064      	beq.n	800364c <HAL_RCC_OscConfig+0x2f0>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d160      	bne.n	800364c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e2ba      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003596:	d106      	bne.n	80035a6 <HAL_RCC_OscConfig+0x24a>
 8003598:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0b      	ldr	r2, [pc, #44]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800359e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	e026      	b.n	80035f4 <HAL_RCC_OscConfig+0x298>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ae:	d115      	bne.n	80035dc <HAL_RCC_OscConfig+0x280>
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a05      	ldr	r2, [pc, #20]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80035b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a02      	ldr	r2, [pc, #8]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80035c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	e014      	b.n	80035f4 <HAL_RCC_OscConfig+0x298>
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	08005d8c 	.word	0x08005d8c
 80035d4:	20000000 	.word	0x20000000
 80035d8:	20000004 	.word	0x20000004
 80035dc:	4ba0      	ldr	r3, [pc, #640]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a9f      	ldr	r2, [pc, #636]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80035e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	4b9d      	ldr	r3, [pc, #628]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a9c      	ldr	r2, [pc, #624]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80035ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d013      	beq.n	8003624 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fc:	f7fd ffb2 	bl	8001564 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003604:	f7fd ffae 	bl	8001564 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	; 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e276      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003616:	4b92      	ldr	r3, [pc, #584]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0x2a8>
 8003622:	e014      	b.n	800364e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fd ff9e 	bl	8001564 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800362c:	f7fd ff9a 	bl	8001564 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	; 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e262      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800363e:	4b88      	ldr	r3, [pc, #544]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x2d0>
 800364a:	e000      	b.n	800364e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d060      	beq.n	800371c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2b04      	cmp	r3, #4
 800365e:	d005      	beq.n	800366c <HAL_RCC_OscConfig+0x310>
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d119      	bne.n	800369a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d116      	bne.n	800369a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800366c:	4b7c      	ldr	r3, [pc, #496]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_OscConfig+0x328>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e23f      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003684:	4b76      	ldr	r3, [pc, #472]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	061b      	lsls	r3, r3, #24
 8003692:	4973      	ldr	r1, [pc, #460]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003694:	4313      	orrs	r3, r2
 8003696:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003698:	e040      	b.n	800371c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d023      	beq.n	80036ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a2:	4b6f      	ldr	r3, [pc, #444]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a6e      	ldr	r2, [pc, #440]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7fd ff59 	bl	8001564 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b6:	f7fd ff55 	bl	8001564 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e21d      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c8:	4b65      	ldr	r3, [pc, #404]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d4:	4b62      	ldr	r3, [pc, #392]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	061b      	lsls	r3, r3, #24
 80036e2:	495f      	ldr	r1, [pc, #380]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	604b      	str	r3, [r1, #4]
 80036e8:	e018      	b.n	800371c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ea:	4b5d      	ldr	r3, [pc, #372]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a5c      	ldr	r2, [pc, #368]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7fd ff35 	bl	8001564 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fe:	f7fd ff31 	bl	8001564 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e1f9      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003710:	4b53      	ldr	r3, [pc, #332]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f0      	bne.n	80036fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d03c      	beq.n	80037a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01c      	beq.n	800376a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003730:	4b4b      	ldr	r3, [pc, #300]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003736:	4a4a      	ldr	r2, [pc, #296]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003740:	f7fd ff10 	bl	8001564 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003748:	f7fd ff0c 	bl	8001564 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e1d4      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800375a:	4b41      	ldr	r3, [pc, #260]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 800375c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0ef      	beq.n	8003748 <HAL_RCC_OscConfig+0x3ec>
 8003768:	e01b      	b.n	80037a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800376a:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 800376c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003770:	4a3b      	ldr	r2, [pc, #236]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003772:	f023 0301 	bic.w	r3, r3, #1
 8003776:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377a:	f7fd fef3 	bl	8001564 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003782:	f7fd feef 	bl	8001564 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e1b7      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003794:	4b32      	ldr	r3, [pc, #200]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1ef      	bne.n	8003782 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 80a6 	beq.w	80038fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037b0:	2300      	movs	r3, #0
 80037b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037b4:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10d      	bne.n	80037dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c0:	4b27      	ldr	r3, [pc, #156]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	4a26      	ldr	r2, [pc, #152]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80037c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ca:	6593      	str	r3, [r2, #88]	; 0x58
 80037cc:	4b24      	ldr	r3, [pc, #144]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80037ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d8:	2301      	movs	r3, #1
 80037da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037dc:	4b21      	ldr	r3, [pc, #132]	; (8003864 <HAL_RCC_OscConfig+0x508>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d118      	bne.n	800381a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037e8:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <HAL_RCC_OscConfig+0x508>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <HAL_RCC_OscConfig+0x508>)
 80037ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f4:	f7fd feb6 	bl	8001564 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fc:	f7fd feb2 	bl	8001564 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e17a      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800380e:	4b15      	ldr	r3, [pc, #84]	; (8003864 <HAL_RCC_OscConfig+0x508>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d108      	bne.n	8003834 <HAL_RCC_OscConfig+0x4d8>
 8003822:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	4a0d      	ldr	r2, [pc, #52]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003832:	e029      	b.n	8003888 <HAL_RCC_OscConfig+0x52c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b05      	cmp	r3, #5
 800383a:	d115      	bne.n	8003868 <HAL_RCC_OscConfig+0x50c>
 800383c:	4b08      	ldr	r3, [pc, #32]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	4a07      	ldr	r2, [pc, #28]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003844:	f043 0304 	orr.w	r3, r3, #4
 8003848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003852:	4a03      	ldr	r2, [pc, #12]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800385c:	e014      	b.n	8003888 <HAL_RCC_OscConfig+0x52c>
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	40007000 	.word	0x40007000
 8003868:	4b9c      	ldr	r3, [pc, #624]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	4a9b      	ldr	r2, [pc, #620]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003878:	4b98      	ldr	r3, [pc, #608]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387e:	4a97      	ldr	r2, [pc, #604]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 8003880:	f023 0304 	bic.w	r3, r3, #4
 8003884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d016      	beq.n	80038be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003890:	f7fd fe68 	bl	8001564 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003896:	e00a      	b.n	80038ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003898:	f7fd fe64 	bl	8001564 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e12a      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ae:	4b8b      	ldr	r3, [pc, #556]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 80038b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ed      	beq.n	8003898 <HAL_RCC_OscConfig+0x53c>
 80038bc:	e015      	b.n	80038ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038be:	f7fd fe51 	bl	8001564 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c6:	f7fd fe4d 	bl	8001564 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e113      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038dc:	4b7f      	ldr	r3, [pc, #508]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 80038de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1ed      	bne.n	80038c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ea:	7ffb      	ldrb	r3, [r7, #31]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d105      	bne.n	80038fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f0:	4b7a      	ldr	r3, [pc, #488]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 80038f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f4:	4a79      	ldr	r2, [pc, #484]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 80038f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80fe 	beq.w	8003b02 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	2b02      	cmp	r3, #2
 800390c:	f040 80d0 	bne.w	8003ab0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003910:	4b72      	ldr	r3, [pc, #456]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f003 0203 	and.w	r2, r3, #3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	429a      	cmp	r2, r3
 8003922:	d130      	bne.n	8003986 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	3b01      	subs	r3, #1
 8003930:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003932:	429a      	cmp	r2, r3
 8003934:	d127      	bne.n	8003986 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003940:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003942:	429a      	cmp	r2, r3
 8003944:	d11f      	bne.n	8003986 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003950:	2a07      	cmp	r2, #7
 8003952:	bf14      	ite	ne
 8003954:	2201      	movne	r2, #1
 8003956:	2200      	moveq	r2, #0
 8003958:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800395a:	4293      	cmp	r3, r2
 800395c:	d113      	bne.n	8003986 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	3b01      	subs	r3, #1
 800396c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d109      	bne.n	8003986 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	3b01      	subs	r3, #1
 8003980:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d06e      	beq.n	8003a64 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	2b0c      	cmp	r3, #12
 800398a:	d069      	beq.n	8003a60 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800398c:	4b53      	ldr	r3, [pc, #332]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d105      	bne.n	80039a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003998:	4b50      	ldr	r3, [pc, #320]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0ad      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039a8:	4b4c      	ldr	r3, [pc, #304]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a4b      	ldr	r2, [pc, #300]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 80039ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039b4:	f7fd fdd6 	bl	8001564 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039bc:	f7fd fdd2 	bl	8001564 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e09a      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ce:	4b43      	ldr	r3, [pc, #268]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039da:	4b40      	ldr	r3, [pc, #256]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	4b40      	ldr	r3, [pc, #256]	; (8003ae0 <HAL_RCC_OscConfig+0x784>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039ea:	3a01      	subs	r2, #1
 80039ec:	0112      	lsls	r2, r2, #4
 80039ee:	4311      	orrs	r1, r2
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039f4:	0212      	lsls	r2, r2, #8
 80039f6:	4311      	orrs	r1, r2
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039fc:	0852      	lsrs	r2, r2, #1
 80039fe:	3a01      	subs	r2, #1
 8003a00:	0552      	lsls	r2, r2, #21
 8003a02:	4311      	orrs	r1, r2
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a08:	0852      	lsrs	r2, r2, #1
 8003a0a:	3a01      	subs	r2, #1
 8003a0c:	0652      	lsls	r2, r2, #25
 8003a0e:	4311      	orrs	r1, r2
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a14:	0912      	lsrs	r2, r2, #4
 8003a16:	0452      	lsls	r2, r2, #17
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	4930      	ldr	r1, [pc, #192]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a20:	4b2e      	ldr	r3, [pc, #184]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a2d      	ldr	r2, [pc, #180]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 8003a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a2c:	4b2b      	ldr	r3, [pc, #172]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	4a2a      	ldr	r2, [pc, #168]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 8003a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a38:	f7fd fd94 	bl	8001564 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fd fd90 	bl	8001564 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e058      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a52:	4b22      	ldr	r3, [pc, #136]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a5e:	e050      	b.n	8003b02 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e04f      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a64:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d148      	bne.n	8003b02 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a70:	4b1a      	ldr	r3, [pc, #104]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a19      	ldr	r2, [pc, #100]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 8003a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a7c:	4b17      	ldr	r3, [pc, #92]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4a16      	ldr	r2, [pc, #88]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 8003a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a88:	f7fd fd6c 	bl	8001564 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a90:	f7fd fd68 	bl	8001564 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e030      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0x734>
 8003aae:	e028      	b.n	8003b02 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	2b0c      	cmp	r3, #12
 8003ab4:	d023      	beq.n	8003afe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a08      	ldr	r2, [pc, #32]	; (8003adc <HAL_RCC_OscConfig+0x780>)
 8003abc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac2:	f7fd fd4f 	bl	8001564 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac8:	e00c      	b.n	8003ae4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aca:	f7fd fd4b 	bl	8001564 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d905      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e013      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_RCC_OscConfig+0x7b0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1ec      	bne.n	8003aca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_RCC_OscConfig+0x7b0>)
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	4905      	ldr	r1, [pc, #20]	; (8003b0c <HAL_RCC_OscConfig+0x7b0>)
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_RCC_OscConfig+0x7b4>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	60cb      	str	r3, [r1, #12]
 8003afc:	e001      	b.n	8003b02 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3720      	adds	r7, #32
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	feeefffc 	.word	0xfeeefffc

08003b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0e7      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b28:	4b75      	ldr	r3, [pc, #468]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d910      	bls.n	8003b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b72      	ldr	r3, [pc, #456]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 0207 	bic.w	r2, r3, #7
 8003b3e:	4970      	ldr	r1, [pc, #448]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	4b6e      	ldr	r3, [pc, #440]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0cf      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d010      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	4b66      	ldr	r3, [pc, #408]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d908      	bls.n	8003b86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b74:	4b63      	ldr	r3, [pc, #396]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4960      	ldr	r1, [pc, #384]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d04c      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d107      	bne.n	8003baa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b9a:	4b5a      	ldr	r3, [pc, #360]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d121      	bne.n	8003bea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e0a6      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d107      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb2:	4b54      	ldr	r3, [pc, #336]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d115      	bne.n	8003bea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e09a      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bca:	4b4e      	ldr	r3, [pc, #312]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e08e      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bda:	4b4a      	ldr	r3, [pc, #296]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e086      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bea:	4b46      	ldr	r3, [pc, #280]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f023 0203 	bic.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4943      	ldr	r1, [pc, #268]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bfc:	f7fd fcb2 	bl	8001564 <HAL_GetTick>
 8003c00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	e00a      	b.n	8003c1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c04:	f7fd fcae 	bl	8001564 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e06e      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1a:	4b3a      	ldr	r3, [pc, #232]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 020c 	and.w	r2, r3, #12
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d1eb      	bne.n	8003c04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d010      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	4b31      	ldr	r3, [pc, #196]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d208      	bcs.n	8003c5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c48:	4b2e      	ldr	r3, [pc, #184]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	492b      	ldr	r1, [pc, #172]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c5a:	4b29      	ldr	r3, [pc, #164]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d210      	bcs.n	8003c8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c68:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f023 0207 	bic.w	r2, r3, #7
 8003c70:	4923      	ldr	r1, [pc, #140]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c78:	4b21      	ldr	r3, [pc, #132]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d001      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e036      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c96:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	4918      	ldr	r1, [pc, #96]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d009      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cb4:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4910      	ldr	r1, [pc, #64]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cc8:	f000 f824 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b0d      	ldr	r3, [pc, #52]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	490b      	ldr	r1, [pc, #44]	; (8003d08 <HAL_RCC_ClockConfig+0x1f4>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce4:	4a09      	ldr	r2, [pc, #36]	; (8003d0c <HAL_RCC_ClockConfig+0x1f8>)
 8003ce6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ce8:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <HAL_RCC_ClockConfig+0x1fc>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fd fbe9 	bl	80014c4 <HAL_InitTick>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003cf6:	7afb      	ldrb	r3, [r7, #11]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40022000 	.word	0x40022000
 8003d04:	40021000 	.word	0x40021000
 8003d08:	08005d8c 	.word	0x08005d8c
 8003d0c:	20000000 	.word	0x20000000
 8003d10:	20000004 	.word	0x20000004

08003d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b089      	sub	sp, #36	; 0x24
 8003d18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d22:	4b3e      	ldr	r3, [pc, #248]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
 8003d2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d2c:	4b3b      	ldr	r3, [pc, #236]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0x34>
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	d121      	bne.n	8003d86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d11e      	bne.n	8003d86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d48:	4b34      	ldr	r3, [pc, #208]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d54:	4b31      	ldr	r3, [pc, #196]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	e005      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d64:	4b2d      	ldr	r3, [pc, #180]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d70:	4a2b      	ldr	r2, [pc, #172]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10d      	bne.n	8003d9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d84:	e00a      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d102      	bne.n	8003d92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d8c:	4b25      	ldr	r3, [pc, #148]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	e004      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d101      	bne.n	8003d9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d98:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2b0c      	cmp	r3, #12
 8003da0:	d134      	bne.n	8003e0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003da2:	4b1e      	ldr	r3, [pc, #120]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d003      	beq.n	8003dba <HAL_RCC_GetSysClockFreq+0xa6>
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d003      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0xac>
 8003db8:	e005      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003dba:	4b1a      	ldr	r3, [pc, #104]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dbc:	617b      	str	r3, [r7, #20]
      break;
 8003dbe:	e005      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x114>)
 8003dc2:	617b      	str	r3, [r7, #20]
      break;
 8003dc4:	e002      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	617b      	str	r3, [r7, #20]
      break;
 8003dca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dcc:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dda:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	fb03 f202 	mul.w	r2, r3, r2
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003df2:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	0e5b      	lsrs	r3, r3, #25
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e0c:	69bb      	ldr	r3, [r7, #24]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3724      	adds	r7, #36	; 0x24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	08005da4 	.word	0x08005da4
 8003e24:	00f42400 	.word	0x00f42400
 8003e28:	007a1200 	.word	0x007a1200

08003e2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e30:	4b03      	ldr	r3, [pc, #12]	; (8003e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e32:	681b      	ldr	r3, [r3, #0]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000000 	.word	0x20000000

08003e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e48:	f7ff fff0 	bl	8003e2c <HAL_RCC_GetHCLKFreq>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	0a1b      	lsrs	r3, r3, #8
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	4904      	ldr	r1, [pc, #16]	; (8003e6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e5a:	5ccb      	ldrb	r3, [r1, r3]
 8003e5c:	f003 031f 	and.w	r3, r3, #31
 8003e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	08005d9c 	.word	0x08005d9c

08003e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e74:	f7ff ffda 	bl	8003e2c <HAL_RCC_GetHCLKFreq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	0adb      	lsrs	r3, r3, #11
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	4904      	ldr	r1, [pc, #16]	; (8003e98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e86:	5ccb      	ldrb	r3, [r1, r3]
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40021000 	.word	0x40021000
 8003e98:	08005d9c 	.word	0x08005d9c

08003e9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ea8:	4b2a      	ldr	r3, [pc, #168]	; (8003f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003eb4:	f7ff f9ee 	bl	8003294 <HAL_PWREx_GetVoltageRange>
 8003eb8:	6178      	str	r0, [r7, #20]
 8003eba:	e014      	b.n	8003ee6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ebc:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	4a24      	ldr	r2, [pc, #144]	; (8003f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ec8:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ed4:	f7ff f9de 	bl	8003294 <HAL_PWREx_GetVoltageRange>
 8003ed8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003eda:	4b1e      	ldr	r3, [pc, #120]	; (8003f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ede:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eec:	d10b      	bne.n	8003f06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b80      	cmp	r3, #128	; 0x80
 8003ef2:	d919      	bls.n	8003f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2ba0      	cmp	r3, #160	; 0xa0
 8003ef8:	d902      	bls.n	8003f00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003efa:	2302      	movs	r3, #2
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	e013      	b.n	8003f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f00:	2301      	movs	r3, #1
 8003f02:	613b      	str	r3, [r7, #16]
 8003f04:	e010      	b.n	8003f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b80      	cmp	r3, #128	; 0x80
 8003f0a:	d902      	bls.n	8003f12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	e00a      	b.n	8003f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b80      	cmp	r3, #128	; 0x80
 8003f16:	d102      	bne.n	8003f1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f18:	2302      	movs	r3, #2
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	e004      	b.n	8003f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b70      	cmp	r3, #112	; 0x70
 8003f22:	d101      	bne.n	8003f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f24:	2301      	movs	r3, #1
 8003f26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f28:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f023 0207 	bic.w	r2, r3, #7
 8003f30:	4909      	ldr	r1, [pc, #36]	; (8003f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f38:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d001      	beq.n	8003f4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40022000 	.word	0x40022000

08003f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f64:	2300      	movs	r3, #0
 8003f66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f68:	2300      	movs	r3, #0
 8003f6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d041      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f80:	d02a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f86:	d824      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f8c:	d008      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f92:	d81e      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f9c:	d010      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f9e:	e018      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fa0:	4b86      	ldr	r3, [pc, #536]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4a85      	ldr	r2, [pc, #532]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003faa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fac:	e015      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fabb 	bl	8004530 <RCCEx_PLLSAI1_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fbe:	e00c      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3320      	adds	r3, #32
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fba6 	bl	8004718 <RCCEx_PLLSAI2_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fd0:	e003      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	74fb      	strb	r3, [r7, #19]
      break;
 8003fd6:	e000      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fe0:	4b76      	ldr	r3, [pc, #472]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fee:	4973      	ldr	r1, [pc, #460]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ff6:	e001      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d041      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800400c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004010:	d02a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004012:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004016:	d824      	bhi.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004018:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800401c:	d008      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800401e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004022:	d81e      	bhi.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800402c:	d010      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800402e:	e018      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004030:	4b62      	ldr	r3, [pc, #392]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4a61      	ldr	r2, [pc, #388]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800403c:	e015      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3304      	adds	r3, #4
 8004042:	2100      	movs	r1, #0
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fa73 	bl	8004530 <RCCEx_PLLSAI1_Config>
 800404a:	4603      	mov	r3, r0
 800404c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800404e:	e00c      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3320      	adds	r3, #32
 8004054:	2100      	movs	r1, #0
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fb5e 	bl	8004718 <RCCEx_PLLSAI2_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004060:	e003      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	74fb      	strb	r3, [r7, #19]
      break;
 8004066:	e000      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004068:	bf00      	nop
    }

    if(ret == HAL_OK)
 800406a:	7cfb      	ldrb	r3, [r7, #19]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10b      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004070:	4b52      	ldr	r3, [pc, #328]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800407e:	494f      	ldr	r1, [pc, #316]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004086:	e001      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004088:	7cfb      	ldrb	r3, [r7, #19]
 800408a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80a0 	beq.w	80041da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800409a:	2300      	movs	r3, #0
 800409c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800409e:	4b47      	ldr	r3, [pc, #284]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80040ae:	2300      	movs	r3, #0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00d      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b4:	4b41      	ldr	r3, [pc, #260]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b8:	4a40      	ldr	r2, [pc, #256]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040be:	6593      	str	r3, [r2, #88]	; 0x58
 80040c0:	4b3e      	ldr	r3, [pc, #248]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040cc:	2301      	movs	r3, #1
 80040ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040d0:	4b3b      	ldr	r3, [pc, #236]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a3a      	ldr	r2, [pc, #232]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040dc:	f7fd fa42 	bl	8001564 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040e2:	e009      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e4:	f7fd fa3e 	bl	8001564 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d902      	bls.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	74fb      	strb	r3, [r7, #19]
        break;
 80040f6:	e005      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040f8:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0ef      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004104:	7cfb      	ldrb	r3, [r7, #19]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d15c      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800410a:	4b2c      	ldr	r3, [pc, #176]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004114:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01f      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	429a      	cmp	r2, r3
 8004126:	d019      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004128:	4b24      	ldr	r3, [pc, #144]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004132:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004134:	4b21      	ldr	r3, [pc, #132]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	4a20      	ldr	r2, [pc, #128]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004144:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414a:	4a1c      	ldr	r2, [pc, #112]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004154:	4a19      	ldr	r2, [pc, #100]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d016      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004166:	f7fd f9fd 	bl	8001564 <HAL_GetTick>
 800416a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800416c:	e00b      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416e:	f7fd f9f9 	bl	8001564 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	f241 3288 	movw	r2, #5000	; 0x1388
 800417c:	4293      	cmp	r3, r2
 800417e:	d902      	bls.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	74fb      	strb	r3, [r7, #19]
            break;
 8004184:	e006      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004186:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0ec      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004194:	7cfb      	ldrb	r3, [r7, #19]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10c      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800419a:	4b08      	ldr	r3, [pc, #32]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800419c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041aa:	4904      	ldr	r1, [pc, #16]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041b2:	e009      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041b4:	7cfb      	ldrb	r3, [r7, #19]
 80041b6:	74bb      	strb	r3, [r7, #18]
 80041b8:	e006      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041c8:	7c7b      	ldrb	r3, [r7, #17]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d105      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ce:	4b9e      	ldr	r3, [pc, #632]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d2:	4a9d      	ldr	r2, [pc, #628]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041e6:	4b98      	ldr	r3, [pc, #608]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ec:	f023 0203 	bic.w	r2, r3, #3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	4994      	ldr	r1, [pc, #592]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004208:	4b8f      	ldr	r3, [pc, #572]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420e:	f023 020c 	bic.w	r2, r3, #12
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004216:	498c      	ldr	r1, [pc, #560]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800422a:	4b87      	ldr	r3, [pc, #540]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004230:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	4983      	ldr	r1, [pc, #524]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800424c:	4b7e      	ldr	r3, [pc, #504]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004252:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	497b      	ldr	r1, [pc, #492]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800426e:	4b76      	ldr	r3, [pc, #472]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004274:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427c:	4972      	ldr	r1, [pc, #456]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004290:	4b6d      	ldr	r3, [pc, #436]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004296:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429e:	496a      	ldr	r1, [pc, #424]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042b2:	4b65      	ldr	r3, [pc, #404]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c0:	4961      	ldr	r1, [pc, #388]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042d4:	4b5c      	ldr	r3, [pc, #368]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e2:	4959      	ldr	r1, [pc, #356]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042f6:	4b54      	ldr	r3, [pc, #336]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004304:	4950      	ldr	r1, [pc, #320]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00a      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004318:	4b4b      	ldr	r3, [pc, #300]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004326:	4948      	ldr	r1, [pc, #288]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800433a:	4b43      	ldr	r3, [pc, #268]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004340:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004348:	493f      	ldr	r1, [pc, #252]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d028      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800435c:	4b3a      	ldr	r3, [pc, #232]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800436a:	4937      	ldr	r1, [pc, #220]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004376:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800437a:	d106      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800437c:	4b32      	ldr	r3, [pc, #200]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4a31      	ldr	r2, [pc, #196]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004382:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004386:	60d3      	str	r3, [r2, #12]
 8004388:	e011      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800438e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004392:	d10c      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3304      	adds	r3, #4
 8004398:	2101      	movs	r1, #1
 800439a:	4618      	mov	r0, r3
 800439c:	f000 f8c8 	bl	8004530 <RCCEx_PLLSAI1_Config>
 80043a0:	4603      	mov	r3, r0
 80043a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043a4:	7cfb      	ldrb	r3, [r7, #19]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80043aa:	7cfb      	ldrb	r3, [r7, #19]
 80043ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d028      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043ba:	4b23      	ldr	r3, [pc, #140]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c8:	491f      	ldr	r1, [pc, #124]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043d8:	d106      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043da:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	4a1a      	ldr	r2, [pc, #104]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043e4:	60d3      	str	r3, [r2, #12]
 80043e6:	e011      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043f0:	d10c      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3304      	adds	r3, #4
 80043f6:	2101      	movs	r1, #1
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 f899 	bl	8004530 <RCCEx_PLLSAI1_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004402:	7cfb      	ldrb	r3, [r7, #19]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d02b      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004426:	4908      	ldr	r1, [pc, #32]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004436:	d109      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4a02      	ldr	r2, [pc, #8]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004442:	60d3      	str	r3, [r2, #12]
 8004444:	e014      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004446:	bf00      	nop
 8004448:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004454:	d10c      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3304      	adds	r3, #4
 800445a:	2101      	movs	r1, #1
 800445c:	4618      	mov	r0, r3
 800445e:	f000 f867 	bl	8004530 <RCCEx_PLLSAI1_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004466:	7cfb      	ldrb	r3, [r7, #19]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800446c:	7cfb      	ldrb	r3, [r7, #19]
 800446e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d02f      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800447c:	4b2b      	ldr	r3, [pc, #172]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800448a:	4928      	ldr	r1, [pc, #160]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800449a:	d10d      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	2102      	movs	r1, #2
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 f844 	bl	8004530 <RCCEx_PLLSAI1_Config>
 80044a8:	4603      	mov	r3, r0
 80044aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044ac:	7cfb      	ldrb	r3, [r7, #19]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d014      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80044b2:	7cfb      	ldrb	r3, [r7, #19]
 80044b4:	74bb      	strb	r3, [r7, #18]
 80044b6:	e011      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044c0:	d10c      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3320      	adds	r3, #32
 80044c6:	2102      	movs	r1, #2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 f925 	bl	8004718 <RCCEx_PLLSAI2_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044d2:	7cfb      	ldrb	r3, [r7, #19]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80044d8:	7cfb      	ldrb	r3, [r7, #19]
 80044da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044e8:	4b10      	ldr	r3, [pc, #64]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044f6:	490d      	ldr	r1, [pc, #52]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800450a:	4b08      	ldr	r3, [pc, #32]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004510:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800451a:	4904      	ldr	r1, [pc, #16]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004522:	7cbb      	ldrb	r3, [r7, #18]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40021000 	.word	0x40021000

08004530 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800453e:	4b75      	ldr	r3, [pc, #468]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d018      	beq.n	800457c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800454a:	4b72      	ldr	r3, [pc, #456]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f003 0203 	and.w	r2, r3, #3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d10d      	bne.n	8004576 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
       ||
 800455e:	2b00      	cmp	r3, #0
 8004560:	d009      	beq.n	8004576 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004562:	4b6c      	ldr	r3, [pc, #432]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	091b      	lsrs	r3, r3, #4
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
       ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d047      	beq.n	8004606 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
 800457a:	e044      	b.n	8004606 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b03      	cmp	r3, #3
 8004582:	d018      	beq.n	80045b6 <RCCEx_PLLSAI1_Config+0x86>
 8004584:	2b03      	cmp	r3, #3
 8004586:	d825      	bhi.n	80045d4 <RCCEx_PLLSAI1_Config+0xa4>
 8004588:	2b01      	cmp	r3, #1
 800458a:	d002      	beq.n	8004592 <RCCEx_PLLSAI1_Config+0x62>
 800458c:	2b02      	cmp	r3, #2
 800458e:	d009      	beq.n	80045a4 <RCCEx_PLLSAI1_Config+0x74>
 8004590:	e020      	b.n	80045d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004592:	4b60      	ldr	r3, [pc, #384]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d11d      	bne.n	80045da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a2:	e01a      	b.n	80045da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045a4:	4b5b      	ldr	r3, [pc, #364]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d116      	bne.n	80045de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b4:	e013      	b.n	80045de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045b6:	4b57      	ldr	r3, [pc, #348]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10f      	bne.n	80045e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045c2:	4b54      	ldr	r3, [pc, #336]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045d2:	e006      	b.n	80045e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
      break;
 80045d8:	e004      	b.n	80045e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045da:	bf00      	nop
 80045dc:	e002      	b.n	80045e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045de:	bf00      	nop
 80045e0:	e000      	b.n	80045e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10d      	bne.n	8004606 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045ea:	4b4a      	ldr	r3, [pc, #296]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6819      	ldr	r1, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	430b      	orrs	r3, r1
 8004600:	4944      	ldr	r1, [pc, #272]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004602:	4313      	orrs	r3, r2
 8004604:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d17d      	bne.n	8004708 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800460c:	4b41      	ldr	r3, [pc, #260]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a40      	ldr	r2, [pc, #256]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004612:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004616:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004618:	f7fc ffa4 	bl	8001564 <HAL_GetTick>
 800461c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800461e:	e009      	b.n	8004634 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004620:	f7fc ffa0 	bl	8001564 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d902      	bls.n	8004634 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	73fb      	strb	r3, [r7, #15]
        break;
 8004632:	e005      	b.n	8004640 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004634:	4b37      	ldr	r3, [pc, #220]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1ef      	bne.n	8004620 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d160      	bne.n	8004708 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d111      	bne.n	8004670 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800464c:	4b31      	ldr	r3, [pc, #196]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6892      	ldr	r2, [r2, #8]
 800465c:	0211      	lsls	r1, r2, #8
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	68d2      	ldr	r2, [r2, #12]
 8004662:	0912      	lsrs	r2, r2, #4
 8004664:	0452      	lsls	r2, r2, #17
 8004666:	430a      	orrs	r2, r1
 8004668:	492a      	ldr	r1, [pc, #168]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 800466a:	4313      	orrs	r3, r2
 800466c:	610b      	str	r3, [r1, #16]
 800466e:	e027      	b.n	80046c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d112      	bne.n	800469c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004676:	4b27      	ldr	r3, [pc, #156]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800467e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6892      	ldr	r2, [r2, #8]
 8004686:	0211      	lsls	r1, r2, #8
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6912      	ldr	r2, [r2, #16]
 800468c:	0852      	lsrs	r2, r2, #1
 800468e:	3a01      	subs	r2, #1
 8004690:	0552      	lsls	r2, r2, #21
 8004692:	430a      	orrs	r2, r1
 8004694:	491f      	ldr	r1, [pc, #124]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004696:	4313      	orrs	r3, r2
 8004698:	610b      	str	r3, [r1, #16]
 800469a:	e011      	b.n	80046c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800469c:	4b1d      	ldr	r3, [pc, #116]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6892      	ldr	r2, [r2, #8]
 80046ac:	0211      	lsls	r1, r2, #8
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6952      	ldr	r2, [r2, #20]
 80046b2:	0852      	lsrs	r2, r2, #1
 80046b4:	3a01      	subs	r2, #1
 80046b6:	0652      	lsls	r2, r2, #25
 80046b8:	430a      	orrs	r2, r1
 80046ba:	4916      	ldr	r1, [pc, #88]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046c0:	4b14      	ldr	r3, [pc, #80]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a13      	ldr	r2, [pc, #76]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046cc:	f7fc ff4a 	bl	8001564 <HAL_GetTick>
 80046d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046d2:	e009      	b.n	80046e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046d4:	f7fc ff46 	bl	8001564 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d902      	bls.n	80046e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	73fb      	strb	r3, [r7, #15]
          break;
 80046e6:	e005      	b.n	80046f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046e8:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0ef      	beq.n	80046d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	4904      	ldr	r1, [pc, #16]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004704:	4313      	orrs	r3, r2
 8004706:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004708:	7bfb      	ldrb	r3, [r7, #15]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40021000 	.word	0x40021000

08004718 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004726:	4b6a      	ldr	r3, [pc, #424]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d018      	beq.n	8004764 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004732:	4b67      	ldr	r3, [pc, #412]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0203 	and.w	r2, r3, #3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d10d      	bne.n	800475e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
       ||
 8004746:	2b00      	cmp	r3, #0
 8004748:	d009      	beq.n	800475e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800474a:	4b61      	ldr	r3, [pc, #388]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
       ||
 800475a:	429a      	cmp	r2, r3
 800475c:	d047      	beq.n	80047ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	73fb      	strb	r3, [r7, #15]
 8004762:	e044      	b.n	80047ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b03      	cmp	r3, #3
 800476a:	d018      	beq.n	800479e <RCCEx_PLLSAI2_Config+0x86>
 800476c:	2b03      	cmp	r3, #3
 800476e:	d825      	bhi.n	80047bc <RCCEx_PLLSAI2_Config+0xa4>
 8004770:	2b01      	cmp	r3, #1
 8004772:	d002      	beq.n	800477a <RCCEx_PLLSAI2_Config+0x62>
 8004774:	2b02      	cmp	r3, #2
 8004776:	d009      	beq.n	800478c <RCCEx_PLLSAI2_Config+0x74>
 8004778:	e020      	b.n	80047bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800477a:	4b55      	ldr	r3, [pc, #340]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d11d      	bne.n	80047c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800478a:	e01a      	b.n	80047c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800478c:	4b50      	ldr	r3, [pc, #320]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004794:	2b00      	cmp	r3, #0
 8004796:	d116      	bne.n	80047c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800479c:	e013      	b.n	80047c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800479e:	4b4c      	ldr	r3, [pc, #304]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10f      	bne.n	80047ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047aa:	4b49      	ldr	r3, [pc, #292]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047ba:	e006      	b.n	80047ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	73fb      	strb	r3, [r7, #15]
      break;
 80047c0:	e004      	b.n	80047cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047c2:	bf00      	nop
 80047c4:	e002      	b.n	80047cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047c6:	bf00      	nop
 80047c8:	e000      	b.n	80047cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10d      	bne.n	80047ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047d2:	4b3f      	ldr	r3, [pc, #252]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6819      	ldr	r1, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	430b      	orrs	r3, r1
 80047e8:	4939      	ldr	r1, [pc, #228]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d167      	bne.n	80048c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047f4:	4b36      	ldr	r3, [pc, #216]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a35      	ldr	r2, [pc, #212]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004800:	f7fc feb0 	bl	8001564 <HAL_GetTick>
 8004804:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004806:	e009      	b.n	800481c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004808:	f7fc feac 	bl	8001564 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d902      	bls.n	800481c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	73fb      	strb	r3, [r7, #15]
        break;
 800481a:	e005      	b.n	8004828 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800481c:	4b2c      	ldr	r3, [pc, #176]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1ef      	bne.n	8004808 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004828:	7bfb      	ldrb	r3, [r7, #15]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d14a      	bne.n	80048c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d111      	bne.n	8004858 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004834:	4b26      	ldr	r3, [pc, #152]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800483c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6892      	ldr	r2, [r2, #8]
 8004844:	0211      	lsls	r1, r2, #8
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68d2      	ldr	r2, [r2, #12]
 800484a:	0912      	lsrs	r2, r2, #4
 800484c:	0452      	lsls	r2, r2, #17
 800484e:	430a      	orrs	r2, r1
 8004850:	491f      	ldr	r1, [pc, #124]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004852:	4313      	orrs	r3, r2
 8004854:	614b      	str	r3, [r1, #20]
 8004856:	e011      	b.n	800487c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004858:	4b1d      	ldr	r3, [pc, #116]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004860:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6892      	ldr	r2, [r2, #8]
 8004868:	0211      	lsls	r1, r2, #8
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6912      	ldr	r2, [r2, #16]
 800486e:	0852      	lsrs	r2, r2, #1
 8004870:	3a01      	subs	r2, #1
 8004872:	0652      	lsls	r2, r2, #25
 8004874:	430a      	orrs	r2, r1
 8004876:	4916      	ldr	r1, [pc, #88]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004878:	4313      	orrs	r3, r2
 800487a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800487c:	4b14      	ldr	r3, [pc, #80]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a13      	ldr	r2, [pc, #76]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004886:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004888:	f7fc fe6c 	bl	8001564 <HAL_GetTick>
 800488c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800488e:	e009      	b.n	80048a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004890:	f7fc fe68 	bl	8001564 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d902      	bls.n	80048a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	73fb      	strb	r3, [r7, #15]
          break;
 80048a2:	e005      	b.n	80048b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048a4:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0ef      	beq.n	8004890 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80048b6:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	4904      	ldr	r1, [pc, #16]	; (80048d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40021000 	.word	0x40021000

080048d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e040      	b.n	8004968 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fc fccc 	bl	8001294 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2224      	movs	r2, #36	; 0x24
 8004900:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0201 	bic.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fb6a 	bl	8004ff4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f8af 	bl	8004a84 <UART_SetConfig>
 8004926:	4603      	mov	r3, r0
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e01b      	b.n	8004968 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800493e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800494e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fbe9 	bl	8005138 <UART_CheckIdleState>
 8004966:	4603      	mov	r3, r0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08a      	sub	sp, #40	; 0x28
 8004974:	af02      	add	r7, sp, #8
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	4613      	mov	r3, r2
 800497e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004984:	2b20      	cmp	r3, #32
 8004986:	d178      	bne.n	8004a7a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_UART_Transmit+0x24>
 800498e:	88fb      	ldrh	r3, [r7, #6]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e071      	b.n	8004a7c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2221      	movs	r2, #33	; 0x21
 80049a4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049a6:	f7fc fddd 	bl	8001564 <HAL_GetTick>
 80049aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	88fa      	ldrh	r2, [r7, #6]
 80049b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	88fa      	ldrh	r2, [r7, #6]
 80049b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c4:	d108      	bne.n	80049d8 <HAL_UART_Transmit+0x68>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d104      	bne.n	80049d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	e003      	b.n	80049e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049dc:	2300      	movs	r3, #0
 80049de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049e0:	e030      	b.n	8004a44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2200      	movs	r2, #0
 80049ea:	2180      	movs	r1, #128	; 0x80
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 fc4b 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d004      	beq.n	8004a02 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e03c      	b.n	8004a7c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10b      	bne.n	8004a20 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	881a      	ldrh	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a14:	b292      	uxth	r2, r2
 8004a16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	3302      	adds	r3, #2
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	e008      	b.n	8004a32 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	781a      	ldrb	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	b292      	uxth	r2, r2
 8004a2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1c8      	bne.n	80049e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2200      	movs	r2, #0
 8004a58:	2140      	movs	r1, #64	; 0x40
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 fc14 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e005      	b.n	8004a7c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	e000      	b.n	8004a7c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004a7a:	2302      	movs	r3, #2
  }
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3720      	adds	r7, #32
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a88:	b08a      	sub	sp, #40	; 0x28
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	4ba4      	ldr	r3, [pc, #656]	; (8004d44 <UART_SetConfig+0x2c0>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004abc:	430b      	orrs	r3, r1
 8004abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a99      	ldr	r2, [pc, #612]	; (8004d48 <UART_SetConfig+0x2c4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d004      	beq.n	8004af0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aec:	4313      	orrs	r3, r2
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b00:	430a      	orrs	r2, r1
 8004b02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a90      	ldr	r2, [pc, #576]	; (8004d4c <UART_SetConfig+0x2c8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d126      	bne.n	8004b5c <UART_SetConfig+0xd8>
 8004b0e:	4b90      	ldr	r3, [pc, #576]	; (8004d50 <UART_SetConfig+0x2cc>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d81b      	bhi.n	8004b54 <UART_SetConfig+0xd0>
 8004b1c:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <UART_SetConfig+0xa0>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b35 	.word	0x08004b35
 8004b28:	08004b45 	.word	0x08004b45
 8004b2c:	08004b3d 	.word	0x08004b3d
 8004b30:	08004b4d 	.word	0x08004b4d
 8004b34:	2301      	movs	r3, #1
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3a:	e116      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b42:	e112      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004b44:	2304      	movs	r3, #4
 8004b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b4a:	e10e      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b52:	e10a      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004b54:	2310      	movs	r3, #16
 8004b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5a:	e106      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a7c      	ldr	r2, [pc, #496]	; (8004d54 <UART_SetConfig+0x2d0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d138      	bne.n	8004bd8 <UART_SetConfig+0x154>
 8004b66:	4b7a      	ldr	r3, [pc, #488]	; (8004d50 <UART_SetConfig+0x2cc>)
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6c:	f003 030c 	and.w	r3, r3, #12
 8004b70:	2b0c      	cmp	r3, #12
 8004b72:	d82d      	bhi.n	8004bd0 <UART_SetConfig+0x14c>
 8004b74:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <UART_SetConfig+0xf8>)
 8004b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7a:	bf00      	nop
 8004b7c:	08004bb1 	.word	0x08004bb1
 8004b80:	08004bd1 	.word	0x08004bd1
 8004b84:	08004bd1 	.word	0x08004bd1
 8004b88:	08004bd1 	.word	0x08004bd1
 8004b8c:	08004bc1 	.word	0x08004bc1
 8004b90:	08004bd1 	.word	0x08004bd1
 8004b94:	08004bd1 	.word	0x08004bd1
 8004b98:	08004bd1 	.word	0x08004bd1
 8004b9c:	08004bb9 	.word	0x08004bb9
 8004ba0:	08004bd1 	.word	0x08004bd1
 8004ba4:	08004bd1 	.word	0x08004bd1
 8004ba8:	08004bd1 	.word	0x08004bd1
 8004bac:	08004bc9 	.word	0x08004bc9
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb6:	e0d8      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bbe:	e0d4      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc6:	e0d0      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004bc8:	2308      	movs	r3, #8
 8004bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bce:	e0cc      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd6:	e0c8      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a5e      	ldr	r2, [pc, #376]	; (8004d58 <UART_SetConfig+0x2d4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d125      	bne.n	8004c2e <UART_SetConfig+0x1aa>
 8004be2:	4b5b      	ldr	r3, [pc, #364]	; (8004d50 <UART_SetConfig+0x2cc>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bec:	2b30      	cmp	r3, #48	; 0x30
 8004bee:	d016      	beq.n	8004c1e <UART_SetConfig+0x19a>
 8004bf0:	2b30      	cmp	r3, #48	; 0x30
 8004bf2:	d818      	bhi.n	8004c26 <UART_SetConfig+0x1a2>
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d00a      	beq.n	8004c0e <UART_SetConfig+0x18a>
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	d814      	bhi.n	8004c26 <UART_SetConfig+0x1a2>
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <UART_SetConfig+0x182>
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d008      	beq.n	8004c16 <UART_SetConfig+0x192>
 8004c04:	e00f      	b.n	8004c26 <UART_SetConfig+0x1a2>
 8004c06:	2300      	movs	r3, #0
 8004c08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0c:	e0ad      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c14:	e0a9      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c16:	2304      	movs	r3, #4
 8004c18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1c:	e0a5      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c1e:	2308      	movs	r3, #8
 8004c20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c24:	e0a1      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c26:	2310      	movs	r3, #16
 8004c28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2c:	e09d      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a4a      	ldr	r2, [pc, #296]	; (8004d5c <UART_SetConfig+0x2d8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d125      	bne.n	8004c84 <UART_SetConfig+0x200>
 8004c38:	4b45      	ldr	r3, [pc, #276]	; (8004d50 <UART_SetConfig+0x2cc>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c42:	2bc0      	cmp	r3, #192	; 0xc0
 8004c44:	d016      	beq.n	8004c74 <UART_SetConfig+0x1f0>
 8004c46:	2bc0      	cmp	r3, #192	; 0xc0
 8004c48:	d818      	bhi.n	8004c7c <UART_SetConfig+0x1f8>
 8004c4a:	2b80      	cmp	r3, #128	; 0x80
 8004c4c:	d00a      	beq.n	8004c64 <UART_SetConfig+0x1e0>
 8004c4e:	2b80      	cmp	r3, #128	; 0x80
 8004c50:	d814      	bhi.n	8004c7c <UART_SetConfig+0x1f8>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <UART_SetConfig+0x1d8>
 8004c56:	2b40      	cmp	r3, #64	; 0x40
 8004c58:	d008      	beq.n	8004c6c <UART_SetConfig+0x1e8>
 8004c5a:	e00f      	b.n	8004c7c <UART_SetConfig+0x1f8>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c62:	e082      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c64:	2302      	movs	r3, #2
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6a:	e07e      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c6c:	2304      	movs	r3, #4
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c72:	e07a      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c74:	2308      	movs	r3, #8
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7a:	e076      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c7c:	2310      	movs	r3, #16
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c82:	e072      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a35      	ldr	r2, [pc, #212]	; (8004d60 <UART_SetConfig+0x2dc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d12a      	bne.n	8004ce4 <UART_SetConfig+0x260>
 8004c8e:	4b30      	ldr	r3, [pc, #192]	; (8004d50 <UART_SetConfig+0x2cc>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c9c:	d01a      	beq.n	8004cd4 <UART_SetConfig+0x250>
 8004c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ca2:	d81b      	bhi.n	8004cdc <UART_SetConfig+0x258>
 8004ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca8:	d00c      	beq.n	8004cc4 <UART_SetConfig+0x240>
 8004caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cae:	d815      	bhi.n	8004cdc <UART_SetConfig+0x258>
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <UART_SetConfig+0x238>
 8004cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cb8:	d008      	beq.n	8004ccc <UART_SetConfig+0x248>
 8004cba:	e00f      	b.n	8004cdc <UART_SetConfig+0x258>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc2:	e052      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cca:	e04e      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004ccc:	2304      	movs	r3, #4
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd2:	e04a      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cda:	e046      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004cdc:	2310      	movs	r3, #16
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce2:	e042      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <UART_SetConfig+0x2c4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d13a      	bne.n	8004d64 <UART_SetConfig+0x2e0>
 8004cee:	4b18      	ldr	r3, [pc, #96]	; (8004d50 <UART_SetConfig+0x2cc>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cfc:	d01a      	beq.n	8004d34 <UART_SetConfig+0x2b0>
 8004cfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d02:	d81b      	bhi.n	8004d3c <UART_SetConfig+0x2b8>
 8004d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d08:	d00c      	beq.n	8004d24 <UART_SetConfig+0x2a0>
 8004d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d0e:	d815      	bhi.n	8004d3c <UART_SetConfig+0x2b8>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <UART_SetConfig+0x298>
 8004d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d18:	d008      	beq.n	8004d2c <UART_SetConfig+0x2a8>
 8004d1a:	e00f      	b.n	8004d3c <UART_SetConfig+0x2b8>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d22:	e022      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004d24:	2302      	movs	r3, #2
 8004d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2a:	e01e      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004d2c:	2304      	movs	r3, #4
 8004d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d32:	e01a      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004d34:	2308      	movs	r3, #8
 8004d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3a:	e016      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d42:	e012      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004d44:	efff69f3 	.word	0xefff69f3
 8004d48:	40008000 	.word	0x40008000
 8004d4c:	40013800 	.word	0x40013800
 8004d50:	40021000 	.word	0x40021000
 8004d54:	40004400 	.word	0x40004400
 8004d58:	40004800 	.word	0x40004800
 8004d5c:	40004c00 	.word	0x40004c00
 8004d60:	40005000 	.word	0x40005000
 8004d64:	2310      	movs	r3, #16
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a9f      	ldr	r2, [pc, #636]	; (8004fec <UART_SetConfig+0x568>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d17a      	bne.n	8004e6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d824      	bhi.n	8004dc6 <UART_SetConfig+0x342>
 8004d7c:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <UART_SetConfig+0x300>)
 8004d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d82:	bf00      	nop
 8004d84:	08004da9 	.word	0x08004da9
 8004d88:	08004dc7 	.word	0x08004dc7
 8004d8c:	08004db1 	.word	0x08004db1
 8004d90:	08004dc7 	.word	0x08004dc7
 8004d94:	08004db7 	.word	0x08004db7
 8004d98:	08004dc7 	.word	0x08004dc7
 8004d9c:	08004dc7 	.word	0x08004dc7
 8004da0:	08004dc7 	.word	0x08004dc7
 8004da4:	08004dbf 	.word	0x08004dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da8:	f7ff f84c 	bl	8003e44 <HAL_RCC_GetPCLK1Freq>
 8004dac:	61f8      	str	r0, [r7, #28]
        break;
 8004dae:	e010      	b.n	8004dd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db0:	4b8f      	ldr	r3, [pc, #572]	; (8004ff0 <UART_SetConfig+0x56c>)
 8004db2:	61fb      	str	r3, [r7, #28]
        break;
 8004db4:	e00d      	b.n	8004dd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004db6:	f7fe ffad 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8004dba:	61f8      	str	r0, [r7, #28]
        break;
 8004dbc:	e009      	b.n	8004dd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dc2:	61fb      	str	r3, [r7, #28]
        break;
 8004dc4:	e005      	b.n	8004dd2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004dd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 80fb 	beq.w	8004fd0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	4613      	mov	r3, r2
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	4413      	add	r3, r2
 8004de4:	69fa      	ldr	r2, [r7, #28]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d305      	bcc.n	8004df6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d903      	bls.n	8004dfe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004dfc:	e0e8      	b.n	8004fd0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	2200      	movs	r2, #0
 8004e02:	461c      	mov	r4, r3
 8004e04:	4615      	mov	r5, r2
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	022b      	lsls	r3, r5, #8
 8004e10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e14:	0222      	lsls	r2, r4, #8
 8004e16:	68f9      	ldr	r1, [r7, #12]
 8004e18:	6849      	ldr	r1, [r1, #4]
 8004e1a:	0849      	lsrs	r1, r1, #1
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	4688      	mov	r8, r1
 8004e20:	4681      	mov	r9, r0
 8004e22:	eb12 0a08 	adds.w	sl, r2, r8
 8004e26:	eb43 0b09 	adc.w	fp, r3, r9
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	603b      	str	r3, [r7, #0]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e38:	4650      	mov	r0, sl
 8004e3a:	4659      	mov	r1, fp
 8004e3c:	f7fb fe0e 	bl	8000a5c <__aeabi_uldivmod>
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	4613      	mov	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e4e:	d308      	bcc.n	8004e62 <UART_SetConfig+0x3de>
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e56:	d204      	bcs.n	8004e62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	60da      	str	r2, [r3, #12]
 8004e60:	e0b6      	b.n	8004fd0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e68:	e0b2      	b.n	8004fd0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e72:	d15e      	bne.n	8004f32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004e74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d828      	bhi.n	8004ece <UART_SetConfig+0x44a>
 8004e7c:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <UART_SetConfig+0x400>)
 8004e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e82:	bf00      	nop
 8004e84:	08004ea9 	.word	0x08004ea9
 8004e88:	08004eb1 	.word	0x08004eb1
 8004e8c:	08004eb9 	.word	0x08004eb9
 8004e90:	08004ecf 	.word	0x08004ecf
 8004e94:	08004ebf 	.word	0x08004ebf
 8004e98:	08004ecf 	.word	0x08004ecf
 8004e9c:	08004ecf 	.word	0x08004ecf
 8004ea0:	08004ecf 	.word	0x08004ecf
 8004ea4:	08004ec7 	.word	0x08004ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea8:	f7fe ffcc 	bl	8003e44 <HAL_RCC_GetPCLK1Freq>
 8004eac:	61f8      	str	r0, [r7, #28]
        break;
 8004eae:	e014      	b.n	8004eda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eb0:	f7fe ffde 	bl	8003e70 <HAL_RCC_GetPCLK2Freq>
 8004eb4:	61f8      	str	r0, [r7, #28]
        break;
 8004eb6:	e010      	b.n	8004eda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eb8:	4b4d      	ldr	r3, [pc, #308]	; (8004ff0 <UART_SetConfig+0x56c>)
 8004eba:	61fb      	str	r3, [r7, #28]
        break;
 8004ebc:	e00d      	b.n	8004eda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ebe:	f7fe ff29 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8004ec2:	61f8      	str	r0, [r7, #28]
        break;
 8004ec4:	e009      	b.n	8004eda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eca:	61fb      	str	r3, [r7, #28]
        break;
 8004ecc:	e005      	b.n	8004eda <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ed8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d077      	beq.n	8004fd0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	005a      	lsls	r2, r3, #1
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	085b      	lsrs	r3, r3, #1
 8004eea:	441a      	add	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b0f      	cmp	r3, #15
 8004efa:	d916      	bls.n	8004f2a <UART_SetConfig+0x4a6>
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f02:	d212      	bcs.n	8004f2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	f023 030f 	bic.w	r3, r3, #15
 8004f0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	085b      	lsrs	r3, r3, #1
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	8afb      	ldrh	r3, [r7, #22]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	8afa      	ldrh	r2, [r7, #22]
 8004f26:	60da      	str	r2, [r3, #12]
 8004f28:	e052      	b.n	8004fd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f30:	e04e      	b.n	8004fd0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d827      	bhi.n	8004f8a <UART_SetConfig+0x506>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <UART_SetConfig+0x4bc>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f65 	.word	0x08004f65
 8004f44:	08004f6d 	.word	0x08004f6d
 8004f48:	08004f75 	.word	0x08004f75
 8004f4c:	08004f8b 	.word	0x08004f8b
 8004f50:	08004f7b 	.word	0x08004f7b
 8004f54:	08004f8b 	.word	0x08004f8b
 8004f58:	08004f8b 	.word	0x08004f8b
 8004f5c:	08004f8b 	.word	0x08004f8b
 8004f60:	08004f83 	.word	0x08004f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f64:	f7fe ff6e 	bl	8003e44 <HAL_RCC_GetPCLK1Freq>
 8004f68:	61f8      	str	r0, [r7, #28]
        break;
 8004f6a:	e014      	b.n	8004f96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f6c:	f7fe ff80 	bl	8003e70 <HAL_RCC_GetPCLK2Freq>
 8004f70:	61f8      	str	r0, [r7, #28]
        break;
 8004f72:	e010      	b.n	8004f96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f74:	4b1e      	ldr	r3, [pc, #120]	; (8004ff0 <UART_SetConfig+0x56c>)
 8004f76:	61fb      	str	r3, [r7, #28]
        break;
 8004f78:	e00d      	b.n	8004f96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f7a:	f7fe fecb 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8004f7e:	61f8      	str	r0, [r7, #28]
        break;
 8004f80:	e009      	b.n	8004f96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f86:	61fb      	str	r3, [r7, #28]
        break;
 8004f88:	e005      	b.n	8004f96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f94:	bf00      	nop
    }

    if (pclk != 0U)
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d019      	beq.n	8004fd0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	085a      	lsrs	r2, r3, #1
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	441a      	add	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	2b0f      	cmp	r3, #15
 8004fb4:	d909      	bls.n	8004fca <UART_SetConfig+0x546>
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fbc:	d205      	bcs.n	8004fca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60da      	str	r2, [r3, #12]
 8004fc8:	e002      	b.n	8004fd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004fdc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3728      	adds	r7, #40	; 0x28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fea:	bf00      	nop
 8004fec:	40008000 	.word	0x40008000
 8004ff0:	00f42400 	.word	0x00f42400

08004ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	f003 0308 	and.w	r3, r3, #8
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01a      	beq.n	800510a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f2:	d10a      	bne.n	800510a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	605a      	str	r2, [r3, #4]
  }
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b098      	sub	sp, #96	; 0x60
 800513c:	af02      	add	r7, sp, #8
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005148:	f7fc fa0c 	bl	8001564 <HAL_GetTick>
 800514c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b08      	cmp	r3, #8
 800515a:	d12e      	bne.n	80051ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800515c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005164:	2200      	movs	r2, #0
 8005166:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f88c 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d021      	beq.n	80051ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800518a:	653b      	str	r3, [r7, #80]	; 0x50
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005194:	647b      	str	r3, [r7, #68]	; 0x44
 8005196:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800519a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e6      	bne.n	8005176 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e062      	b.n	8005280 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d149      	bne.n	800525c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051d0:	2200      	movs	r2, #0
 80051d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f856 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d03c      	beq.n	800525c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	623b      	str	r3, [r7, #32]
   return(result);
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	461a      	mov	r2, r3
 80051fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005200:	633b      	str	r3, [r7, #48]	; 0x30
 8005202:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005208:	e841 2300 	strex	r3, r2, [r1]
 800520c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e6      	bne.n	80051e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3308      	adds	r3, #8
 800521a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	e853 3f00 	ldrex	r3, [r3]
 8005222:	60fb      	str	r3, [r7, #12]
   return(result);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0301 	bic.w	r3, r3, #1
 800522a:	64bb      	str	r3, [r7, #72]	; 0x48
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3308      	adds	r3, #8
 8005232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005234:	61fa      	str	r2, [r7, #28]
 8005236:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	69b9      	ldr	r1, [r7, #24]
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	e841 2300 	strex	r3, r2, [r1]
 8005240:	617b      	str	r3, [r7, #20]
   return(result);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e5      	bne.n	8005214 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e011      	b.n	8005280 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3758      	adds	r7, #88	; 0x58
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	4613      	mov	r3, r2
 8005296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005298:	e049      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d045      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a2:	f7fc f95f 	bl	8001564 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d302      	bcc.n	80052b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e048      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d031      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d110      	bne.n	80052fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2208      	movs	r2, #8
 80052de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f838 	bl	8005356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2208      	movs	r2, #8
 80052ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e029      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005308:	d111      	bne.n	800532e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f81e 	bl	8005356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e00f      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4013      	ands	r3, r2
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	bf0c      	ite	eq
 800533e:	2301      	moveq	r3, #1
 8005340:	2300      	movne	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	429a      	cmp	r2, r3
 800534a:	d0a6      	beq.n	800529a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005356:	b480      	push	{r7}
 8005358:	b095      	sub	sp, #84	; 0x54
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800537c:	643b      	str	r3, [r7, #64]	; 0x40
 800537e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005382:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e6      	bne.n	800535e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3308      	adds	r3, #8
 8005396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	61fb      	str	r3, [r7, #28]
   return(result);
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f023 0301 	bic.w	r3, r3, #1
 80053a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3308      	adds	r3, #8
 80053ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e5      	bne.n	8005390 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d118      	bne.n	80053fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f023 0310 	bic.w	r3, r3, #16
 80053e0:	647b      	str	r3, [r7, #68]	; 0x44
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ea:	61bb      	str	r3, [r7, #24]
 80053ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6979      	ldr	r1, [r7, #20]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	613b      	str	r3, [r7, #16]
   return(result);
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e6      	bne.n	80053cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2220      	movs	r2, #32
 8005402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005412:	bf00      	nop
 8005414:	3754      	adds	r7, #84	; 0x54
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
	...

08005420 <siprintf>:
 8005420:	b40e      	push	{r1, r2, r3}
 8005422:	b500      	push	{lr}
 8005424:	b09c      	sub	sp, #112	; 0x70
 8005426:	ab1d      	add	r3, sp, #116	; 0x74
 8005428:	9002      	str	r0, [sp, #8]
 800542a:	9006      	str	r0, [sp, #24]
 800542c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005430:	4809      	ldr	r0, [pc, #36]	; (8005458 <siprintf+0x38>)
 8005432:	9107      	str	r1, [sp, #28]
 8005434:	9104      	str	r1, [sp, #16]
 8005436:	4909      	ldr	r1, [pc, #36]	; (800545c <siprintf+0x3c>)
 8005438:	f853 2b04 	ldr.w	r2, [r3], #4
 800543c:	9105      	str	r1, [sp, #20]
 800543e:	6800      	ldr	r0, [r0, #0]
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	a902      	add	r1, sp, #8
 8005444:	f000 f992 	bl	800576c <_svfiprintf_r>
 8005448:	9b02      	ldr	r3, [sp, #8]
 800544a:	2200      	movs	r2, #0
 800544c:	701a      	strb	r2, [r3, #0]
 800544e:	b01c      	add	sp, #112	; 0x70
 8005450:	f85d eb04 	ldr.w	lr, [sp], #4
 8005454:	b003      	add	sp, #12
 8005456:	4770      	bx	lr
 8005458:	20000058 	.word	0x20000058
 800545c:	ffff0208 	.word	0xffff0208

08005460 <memset>:
 8005460:	4402      	add	r2, r0
 8005462:	4603      	mov	r3, r0
 8005464:	4293      	cmp	r3, r2
 8005466:	d100      	bne.n	800546a <memset+0xa>
 8005468:	4770      	bx	lr
 800546a:	f803 1b01 	strb.w	r1, [r3], #1
 800546e:	e7f9      	b.n	8005464 <memset+0x4>

08005470 <__errno>:
 8005470:	4b01      	ldr	r3, [pc, #4]	; (8005478 <__errno+0x8>)
 8005472:	6818      	ldr	r0, [r3, #0]
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	20000058 	.word	0x20000058

0800547c <__libc_init_array>:
 800547c:	b570      	push	{r4, r5, r6, lr}
 800547e:	4d0d      	ldr	r5, [pc, #52]	; (80054b4 <__libc_init_array+0x38>)
 8005480:	4c0d      	ldr	r4, [pc, #52]	; (80054b8 <__libc_init_array+0x3c>)
 8005482:	1b64      	subs	r4, r4, r5
 8005484:	10a4      	asrs	r4, r4, #2
 8005486:	2600      	movs	r6, #0
 8005488:	42a6      	cmp	r6, r4
 800548a:	d109      	bne.n	80054a0 <__libc_init_array+0x24>
 800548c:	4d0b      	ldr	r5, [pc, #44]	; (80054bc <__libc_init_array+0x40>)
 800548e:	4c0c      	ldr	r4, [pc, #48]	; (80054c0 <__libc_init_array+0x44>)
 8005490:	f000 fc6a 	bl	8005d68 <_init>
 8005494:	1b64      	subs	r4, r4, r5
 8005496:	10a4      	asrs	r4, r4, #2
 8005498:	2600      	movs	r6, #0
 800549a:	42a6      	cmp	r6, r4
 800549c:	d105      	bne.n	80054aa <__libc_init_array+0x2e>
 800549e:	bd70      	pop	{r4, r5, r6, pc}
 80054a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a4:	4798      	blx	r3
 80054a6:	3601      	adds	r6, #1
 80054a8:	e7ee      	b.n	8005488 <__libc_init_array+0xc>
 80054aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ae:	4798      	blx	r3
 80054b0:	3601      	adds	r6, #1
 80054b2:	e7f2      	b.n	800549a <__libc_init_array+0x1e>
 80054b4:	08005e10 	.word	0x08005e10
 80054b8:	08005e10 	.word	0x08005e10
 80054bc:	08005e10 	.word	0x08005e10
 80054c0:	08005e14 	.word	0x08005e14

080054c4 <__retarget_lock_acquire_recursive>:
 80054c4:	4770      	bx	lr

080054c6 <__retarget_lock_release_recursive>:
 80054c6:	4770      	bx	lr

080054c8 <_free_r>:
 80054c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054ca:	2900      	cmp	r1, #0
 80054cc:	d044      	beq.n	8005558 <_free_r+0x90>
 80054ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d2:	9001      	str	r0, [sp, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f1a1 0404 	sub.w	r4, r1, #4
 80054da:	bfb8      	it	lt
 80054dc:	18e4      	addlt	r4, r4, r3
 80054de:	f000 f8df 	bl	80056a0 <__malloc_lock>
 80054e2:	4a1e      	ldr	r2, [pc, #120]	; (800555c <_free_r+0x94>)
 80054e4:	9801      	ldr	r0, [sp, #4]
 80054e6:	6813      	ldr	r3, [r2, #0]
 80054e8:	b933      	cbnz	r3, 80054f8 <_free_r+0x30>
 80054ea:	6063      	str	r3, [r4, #4]
 80054ec:	6014      	str	r4, [r2, #0]
 80054ee:	b003      	add	sp, #12
 80054f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054f4:	f000 b8da 	b.w	80056ac <__malloc_unlock>
 80054f8:	42a3      	cmp	r3, r4
 80054fa:	d908      	bls.n	800550e <_free_r+0x46>
 80054fc:	6825      	ldr	r5, [r4, #0]
 80054fe:	1961      	adds	r1, r4, r5
 8005500:	428b      	cmp	r3, r1
 8005502:	bf01      	itttt	eq
 8005504:	6819      	ldreq	r1, [r3, #0]
 8005506:	685b      	ldreq	r3, [r3, #4]
 8005508:	1949      	addeq	r1, r1, r5
 800550a:	6021      	streq	r1, [r4, #0]
 800550c:	e7ed      	b.n	80054ea <_free_r+0x22>
 800550e:	461a      	mov	r2, r3
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	b10b      	cbz	r3, 8005518 <_free_r+0x50>
 8005514:	42a3      	cmp	r3, r4
 8005516:	d9fa      	bls.n	800550e <_free_r+0x46>
 8005518:	6811      	ldr	r1, [r2, #0]
 800551a:	1855      	adds	r5, r2, r1
 800551c:	42a5      	cmp	r5, r4
 800551e:	d10b      	bne.n	8005538 <_free_r+0x70>
 8005520:	6824      	ldr	r4, [r4, #0]
 8005522:	4421      	add	r1, r4
 8005524:	1854      	adds	r4, r2, r1
 8005526:	42a3      	cmp	r3, r4
 8005528:	6011      	str	r1, [r2, #0]
 800552a:	d1e0      	bne.n	80054ee <_free_r+0x26>
 800552c:	681c      	ldr	r4, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	6053      	str	r3, [r2, #4]
 8005532:	440c      	add	r4, r1
 8005534:	6014      	str	r4, [r2, #0]
 8005536:	e7da      	b.n	80054ee <_free_r+0x26>
 8005538:	d902      	bls.n	8005540 <_free_r+0x78>
 800553a:	230c      	movs	r3, #12
 800553c:	6003      	str	r3, [r0, #0]
 800553e:	e7d6      	b.n	80054ee <_free_r+0x26>
 8005540:	6825      	ldr	r5, [r4, #0]
 8005542:	1961      	adds	r1, r4, r5
 8005544:	428b      	cmp	r3, r1
 8005546:	bf04      	itt	eq
 8005548:	6819      	ldreq	r1, [r3, #0]
 800554a:	685b      	ldreq	r3, [r3, #4]
 800554c:	6063      	str	r3, [r4, #4]
 800554e:	bf04      	itt	eq
 8005550:	1949      	addeq	r1, r1, r5
 8005552:	6021      	streq	r1, [r4, #0]
 8005554:	6054      	str	r4, [r2, #4]
 8005556:	e7ca      	b.n	80054ee <_free_r+0x26>
 8005558:	b003      	add	sp, #12
 800555a:	bd30      	pop	{r4, r5, pc}
 800555c:	200002ac 	.word	0x200002ac

08005560 <sbrk_aligned>:
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	4e0e      	ldr	r6, [pc, #56]	; (800559c <sbrk_aligned+0x3c>)
 8005564:	460c      	mov	r4, r1
 8005566:	6831      	ldr	r1, [r6, #0]
 8005568:	4605      	mov	r5, r0
 800556a:	b911      	cbnz	r1, 8005572 <sbrk_aligned+0x12>
 800556c:	f000 fba6 	bl	8005cbc <_sbrk_r>
 8005570:	6030      	str	r0, [r6, #0]
 8005572:	4621      	mov	r1, r4
 8005574:	4628      	mov	r0, r5
 8005576:	f000 fba1 	bl	8005cbc <_sbrk_r>
 800557a:	1c43      	adds	r3, r0, #1
 800557c:	d00a      	beq.n	8005594 <sbrk_aligned+0x34>
 800557e:	1cc4      	adds	r4, r0, #3
 8005580:	f024 0403 	bic.w	r4, r4, #3
 8005584:	42a0      	cmp	r0, r4
 8005586:	d007      	beq.n	8005598 <sbrk_aligned+0x38>
 8005588:	1a21      	subs	r1, r4, r0
 800558a:	4628      	mov	r0, r5
 800558c:	f000 fb96 	bl	8005cbc <_sbrk_r>
 8005590:	3001      	adds	r0, #1
 8005592:	d101      	bne.n	8005598 <sbrk_aligned+0x38>
 8005594:	f04f 34ff 	mov.w	r4, #4294967295
 8005598:	4620      	mov	r0, r4
 800559a:	bd70      	pop	{r4, r5, r6, pc}
 800559c:	200002b0 	.word	0x200002b0

080055a0 <_malloc_r>:
 80055a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055a4:	1ccd      	adds	r5, r1, #3
 80055a6:	f025 0503 	bic.w	r5, r5, #3
 80055aa:	3508      	adds	r5, #8
 80055ac:	2d0c      	cmp	r5, #12
 80055ae:	bf38      	it	cc
 80055b0:	250c      	movcc	r5, #12
 80055b2:	2d00      	cmp	r5, #0
 80055b4:	4607      	mov	r7, r0
 80055b6:	db01      	blt.n	80055bc <_malloc_r+0x1c>
 80055b8:	42a9      	cmp	r1, r5
 80055ba:	d905      	bls.n	80055c8 <_malloc_r+0x28>
 80055bc:	230c      	movs	r3, #12
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	2600      	movs	r6, #0
 80055c2:	4630      	mov	r0, r6
 80055c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800569c <_malloc_r+0xfc>
 80055cc:	f000 f868 	bl	80056a0 <__malloc_lock>
 80055d0:	f8d8 3000 	ldr.w	r3, [r8]
 80055d4:	461c      	mov	r4, r3
 80055d6:	bb5c      	cbnz	r4, 8005630 <_malloc_r+0x90>
 80055d8:	4629      	mov	r1, r5
 80055da:	4638      	mov	r0, r7
 80055dc:	f7ff ffc0 	bl	8005560 <sbrk_aligned>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	4604      	mov	r4, r0
 80055e4:	d155      	bne.n	8005692 <_malloc_r+0xf2>
 80055e6:	f8d8 4000 	ldr.w	r4, [r8]
 80055ea:	4626      	mov	r6, r4
 80055ec:	2e00      	cmp	r6, #0
 80055ee:	d145      	bne.n	800567c <_malloc_r+0xdc>
 80055f0:	2c00      	cmp	r4, #0
 80055f2:	d048      	beq.n	8005686 <_malloc_r+0xe6>
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	4631      	mov	r1, r6
 80055f8:	4638      	mov	r0, r7
 80055fa:	eb04 0903 	add.w	r9, r4, r3
 80055fe:	f000 fb5d 	bl	8005cbc <_sbrk_r>
 8005602:	4581      	cmp	r9, r0
 8005604:	d13f      	bne.n	8005686 <_malloc_r+0xe6>
 8005606:	6821      	ldr	r1, [r4, #0]
 8005608:	1a6d      	subs	r5, r5, r1
 800560a:	4629      	mov	r1, r5
 800560c:	4638      	mov	r0, r7
 800560e:	f7ff ffa7 	bl	8005560 <sbrk_aligned>
 8005612:	3001      	adds	r0, #1
 8005614:	d037      	beq.n	8005686 <_malloc_r+0xe6>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	442b      	add	r3, r5
 800561a:	6023      	str	r3, [r4, #0]
 800561c:	f8d8 3000 	ldr.w	r3, [r8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d038      	beq.n	8005696 <_malloc_r+0xf6>
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	42a2      	cmp	r2, r4
 8005628:	d12b      	bne.n	8005682 <_malloc_r+0xe2>
 800562a:	2200      	movs	r2, #0
 800562c:	605a      	str	r2, [r3, #4]
 800562e:	e00f      	b.n	8005650 <_malloc_r+0xb0>
 8005630:	6822      	ldr	r2, [r4, #0]
 8005632:	1b52      	subs	r2, r2, r5
 8005634:	d41f      	bmi.n	8005676 <_malloc_r+0xd6>
 8005636:	2a0b      	cmp	r2, #11
 8005638:	d917      	bls.n	800566a <_malloc_r+0xca>
 800563a:	1961      	adds	r1, r4, r5
 800563c:	42a3      	cmp	r3, r4
 800563e:	6025      	str	r5, [r4, #0]
 8005640:	bf18      	it	ne
 8005642:	6059      	strne	r1, [r3, #4]
 8005644:	6863      	ldr	r3, [r4, #4]
 8005646:	bf08      	it	eq
 8005648:	f8c8 1000 	streq.w	r1, [r8]
 800564c:	5162      	str	r2, [r4, r5]
 800564e:	604b      	str	r3, [r1, #4]
 8005650:	4638      	mov	r0, r7
 8005652:	f104 060b 	add.w	r6, r4, #11
 8005656:	f000 f829 	bl	80056ac <__malloc_unlock>
 800565a:	f026 0607 	bic.w	r6, r6, #7
 800565e:	1d23      	adds	r3, r4, #4
 8005660:	1af2      	subs	r2, r6, r3
 8005662:	d0ae      	beq.n	80055c2 <_malloc_r+0x22>
 8005664:	1b9b      	subs	r3, r3, r6
 8005666:	50a3      	str	r3, [r4, r2]
 8005668:	e7ab      	b.n	80055c2 <_malloc_r+0x22>
 800566a:	42a3      	cmp	r3, r4
 800566c:	6862      	ldr	r2, [r4, #4]
 800566e:	d1dd      	bne.n	800562c <_malloc_r+0x8c>
 8005670:	f8c8 2000 	str.w	r2, [r8]
 8005674:	e7ec      	b.n	8005650 <_malloc_r+0xb0>
 8005676:	4623      	mov	r3, r4
 8005678:	6864      	ldr	r4, [r4, #4]
 800567a:	e7ac      	b.n	80055d6 <_malloc_r+0x36>
 800567c:	4634      	mov	r4, r6
 800567e:	6876      	ldr	r6, [r6, #4]
 8005680:	e7b4      	b.n	80055ec <_malloc_r+0x4c>
 8005682:	4613      	mov	r3, r2
 8005684:	e7cc      	b.n	8005620 <_malloc_r+0x80>
 8005686:	230c      	movs	r3, #12
 8005688:	603b      	str	r3, [r7, #0]
 800568a:	4638      	mov	r0, r7
 800568c:	f000 f80e 	bl	80056ac <__malloc_unlock>
 8005690:	e797      	b.n	80055c2 <_malloc_r+0x22>
 8005692:	6025      	str	r5, [r4, #0]
 8005694:	e7dc      	b.n	8005650 <_malloc_r+0xb0>
 8005696:	605b      	str	r3, [r3, #4]
 8005698:	deff      	udf	#255	; 0xff
 800569a:	bf00      	nop
 800569c:	200002ac 	.word	0x200002ac

080056a0 <__malloc_lock>:
 80056a0:	4801      	ldr	r0, [pc, #4]	; (80056a8 <__malloc_lock+0x8>)
 80056a2:	f7ff bf0f 	b.w	80054c4 <__retarget_lock_acquire_recursive>
 80056a6:	bf00      	nop
 80056a8:	200002a8 	.word	0x200002a8

080056ac <__malloc_unlock>:
 80056ac:	4801      	ldr	r0, [pc, #4]	; (80056b4 <__malloc_unlock+0x8>)
 80056ae:	f7ff bf0a 	b.w	80054c6 <__retarget_lock_release_recursive>
 80056b2:	bf00      	nop
 80056b4:	200002a8 	.word	0x200002a8

080056b8 <__ssputs_r>:
 80056b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056bc:	688e      	ldr	r6, [r1, #8]
 80056be:	461f      	mov	r7, r3
 80056c0:	42be      	cmp	r6, r7
 80056c2:	680b      	ldr	r3, [r1, #0]
 80056c4:	4682      	mov	sl, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	4690      	mov	r8, r2
 80056ca:	d82c      	bhi.n	8005726 <__ssputs_r+0x6e>
 80056cc:	898a      	ldrh	r2, [r1, #12]
 80056ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056d2:	d026      	beq.n	8005722 <__ssputs_r+0x6a>
 80056d4:	6965      	ldr	r5, [r4, #20]
 80056d6:	6909      	ldr	r1, [r1, #16]
 80056d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056dc:	eba3 0901 	sub.w	r9, r3, r1
 80056e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056e4:	1c7b      	adds	r3, r7, #1
 80056e6:	444b      	add	r3, r9
 80056e8:	106d      	asrs	r5, r5, #1
 80056ea:	429d      	cmp	r5, r3
 80056ec:	bf38      	it	cc
 80056ee:	461d      	movcc	r5, r3
 80056f0:	0553      	lsls	r3, r2, #21
 80056f2:	d527      	bpl.n	8005744 <__ssputs_r+0x8c>
 80056f4:	4629      	mov	r1, r5
 80056f6:	f7ff ff53 	bl	80055a0 <_malloc_r>
 80056fa:	4606      	mov	r6, r0
 80056fc:	b360      	cbz	r0, 8005758 <__ssputs_r+0xa0>
 80056fe:	6921      	ldr	r1, [r4, #16]
 8005700:	464a      	mov	r2, r9
 8005702:	f000 faeb 	bl	8005cdc <memcpy>
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800570c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005710:	81a3      	strh	r3, [r4, #12]
 8005712:	6126      	str	r6, [r4, #16]
 8005714:	6165      	str	r5, [r4, #20]
 8005716:	444e      	add	r6, r9
 8005718:	eba5 0509 	sub.w	r5, r5, r9
 800571c:	6026      	str	r6, [r4, #0]
 800571e:	60a5      	str	r5, [r4, #8]
 8005720:	463e      	mov	r6, r7
 8005722:	42be      	cmp	r6, r7
 8005724:	d900      	bls.n	8005728 <__ssputs_r+0x70>
 8005726:	463e      	mov	r6, r7
 8005728:	6820      	ldr	r0, [r4, #0]
 800572a:	4632      	mov	r2, r6
 800572c:	4641      	mov	r1, r8
 800572e:	f000 faab 	bl	8005c88 <memmove>
 8005732:	68a3      	ldr	r3, [r4, #8]
 8005734:	1b9b      	subs	r3, r3, r6
 8005736:	60a3      	str	r3, [r4, #8]
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	4433      	add	r3, r6
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	2000      	movs	r0, #0
 8005740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005744:	462a      	mov	r2, r5
 8005746:	f000 fad7 	bl	8005cf8 <_realloc_r>
 800574a:	4606      	mov	r6, r0
 800574c:	2800      	cmp	r0, #0
 800574e:	d1e0      	bne.n	8005712 <__ssputs_r+0x5a>
 8005750:	6921      	ldr	r1, [r4, #16]
 8005752:	4650      	mov	r0, sl
 8005754:	f7ff feb8 	bl	80054c8 <_free_r>
 8005758:	230c      	movs	r3, #12
 800575a:	f8ca 3000 	str.w	r3, [sl]
 800575e:	89a3      	ldrh	r3, [r4, #12]
 8005760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005764:	81a3      	strh	r3, [r4, #12]
 8005766:	f04f 30ff 	mov.w	r0, #4294967295
 800576a:	e7e9      	b.n	8005740 <__ssputs_r+0x88>

0800576c <_svfiprintf_r>:
 800576c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005770:	4698      	mov	r8, r3
 8005772:	898b      	ldrh	r3, [r1, #12]
 8005774:	061b      	lsls	r3, r3, #24
 8005776:	b09d      	sub	sp, #116	; 0x74
 8005778:	4607      	mov	r7, r0
 800577a:	460d      	mov	r5, r1
 800577c:	4614      	mov	r4, r2
 800577e:	d50e      	bpl.n	800579e <_svfiprintf_r+0x32>
 8005780:	690b      	ldr	r3, [r1, #16]
 8005782:	b963      	cbnz	r3, 800579e <_svfiprintf_r+0x32>
 8005784:	2140      	movs	r1, #64	; 0x40
 8005786:	f7ff ff0b 	bl	80055a0 <_malloc_r>
 800578a:	6028      	str	r0, [r5, #0]
 800578c:	6128      	str	r0, [r5, #16]
 800578e:	b920      	cbnz	r0, 800579a <_svfiprintf_r+0x2e>
 8005790:	230c      	movs	r3, #12
 8005792:	603b      	str	r3, [r7, #0]
 8005794:	f04f 30ff 	mov.w	r0, #4294967295
 8005798:	e0d0      	b.n	800593c <_svfiprintf_r+0x1d0>
 800579a:	2340      	movs	r3, #64	; 0x40
 800579c:	616b      	str	r3, [r5, #20]
 800579e:	2300      	movs	r3, #0
 80057a0:	9309      	str	r3, [sp, #36]	; 0x24
 80057a2:	2320      	movs	r3, #32
 80057a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80057ac:	2330      	movs	r3, #48	; 0x30
 80057ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005954 <_svfiprintf_r+0x1e8>
 80057b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057b6:	f04f 0901 	mov.w	r9, #1
 80057ba:	4623      	mov	r3, r4
 80057bc:	469a      	mov	sl, r3
 80057be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057c2:	b10a      	cbz	r2, 80057c8 <_svfiprintf_r+0x5c>
 80057c4:	2a25      	cmp	r2, #37	; 0x25
 80057c6:	d1f9      	bne.n	80057bc <_svfiprintf_r+0x50>
 80057c8:	ebba 0b04 	subs.w	fp, sl, r4
 80057cc:	d00b      	beq.n	80057e6 <_svfiprintf_r+0x7a>
 80057ce:	465b      	mov	r3, fp
 80057d0:	4622      	mov	r2, r4
 80057d2:	4629      	mov	r1, r5
 80057d4:	4638      	mov	r0, r7
 80057d6:	f7ff ff6f 	bl	80056b8 <__ssputs_r>
 80057da:	3001      	adds	r0, #1
 80057dc:	f000 80a9 	beq.w	8005932 <_svfiprintf_r+0x1c6>
 80057e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057e2:	445a      	add	r2, fp
 80057e4:	9209      	str	r2, [sp, #36]	; 0x24
 80057e6:	f89a 3000 	ldrb.w	r3, [sl]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 80a1 	beq.w	8005932 <_svfiprintf_r+0x1c6>
 80057f0:	2300      	movs	r3, #0
 80057f2:	f04f 32ff 	mov.w	r2, #4294967295
 80057f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057fa:	f10a 0a01 	add.w	sl, sl, #1
 80057fe:	9304      	str	r3, [sp, #16]
 8005800:	9307      	str	r3, [sp, #28]
 8005802:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005806:	931a      	str	r3, [sp, #104]	; 0x68
 8005808:	4654      	mov	r4, sl
 800580a:	2205      	movs	r2, #5
 800580c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005810:	4850      	ldr	r0, [pc, #320]	; (8005954 <_svfiprintf_r+0x1e8>)
 8005812:	f7fa fcdd 	bl	80001d0 <memchr>
 8005816:	9a04      	ldr	r2, [sp, #16]
 8005818:	b9d8      	cbnz	r0, 8005852 <_svfiprintf_r+0xe6>
 800581a:	06d0      	lsls	r0, r2, #27
 800581c:	bf44      	itt	mi
 800581e:	2320      	movmi	r3, #32
 8005820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005824:	0711      	lsls	r1, r2, #28
 8005826:	bf44      	itt	mi
 8005828:	232b      	movmi	r3, #43	; 0x2b
 800582a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800582e:	f89a 3000 	ldrb.w	r3, [sl]
 8005832:	2b2a      	cmp	r3, #42	; 0x2a
 8005834:	d015      	beq.n	8005862 <_svfiprintf_r+0xf6>
 8005836:	9a07      	ldr	r2, [sp, #28]
 8005838:	4654      	mov	r4, sl
 800583a:	2000      	movs	r0, #0
 800583c:	f04f 0c0a 	mov.w	ip, #10
 8005840:	4621      	mov	r1, r4
 8005842:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005846:	3b30      	subs	r3, #48	; 0x30
 8005848:	2b09      	cmp	r3, #9
 800584a:	d94d      	bls.n	80058e8 <_svfiprintf_r+0x17c>
 800584c:	b1b0      	cbz	r0, 800587c <_svfiprintf_r+0x110>
 800584e:	9207      	str	r2, [sp, #28]
 8005850:	e014      	b.n	800587c <_svfiprintf_r+0x110>
 8005852:	eba0 0308 	sub.w	r3, r0, r8
 8005856:	fa09 f303 	lsl.w	r3, r9, r3
 800585a:	4313      	orrs	r3, r2
 800585c:	9304      	str	r3, [sp, #16]
 800585e:	46a2      	mov	sl, r4
 8005860:	e7d2      	b.n	8005808 <_svfiprintf_r+0x9c>
 8005862:	9b03      	ldr	r3, [sp, #12]
 8005864:	1d19      	adds	r1, r3, #4
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	9103      	str	r1, [sp, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	bfbb      	ittet	lt
 800586e:	425b      	neglt	r3, r3
 8005870:	f042 0202 	orrlt.w	r2, r2, #2
 8005874:	9307      	strge	r3, [sp, #28]
 8005876:	9307      	strlt	r3, [sp, #28]
 8005878:	bfb8      	it	lt
 800587a:	9204      	strlt	r2, [sp, #16]
 800587c:	7823      	ldrb	r3, [r4, #0]
 800587e:	2b2e      	cmp	r3, #46	; 0x2e
 8005880:	d10c      	bne.n	800589c <_svfiprintf_r+0x130>
 8005882:	7863      	ldrb	r3, [r4, #1]
 8005884:	2b2a      	cmp	r3, #42	; 0x2a
 8005886:	d134      	bne.n	80058f2 <_svfiprintf_r+0x186>
 8005888:	9b03      	ldr	r3, [sp, #12]
 800588a:	1d1a      	adds	r2, r3, #4
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	9203      	str	r2, [sp, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	bfb8      	it	lt
 8005894:	f04f 33ff 	movlt.w	r3, #4294967295
 8005898:	3402      	adds	r4, #2
 800589a:	9305      	str	r3, [sp, #20]
 800589c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005964 <_svfiprintf_r+0x1f8>
 80058a0:	7821      	ldrb	r1, [r4, #0]
 80058a2:	2203      	movs	r2, #3
 80058a4:	4650      	mov	r0, sl
 80058a6:	f7fa fc93 	bl	80001d0 <memchr>
 80058aa:	b138      	cbz	r0, 80058bc <_svfiprintf_r+0x150>
 80058ac:	9b04      	ldr	r3, [sp, #16]
 80058ae:	eba0 000a 	sub.w	r0, r0, sl
 80058b2:	2240      	movs	r2, #64	; 0x40
 80058b4:	4082      	lsls	r2, r0
 80058b6:	4313      	orrs	r3, r2
 80058b8:	3401      	adds	r4, #1
 80058ba:	9304      	str	r3, [sp, #16]
 80058bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058c0:	4825      	ldr	r0, [pc, #148]	; (8005958 <_svfiprintf_r+0x1ec>)
 80058c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058c6:	2206      	movs	r2, #6
 80058c8:	f7fa fc82 	bl	80001d0 <memchr>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d038      	beq.n	8005942 <_svfiprintf_r+0x1d6>
 80058d0:	4b22      	ldr	r3, [pc, #136]	; (800595c <_svfiprintf_r+0x1f0>)
 80058d2:	bb1b      	cbnz	r3, 800591c <_svfiprintf_r+0x1b0>
 80058d4:	9b03      	ldr	r3, [sp, #12]
 80058d6:	3307      	adds	r3, #7
 80058d8:	f023 0307 	bic.w	r3, r3, #7
 80058dc:	3308      	adds	r3, #8
 80058de:	9303      	str	r3, [sp, #12]
 80058e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e2:	4433      	add	r3, r6
 80058e4:	9309      	str	r3, [sp, #36]	; 0x24
 80058e6:	e768      	b.n	80057ba <_svfiprintf_r+0x4e>
 80058e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80058ec:	460c      	mov	r4, r1
 80058ee:	2001      	movs	r0, #1
 80058f0:	e7a6      	b.n	8005840 <_svfiprintf_r+0xd4>
 80058f2:	2300      	movs	r3, #0
 80058f4:	3401      	adds	r4, #1
 80058f6:	9305      	str	r3, [sp, #20]
 80058f8:	4619      	mov	r1, r3
 80058fa:	f04f 0c0a 	mov.w	ip, #10
 80058fe:	4620      	mov	r0, r4
 8005900:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005904:	3a30      	subs	r2, #48	; 0x30
 8005906:	2a09      	cmp	r2, #9
 8005908:	d903      	bls.n	8005912 <_svfiprintf_r+0x1a6>
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0c6      	beq.n	800589c <_svfiprintf_r+0x130>
 800590e:	9105      	str	r1, [sp, #20]
 8005910:	e7c4      	b.n	800589c <_svfiprintf_r+0x130>
 8005912:	fb0c 2101 	mla	r1, ip, r1, r2
 8005916:	4604      	mov	r4, r0
 8005918:	2301      	movs	r3, #1
 800591a:	e7f0      	b.n	80058fe <_svfiprintf_r+0x192>
 800591c:	ab03      	add	r3, sp, #12
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	462a      	mov	r2, r5
 8005922:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <_svfiprintf_r+0x1f4>)
 8005924:	a904      	add	r1, sp, #16
 8005926:	4638      	mov	r0, r7
 8005928:	f3af 8000 	nop.w
 800592c:	1c42      	adds	r2, r0, #1
 800592e:	4606      	mov	r6, r0
 8005930:	d1d6      	bne.n	80058e0 <_svfiprintf_r+0x174>
 8005932:	89ab      	ldrh	r3, [r5, #12]
 8005934:	065b      	lsls	r3, r3, #25
 8005936:	f53f af2d 	bmi.w	8005794 <_svfiprintf_r+0x28>
 800593a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800593c:	b01d      	add	sp, #116	; 0x74
 800593e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005942:	ab03      	add	r3, sp, #12
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	462a      	mov	r2, r5
 8005948:	4b05      	ldr	r3, [pc, #20]	; (8005960 <_svfiprintf_r+0x1f4>)
 800594a:	a904      	add	r1, sp, #16
 800594c:	4638      	mov	r0, r7
 800594e:	f000 f879 	bl	8005a44 <_printf_i>
 8005952:	e7eb      	b.n	800592c <_svfiprintf_r+0x1c0>
 8005954:	08005dd4 	.word	0x08005dd4
 8005958:	08005dde 	.word	0x08005dde
 800595c:	00000000 	.word	0x00000000
 8005960:	080056b9 	.word	0x080056b9
 8005964:	08005dda 	.word	0x08005dda

08005968 <_printf_common>:
 8005968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800596c:	4616      	mov	r6, r2
 800596e:	4699      	mov	r9, r3
 8005970:	688a      	ldr	r2, [r1, #8]
 8005972:	690b      	ldr	r3, [r1, #16]
 8005974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005978:	4293      	cmp	r3, r2
 800597a:	bfb8      	it	lt
 800597c:	4613      	movlt	r3, r2
 800597e:	6033      	str	r3, [r6, #0]
 8005980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005984:	4607      	mov	r7, r0
 8005986:	460c      	mov	r4, r1
 8005988:	b10a      	cbz	r2, 800598e <_printf_common+0x26>
 800598a:	3301      	adds	r3, #1
 800598c:	6033      	str	r3, [r6, #0]
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	0699      	lsls	r1, r3, #26
 8005992:	bf42      	ittt	mi
 8005994:	6833      	ldrmi	r3, [r6, #0]
 8005996:	3302      	addmi	r3, #2
 8005998:	6033      	strmi	r3, [r6, #0]
 800599a:	6825      	ldr	r5, [r4, #0]
 800599c:	f015 0506 	ands.w	r5, r5, #6
 80059a0:	d106      	bne.n	80059b0 <_printf_common+0x48>
 80059a2:	f104 0a19 	add.w	sl, r4, #25
 80059a6:	68e3      	ldr	r3, [r4, #12]
 80059a8:	6832      	ldr	r2, [r6, #0]
 80059aa:	1a9b      	subs	r3, r3, r2
 80059ac:	42ab      	cmp	r3, r5
 80059ae:	dc26      	bgt.n	80059fe <_printf_common+0x96>
 80059b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059b4:	1e13      	subs	r3, r2, #0
 80059b6:	6822      	ldr	r2, [r4, #0]
 80059b8:	bf18      	it	ne
 80059ba:	2301      	movne	r3, #1
 80059bc:	0692      	lsls	r2, r2, #26
 80059be:	d42b      	bmi.n	8005a18 <_printf_common+0xb0>
 80059c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059c4:	4649      	mov	r1, r9
 80059c6:	4638      	mov	r0, r7
 80059c8:	47c0      	blx	r8
 80059ca:	3001      	adds	r0, #1
 80059cc:	d01e      	beq.n	8005a0c <_printf_common+0xa4>
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	6922      	ldr	r2, [r4, #16]
 80059d2:	f003 0306 	and.w	r3, r3, #6
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	bf02      	ittt	eq
 80059da:	68e5      	ldreq	r5, [r4, #12]
 80059dc:	6833      	ldreq	r3, [r6, #0]
 80059de:	1aed      	subeq	r5, r5, r3
 80059e0:	68a3      	ldr	r3, [r4, #8]
 80059e2:	bf0c      	ite	eq
 80059e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059e8:	2500      	movne	r5, #0
 80059ea:	4293      	cmp	r3, r2
 80059ec:	bfc4      	itt	gt
 80059ee:	1a9b      	subgt	r3, r3, r2
 80059f0:	18ed      	addgt	r5, r5, r3
 80059f2:	2600      	movs	r6, #0
 80059f4:	341a      	adds	r4, #26
 80059f6:	42b5      	cmp	r5, r6
 80059f8:	d11a      	bne.n	8005a30 <_printf_common+0xc8>
 80059fa:	2000      	movs	r0, #0
 80059fc:	e008      	b.n	8005a10 <_printf_common+0xa8>
 80059fe:	2301      	movs	r3, #1
 8005a00:	4652      	mov	r2, sl
 8005a02:	4649      	mov	r1, r9
 8005a04:	4638      	mov	r0, r7
 8005a06:	47c0      	blx	r8
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d103      	bne.n	8005a14 <_printf_common+0xac>
 8005a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a14:	3501      	adds	r5, #1
 8005a16:	e7c6      	b.n	80059a6 <_printf_common+0x3e>
 8005a18:	18e1      	adds	r1, r4, r3
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	2030      	movs	r0, #48	; 0x30
 8005a1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a22:	4422      	add	r2, r4
 8005a24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a2c:	3302      	adds	r3, #2
 8005a2e:	e7c7      	b.n	80059c0 <_printf_common+0x58>
 8005a30:	2301      	movs	r3, #1
 8005a32:	4622      	mov	r2, r4
 8005a34:	4649      	mov	r1, r9
 8005a36:	4638      	mov	r0, r7
 8005a38:	47c0      	blx	r8
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	d0e6      	beq.n	8005a0c <_printf_common+0xa4>
 8005a3e:	3601      	adds	r6, #1
 8005a40:	e7d9      	b.n	80059f6 <_printf_common+0x8e>
	...

08005a44 <_printf_i>:
 8005a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a48:	7e0f      	ldrb	r7, [r1, #24]
 8005a4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a4c:	2f78      	cmp	r7, #120	; 0x78
 8005a4e:	4691      	mov	r9, r2
 8005a50:	4680      	mov	r8, r0
 8005a52:	460c      	mov	r4, r1
 8005a54:	469a      	mov	sl, r3
 8005a56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a5a:	d807      	bhi.n	8005a6c <_printf_i+0x28>
 8005a5c:	2f62      	cmp	r7, #98	; 0x62
 8005a5e:	d80a      	bhi.n	8005a76 <_printf_i+0x32>
 8005a60:	2f00      	cmp	r7, #0
 8005a62:	f000 80d4 	beq.w	8005c0e <_printf_i+0x1ca>
 8005a66:	2f58      	cmp	r7, #88	; 0x58
 8005a68:	f000 80c0 	beq.w	8005bec <_printf_i+0x1a8>
 8005a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a74:	e03a      	b.n	8005aec <_printf_i+0xa8>
 8005a76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a7a:	2b15      	cmp	r3, #21
 8005a7c:	d8f6      	bhi.n	8005a6c <_printf_i+0x28>
 8005a7e:	a101      	add	r1, pc, #4	; (adr r1, 8005a84 <_printf_i+0x40>)
 8005a80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a84:	08005add 	.word	0x08005add
 8005a88:	08005af1 	.word	0x08005af1
 8005a8c:	08005a6d 	.word	0x08005a6d
 8005a90:	08005a6d 	.word	0x08005a6d
 8005a94:	08005a6d 	.word	0x08005a6d
 8005a98:	08005a6d 	.word	0x08005a6d
 8005a9c:	08005af1 	.word	0x08005af1
 8005aa0:	08005a6d 	.word	0x08005a6d
 8005aa4:	08005a6d 	.word	0x08005a6d
 8005aa8:	08005a6d 	.word	0x08005a6d
 8005aac:	08005a6d 	.word	0x08005a6d
 8005ab0:	08005bf5 	.word	0x08005bf5
 8005ab4:	08005b1d 	.word	0x08005b1d
 8005ab8:	08005baf 	.word	0x08005baf
 8005abc:	08005a6d 	.word	0x08005a6d
 8005ac0:	08005a6d 	.word	0x08005a6d
 8005ac4:	08005c17 	.word	0x08005c17
 8005ac8:	08005a6d 	.word	0x08005a6d
 8005acc:	08005b1d 	.word	0x08005b1d
 8005ad0:	08005a6d 	.word	0x08005a6d
 8005ad4:	08005a6d 	.word	0x08005a6d
 8005ad8:	08005bb7 	.word	0x08005bb7
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	1d1a      	adds	r2, r3, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	602a      	str	r2, [r5, #0]
 8005ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005aec:	2301      	movs	r3, #1
 8005aee:	e09f      	b.n	8005c30 <_printf_i+0x1ec>
 8005af0:	6820      	ldr	r0, [r4, #0]
 8005af2:	682b      	ldr	r3, [r5, #0]
 8005af4:	0607      	lsls	r7, r0, #24
 8005af6:	f103 0104 	add.w	r1, r3, #4
 8005afa:	6029      	str	r1, [r5, #0]
 8005afc:	d501      	bpl.n	8005b02 <_printf_i+0xbe>
 8005afe:	681e      	ldr	r6, [r3, #0]
 8005b00:	e003      	b.n	8005b0a <_printf_i+0xc6>
 8005b02:	0646      	lsls	r6, r0, #25
 8005b04:	d5fb      	bpl.n	8005afe <_printf_i+0xba>
 8005b06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b0a:	2e00      	cmp	r6, #0
 8005b0c:	da03      	bge.n	8005b16 <_printf_i+0xd2>
 8005b0e:	232d      	movs	r3, #45	; 0x2d
 8005b10:	4276      	negs	r6, r6
 8005b12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b16:	485a      	ldr	r0, [pc, #360]	; (8005c80 <_printf_i+0x23c>)
 8005b18:	230a      	movs	r3, #10
 8005b1a:	e012      	b.n	8005b42 <_printf_i+0xfe>
 8005b1c:	682b      	ldr	r3, [r5, #0]
 8005b1e:	6820      	ldr	r0, [r4, #0]
 8005b20:	1d19      	adds	r1, r3, #4
 8005b22:	6029      	str	r1, [r5, #0]
 8005b24:	0605      	lsls	r5, r0, #24
 8005b26:	d501      	bpl.n	8005b2c <_printf_i+0xe8>
 8005b28:	681e      	ldr	r6, [r3, #0]
 8005b2a:	e002      	b.n	8005b32 <_printf_i+0xee>
 8005b2c:	0641      	lsls	r1, r0, #25
 8005b2e:	d5fb      	bpl.n	8005b28 <_printf_i+0xe4>
 8005b30:	881e      	ldrh	r6, [r3, #0]
 8005b32:	4853      	ldr	r0, [pc, #332]	; (8005c80 <_printf_i+0x23c>)
 8005b34:	2f6f      	cmp	r7, #111	; 0x6f
 8005b36:	bf0c      	ite	eq
 8005b38:	2308      	moveq	r3, #8
 8005b3a:	230a      	movne	r3, #10
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b42:	6865      	ldr	r5, [r4, #4]
 8005b44:	60a5      	str	r5, [r4, #8]
 8005b46:	2d00      	cmp	r5, #0
 8005b48:	bfa2      	ittt	ge
 8005b4a:	6821      	ldrge	r1, [r4, #0]
 8005b4c:	f021 0104 	bicge.w	r1, r1, #4
 8005b50:	6021      	strge	r1, [r4, #0]
 8005b52:	b90e      	cbnz	r6, 8005b58 <_printf_i+0x114>
 8005b54:	2d00      	cmp	r5, #0
 8005b56:	d04b      	beq.n	8005bf0 <_printf_i+0x1ac>
 8005b58:	4615      	mov	r5, r2
 8005b5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b5e:	fb03 6711 	mls	r7, r3, r1, r6
 8005b62:	5dc7      	ldrb	r7, [r0, r7]
 8005b64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b68:	4637      	mov	r7, r6
 8005b6a:	42bb      	cmp	r3, r7
 8005b6c:	460e      	mov	r6, r1
 8005b6e:	d9f4      	bls.n	8005b5a <_printf_i+0x116>
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	d10b      	bne.n	8005b8c <_printf_i+0x148>
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	07de      	lsls	r6, r3, #31
 8005b78:	d508      	bpl.n	8005b8c <_printf_i+0x148>
 8005b7a:	6923      	ldr	r3, [r4, #16]
 8005b7c:	6861      	ldr	r1, [r4, #4]
 8005b7e:	4299      	cmp	r1, r3
 8005b80:	bfde      	ittt	le
 8005b82:	2330      	movle	r3, #48	; 0x30
 8005b84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b8c:	1b52      	subs	r2, r2, r5
 8005b8e:	6122      	str	r2, [r4, #16]
 8005b90:	f8cd a000 	str.w	sl, [sp]
 8005b94:	464b      	mov	r3, r9
 8005b96:	aa03      	add	r2, sp, #12
 8005b98:	4621      	mov	r1, r4
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	f7ff fee4 	bl	8005968 <_printf_common>
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d14a      	bne.n	8005c3a <_printf_i+0x1f6>
 8005ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba8:	b004      	add	sp, #16
 8005baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	f043 0320 	orr.w	r3, r3, #32
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	4833      	ldr	r0, [pc, #204]	; (8005c84 <_printf_i+0x240>)
 8005bb8:	2778      	movs	r7, #120	; 0x78
 8005bba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	6829      	ldr	r1, [r5, #0]
 8005bc2:	061f      	lsls	r7, r3, #24
 8005bc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bc8:	d402      	bmi.n	8005bd0 <_printf_i+0x18c>
 8005bca:	065f      	lsls	r7, r3, #25
 8005bcc:	bf48      	it	mi
 8005bce:	b2b6      	uxthmi	r6, r6
 8005bd0:	07df      	lsls	r7, r3, #31
 8005bd2:	bf48      	it	mi
 8005bd4:	f043 0320 	orrmi.w	r3, r3, #32
 8005bd8:	6029      	str	r1, [r5, #0]
 8005bda:	bf48      	it	mi
 8005bdc:	6023      	strmi	r3, [r4, #0]
 8005bde:	b91e      	cbnz	r6, 8005be8 <_printf_i+0x1a4>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	f023 0320 	bic.w	r3, r3, #32
 8005be6:	6023      	str	r3, [r4, #0]
 8005be8:	2310      	movs	r3, #16
 8005bea:	e7a7      	b.n	8005b3c <_printf_i+0xf8>
 8005bec:	4824      	ldr	r0, [pc, #144]	; (8005c80 <_printf_i+0x23c>)
 8005bee:	e7e4      	b.n	8005bba <_printf_i+0x176>
 8005bf0:	4615      	mov	r5, r2
 8005bf2:	e7bd      	b.n	8005b70 <_printf_i+0x12c>
 8005bf4:	682b      	ldr	r3, [r5, #0]
 8005bf6:	6826      	ldr	r6, [r4, #0]
 8005bf8:	6961      	ldr	r1, [r4, #20]
 8005bfa:	1d18      	adds	r0, r3, #4
 8005bfc:	6028      	str	r0, [r5, #0]
 8005bfe:	0635      	lsls	r5, r6, #24
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	d501      	bpl.n	8005c08 <_printf_i+0x1c4>
 8005c04:	6019      	str	r1, [r3, #0]
 8005c06:	e002      	b.n	8005c0e <_printf_i+0x1ca>
 8005c08:	0670      	lsls	r0, r6, #25
 8005c0a:	d5fb      	bpl.n	8005c04 <_printf_i+0x1c0>
 8005c0c:	8019      	strh	r1, [r3, #0]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	6123      	str	r3, [r4, #16]
 8005c12:	4615      	mov	r5, r2
 8005c14:	e7bc      	b.n	8005b90 <_printf_i+0x14c>
 8005c16:	682b      	ldr	r3, [r5, #0]
 8005c18:	1d1a      	adds	r2, r3, #4
 8005c1a:	602a      	str	r2, [r5, #0]
 8005c1c:	681d      	ldr	r5, [r3, #0]
 8005c1e:	6862      	ldr	r2, [r4, #4]
 8005c20:	2100      	movs	r1, #0
 8005c22:	4628      	mov	r0, r5
 8005c24:	f7fa fad4 	bl	80001d0 <memchr>
 8005c28:	b108      	cbz	r0, 8005c2e <_printf_i+0x1ea>
 8005c2a:	1b40      	subs	r0, r0, r5
 8005c2c:	6060      	str	r0, [r4, #4]
 8005c2e:	6863      	ldr	r3, [r4, #4]
 8005c30:	6123      	str	r3, [r4, #16]
 8005c32:	2300      	movs	r3, #0
 8005c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c38:	e7aa      	b.n	8005b90 <_printf_i+0x14c>
 8005c3a:	6923      	ldr	r3, [r4, #16]
 8005c3c:	462a      	mov	r2, r5
 8005c3e:	4649      	mov	r1, r9
 8005c40:	4640      	mov	r0, r8
 8005c42:	47d0      	blx	sl
 8005c44:	3001      	adds	r0, #1
 8005c46:	d0ad      	beq.n	8005ba4 <_printf_i+0x160>
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	079b      	lsls	r3, r3, #30
 8005c4c:	d413      	bmi.n	8005c76 <_printf_i+0x232>
 8005c4e:	68e0      	ldr	r0, [r4, #12]
 8005c50:	9b03      	ldr	r3, [sp, #12]
 8005c52:	4298      	cmp	r0, r3
 8005c54:	bfb8      	it	lt
 8005c56:	4618      	movlt	r0, r3
 8005c58:	e7a6      	b.n	8005ba8 <_printf_i+0x164>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	4632      	mov	r2, r6
 8005c5e:	4649      	mov	r1, r9
 8005c60:	4640      	mov	r0, r8
 8005c62:	47d0      	blx	sl
 8005c64:	3001      	adds	r0, #1
 8005c66:	d09d      	beq.n	8005ba4 <_printf_i+0x160>
 8005c68:	3501      	adds	r5, #1
 8005c6a:	68e3      	ldr	r3, [r4, #12]
 8005c6c:	9903      	ldr	r1, [sp, #12]
 8005c6e:	1a5b      	subs	r3, r3, r1
 8005c70:	42ab      	cmp	r3, r5
 8005c72:	dcf2      	bgt.n	8005c5a <_printf_i+0x216>
 8005c74:	e7eb      	b.n	8005c4e <_printf_i+0x20a>
 8005c76:	2500      	movs	r5, #0
 8005c78:	f104 0619 	add.w	r6, r4, #25
 8005c7c:	e7f5      	b.n	8005c6a <_printf_i+0x226>
 8005c7e:	bf00      	nop
 8005c80:	08005de5 	.word	0x08005de5
 8005c84:	08005df6 	.word	0x08005df6

08005c88 <memmove>:
 8005c88:	4288      	cmp	r0, r1
 8005c8a:	b510      	push	{r4, lr}
 8005c8c:	eb01 0402 	add.w	r4, r1, r2
 8005c90:	d902      	bls.n	8005c98 <memmove+0x10>
 8005c92:	4284      	cmp	r4, r0
 8005c94:	4623      	mov	r3, r4
 8005c96:	d807      	bhi.n	8005ca8 <memmove+0x20>
 8005c98:	1e43      	subs	r3, r0, #1
 8005c9a:	42a1      	cmp	r1, r4
 8005c9c:	d008      	beq.n	8005cb0 <memmove+0x28>
 8005c9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ca2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ca6:	e7f8      	b.n	8005c9a <memmove+0x12>
 8005ca8:	4402      	add	r2, r0
 8005caa:	4601      	mov	r1, r0
 8005cac:	428a      	cmp	r2, r1
 8005cae:	d100      	bne.n	8005cb2 <memmove+0x2a>
 8005cb0:	bd10      	pop	{r4, pc}
 8005cb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cba:	e7f7      	b.n	8005cac <memmove+0x24>

08005cbc <_sbrk_r>:
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	4d06      	ldr	r5, [pc, #24]	; (8005cd8 <_sbrk_r+0x1c>)
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	602b      	str	r3, [r5, #0]
 8005cc8:	f7fb fb6a 	bl	80013a0 <_sbrk>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d102      	bne.n	8005cd6 <_sbrk_r+0x1a>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	b103      	cbz	r3, 8005cd6 <_sbrk_r+0x1a>
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	200002a4 	.word	0x200002a4

08005cdc <memcpy>:
 8005cdc:	440a      	add	r2, r1
 8005cde:	4291      	cmp	r1, r2
 8005ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ce4:	d100      	bne.n	8005ce8 <memcpy+0xc>
 8005ce6:	4770      	bx	lr
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cf2:	4291      	cmp	r1, r2
 8005cf4:	d1f9      	bne.n	8005cea <memcpy+0xe>
 8005cf6:	bd10      	pop	{r4, pc}

08005cf8 <_realloc_r>:
 8005cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cfc:	4680      	mov	r8, r0
 8005cfe:	4614      	mov	r4, r2
 8005d00:	460e      	mov	r6, r1
 8005d02:	b921      	cbnz	r1, 8005d0e <_realloc_r+0x16>
 8005d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d08:	4611      	mov	r1, r2
 8005d0a:	f7ff bc49 	b.w	80055a0 <_malloc_r>
 8005d0e:	b92a      	cbnz	r2, 8005d1c <_realloc_r+0x24>
 8005d10:	f7ff fbda 	bl	80054c8 <_free_r>
 8005d14:	4625      	mov	r5, r4
 8005d16:	4628      	mov	r0, r5
 8005d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d1c:	f000 f81b 	bl	8005d56 <_malloc_usable_size_r>
 8005d20:	4284      	cmp	r4, r0
 8005d22:	4607      	mov	r7, r0
 8005d24:	d802      	bhi.n	8005d2c <_realloc_r+0x34>
 8005d26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d2a:	d812      	bhi.n	8005d52 <_realloc_r+0x5a>
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	4640      	mov	r0, r8
 8005d30:	f7ff fc36 	bl	80055a0 <_malloc_r>
 8005d34:	4605      	mov	r5, r0
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d0ed      	beq.n	8005d16 <_realloc_r+0x1e>
 8005d3a:	42bc      	cmp	r4, r7
 8005d3c:	4622      	mov	r2, r4
 8005d3e:	4631      	mov	r1, r6
 8005d40:	bf28      	it	cs
 8005d42:	463a      	movcs	r2, r7
 8005d44:	f7ff ffca 	bl	8005cdc <memcpy>
 8005d48:	4631      	mov	r1, r6
 8005d4a:	4640      	mov	r0, r8
 8005d4c:	f7ff fbbc 	bl	80054c8 <_free_r>
 8005d50:	e7e1      	b.n	8005d16 <_realloc_r+0x1e>
 8005d52:	4635      	mov	r5, r6
 8005d54:	e7df      	b.n	8005d16 <_realloc_r+0x1e>

08005d56 <_malloc_usable_size_r>:
 8005d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d5a:	1f18      	subs	r0, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bfbc      	itt	lt
 8005d60:	580b      	ldrlt	r3, [r1, r0]
 8005d62:	18c0      	addlt	r0, r0, r3
 8005d64:	4770      	bx	lr
	...

08005d68 <_init>:
 8005d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6a:	bf00      	nop
 8005d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d6e:	bc08      	pop	{r3}
 8005d70:	469e      	mov	lr, r3
 8005d72:	4770      	bx	lr

08005d74 <_fini>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	bf00      	nop
 8005d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7a:	bc08      	pop	{r3}
 8005d7c:	469e      	mov	lr, r3
 8005d7e:	4770      	bx	lr
