
LoraATCommandes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800483c  0800483c  0001483c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048cc  080048cc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080048cc  080048cc  000148cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048d4  080048d4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d4  080048d4  000148d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048d8  080048d8  000148d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080048dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000014  080048f0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  080048f0  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c5ba  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d9a  00000000  00000000  0002c641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e8  00000000  00000000  0002e3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000798  00000000  00000000  0002edc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025847  00000000  00000000  0002f560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c15c  00000000  00000000  00054da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e71cd  00000000  00000000  00060f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027cc  00000000  00000000  001480d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0014a89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004824 	.word	0x08004824

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004824 	.word	0x08004824

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_UARTEx_RxEventCallback>:

uint8_t rcvbff[RX_BUFF_SIZE];
uint8_t mainbff[MAIN_BUFF_SIZE];

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80004e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004ec:	b087      	sub	sp, #28
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
 80004f2:	460b      	mov	r3, r1
 80004f4:	807b      	strh	r3, [r7, #2]
	if(huart == serial)  //huart->Instance == USART2
 80004f6:	4b64      	ldr	r3, [pc, #400]	; (8000688 <HAL_UARTEx_RxEventCallback+0x1a0>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d178      	bne.n	80005f2 <HAL_UARTEx_RxEventCallback+0x10a>
	{
 8000500:	466b      	mov	r3, sp
 8000502:	461e      	mov	r6, r3
		memcpy(mainbff, rcvbff, Size);
 8000504:	887b      	ldrh	r3, [r7, #2]
 8000506:	461a      	mov	r2, r3
 8000508:	4960      	ldr	r1, [pc, #384]	; (800068c <HAL_UARTEx_RxEventCallback+0x1a4>)
 800050a:	4861      	ldr	r0, [pc, #388]	; (8000690 <HAL_UARTEx_RxEventCallback+0x1a8>)
 800050c:	f004 f97c 	bl	8004808 <memcpy>
		uint8_t tmpbff[strlen(rcvbff)+1];
 8000510:	485e      	ldr	r0, [pc, #376]	; (800068c <HAL_UARTEx_RxEventCallback+0x1a4>)
 8000512:	f7ff fe63 	bl	80001dc <strlen>
 8000516:	4603      	mov	r3, r0
 8000518:	1c59      	adds	r1, r3, #1
 800051a:	460b      	mov	r3, r1
 800051c:	3b01      	subs	r3, #1
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	2300      	movs	r3, #0
 8000522:	4688      	mov	r8, r1
 8000524:	4699      	mov	r9, r3
 8000526:	f04f 0200 	mov.w	r2, #0
 800052a:	f04f 0300 	mov.w	r3, #0
 800052e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800053a:	2300      	movs	r3, #0
 800053c:	460c      	mov	r4, r1
 800053e:	461d      	mov	r5, r3
 8000540:	f04f 0200 	mov.w	r2, #0
 8000544:	f04f 0300 	mov.w	r3, #0
 8000548:	00eb      	lsls	r3, r5, #3
 800054a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800054e:	00e2      	lsls	r2, r4, #3
 8000550:	1dcb      	adds	r3, r1, #7
 8000552:	08db      	lsrs	r3, r3, #3
 8000554:	00db      	lsls	r3, r3, #3
 8000556:	ebad 0d03 	sub.w	sp, sp, r3
 800055a:	466b      	mov	r3, sp
 800055c:	3300      	adds	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
					tmpbff[0]='>';
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	223e      	movs	r2, #62	; 0x3e
 8000564:	701a      	strb	r2, [r3, #0]
					memcpy(&tmpbff[1], rcvbff, strlen(rcvbff));
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	1c5c      	adds	r4, r3, #1
 800056a:	4848      	ldr	r0, [pc, #288]	; (800068c <HAL_UARTEx_RxEventCallback+0x1a4>)
 800056c:	f7ff fe36 	bl	80001dc <strlen>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	4945      	ldr	r1, [pc, #276]	; (800068c <HAL_UARTEx_RxEventCallback+0x1a4>)
 8000576:	4620      	mov	r0, r4
 8000578:	f004 f946 	bl	8004808 <memcpy>

					HAL_UART_Transmit(serial,(uint8_t*)tmpbff,strlen(rcvbff)+1,10);
 800057c:	4b42      	ldr	r3, [pc, #264]	; (8000688 <HAL_UARTEx_RxEventCallback+0x1a0>)
 800057e:	681c      	ldr	r4, [r3, #0]
 8000580:	4842      	ldr	r0, [pc, #264]	; (800068c <HAL_UARTEx_RxEventCallback+0x1a4>)
 8000582:	f7ff fe2b 	bl	80001dc <strlen>
 8000586:	4603      	mov	r3, r0
 8000588:	b29b      	uxth	r3, r3
 800058a:	3301      	adds	r3, #1
 800058c:	b29a      	uxth	r2, r3
 800058e:	230a      	movs	r3, #10
 8000590:	68b9      	ldr	r1, [r7, #8]
 8000592:	4620      	mov	r0, r4
 8000594:	f002 fe4a 	bl	800322c <HAL_UART_Transmit>

		HAL_UART_Transmit(lora,(uint8_t*)rcvbff,strlen(rcvbff),10);
 8000598:	4b3e      	ldr	r3, [pc, #248]	; (8000694 <HAL_UARTEx_RxEventCallback+0x1ac>)
 800059a:	681c      	ldr	r4, [r3, #0]
 800059c:	483b      	ldr	r0, [pc, #236]	; (800068c <HAL_UARTEx_RxEventCallback+0x1a4>)
 800059e:	f7ff fe1d 	bl	80001dc <strlen>
 80005a2:	4603      	mov	r3, r0
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	230a      	movs	r3, #10
 80005a8:	4938      	ldr	r1, [pc, #224]	; (800068c <HAL_UARTEx_RxEventCallback+0x1a4>)
 80005aa:	4620      	mov	r0, r4
 80005ac:	f002 fe3e 	bl	800322c <HAL_UART_Transmit>



		for(int i=0; i<RX_BUFF_SIZE; i++)
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	e007      	b.n	80005c6 <HAL_UARTEx_RxEventCallback+0xde>
			rcvbff[i] = 0x00;
 80005b6:	4a35      	ldr	r2, [pc, #212]	; (800068c <HAL_UARTEx_RxEventCallback+0x1a4>)
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	4413      	add	r3, r2
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<RX_BUFF_SIZE; i++)
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	3301      	adds	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	2bc7      	cmp	r3, #199	; 0xc7
 80005ca:	ddf4      	ble.n	80005b6 <HAL_UARTEx_RxEventCallback+0xce>
		rcvbff[0] = '\0';
 80005cc:	4b2f      	ldr	r3, [pc, #188]	; (800068c <HAL_UARTEx_RxEventCallback+0x1a4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]

		HAL_UARTEx_ReceiveToIdle_DMA(serial, rcvbff, RX_BUFF_SIZE);
 80005d2:	4b2d      	ldr	r3, [pc, #180]	; (8000688 <HAL_UARTEx_RxEventCallback+0x1a0>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	22c8      	movs	r2, #200	; 0xc8
 80005d8:	492c      	ldr	r1, [pc, #176]	; (800068c <HAL_UARTEx_RxEventCallback+0x1a4>)
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 f894 	bl	8004708 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80005e0:	4b2d      	ldr	r3, [pc, #180]	; (8000698 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f022 0204 	bic.w	r2, r2, #4
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	46b5      	mov	sp, r6
	}
	if(huart == lora)  //huart->Instance == USART2
 80005f2:	4b28      	ldr	r3, [pc, #160]	; (8000694 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d13f      	bne.n	800067c <HAL_UARTEx_RxEventCallback+0x194>
		{
			memcpy(mainbff, rcvbff, Size);
 80005fc:	887b      	ldrh	r3, [r7, #2]
 80005fe:	461a      	mov	r2, r3
 8000600:	4922      	ldr	r1, [pc, #136]	; (800068c <HAL_UARTEx_RxEventCallback+0x1a4>)
 8000602:	4823      	ldr	r0, [pc, #140]	; (8000690 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8000604:	f004 f900 	bl	8004808 <memcpy>


			HAL_UART_Transmit(serial,(uint8_t*)rcvbff,strlen(rcvbff),10);
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <HAL_UARTEx_RxEventCallback+0x1a0>)
 800060a:	681c      	ldr	r4, [r3, #0]
 800060c:	481f      	ldr	r0, [pc, #124]	; (800068c <HAL_UARTEx_RxEventCallback+0x1a4>)
 800060e:	f7ff fde5 	bl	80001dc <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	230a      	movs	r3, #10
 8000618:	491c      	ldr	r1, [pc, #112]	; (800068c <HAL_UARTEx_RxEventCallback+0x1a4>)
 800061a:	4620      	mov	r0, r4
 800061c:	f002 fe06 	bl	800322c <HAL_UART_Transmit>

			if(strcmp(rcvbff, "+MSG: Done\r\n")==0)
 8000620:	491e      	ldr	r1, [pc, #120]	; (800069c <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000622:	481a      	ldr	r0, [pc, #104]	; (800068c <HAL_UARTEx_RxEventCallback+0x1a4>)
 8000624:	f7ff fdd0 	bl	80001c8 <strcmp>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d106      	bne.n	800063c <HAL_UARTEx_RxEventCallback+0x154>
				HAL_UART_Transmit(serial,(uint8_t*)"Valid data\n",11,10);
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8000630:	6818      	ldr	r0, [r3, #0]
 8000632:	230a      	movs	r3, #10
 8000634:	220b      	movs	r2, #11
 8000636:	491a      	ldr	r1, [pc, #104]	; (80006a0 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000638:	f002 fdf8 	bl	800322c <HAL_UART_Transmit>

			for(int i=0; i<RX_BUFF_SIZE; i++)
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	e007      	b.n	8000652 <HAL_UARTEx_RxEventCallback+0x16a>
				rcvbff[i] = 0x00;
 8000642:	4a12      	ldr	r2, [pc, #72]	; (800068c <HAL_UARTEx_RxEventCallback+0x1a4>)
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	4413      	add	r3, r2
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<RX_BUFF_SIZE; i++)
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	3301      	adds	r3, #1
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	2bc7      	cmp	r3, #199	; 0xc7
 8000656:	ddf4      	ble.n	8000642 <HAL_UARTEx_RxEventCallback+0x15a>
			rcvbff[0] = '\0';
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <HAL_UARTEx_RxEventCallback+0x1a4>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]

			HAL_UARTEx_ReceiveToIdle_DMA(lora, rcvbff, RX_BUFF_SIZE);
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	22c8      	movs	r2, #200	; 0xc8
 8000664:	4909      	ldr	r1, [pc, #36]	; (800068c <HAL_UARTEx_RxEventCallback+0x1a4>)
 8000666:	4618      	mov	r0, r3
 8000668:	f004 f84e 	bl	8004708 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <HAL_UARTEx_RxEventCallback+0x1bc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f022 0204 	bic.w	r2, r2, #4
 800067a:	601a      	str	r2, [r3, #0]
		}
}
 800067c:	bf00      	nop
 800067e:	371c      	adds	r7, #28
 8000680:	46bd      	mov	sp, r7
 8000682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000686:	bf00      	nop
 8000688:	20000004 	.word	0x20000004
 800068c:	200002a0 	.word	0x200002a0
 8000690:	20000368 	.word	0x20000368
 8000694:	20000000 	.word	0x20000000
 8000698:	20000258 	.word	0x20000258
 800069c:	0800483c 	.word	0x0800483c
 80006a0:	0800484c 	.word	0x0800484c
 80006a4:	200001c8 	.word	0x200001c8

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b5b0      	push	{r4, r5, r7, lr}
 80006aa:	b09c      	sub	sp, #112	; 0x70
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f000 fc4b 	bl	8000f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f873 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f000 f991 	bl	80009dc <MX_GPIO_Init>
  MX_DMA_Init();
 80006ba:	f000 f955 	bl	8000968 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006be:	f000 f923 	bl	8000908 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80006c2:	f000 f8bd 	bl	8000840 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80006c6:	f000 f8ef 	bl	80008a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_UART_Receive_IT(&huart2,(uint8_t *) rcvbff, sizeof(rcvbff));
  //HAL_UART_Receive_DMA (&huart2, rcvbff, 150);
  HAL_UART_Transmit(serial, (uint8_t *)"UART2 INIT\n" , 11, 10);
 80006ca:	4b2c      	ldr	r3, [pc, #176]	; (800077c <main+0xd4>)
 80006cc:	6818      	ldr	r0, [r3, #0]
 80006ce:	230a      	movs	r3, #10
 80006d0:	220b      	movs	r2, #11
 80006d2:	492b      	ldr	r1, [pc, #172]	; (8000780 <main+0xd8>)
 80006d4:	f002 fdaa 	bl	800322c <HAL_UART_Transmit>

  char automode[55] = {0xFF,0xFF};
 80006d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80006de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006e2:	2233      	movs	r2, #51	; 0x33
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 f862 	bl	80047b0 <memset>
   strcpy(&automode[2],"AT+LOWPOWER=AUTOOFF\n\f");
 80006ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006f0:	3302      	adds	r3, #2
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <main+0xdc>)
 80006f4:	461d      	mov	r5, r3
 80006f6:	4614      	mov	r4, r2
 80006f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fa:	6028      	str	r0, [r5, #0]
 80006fc:	6069      	str	r1, [r5, #4]
 80006fe:	60aa      	str	r2, [r5, #8]
 8000700:	60eb      	str	r3, [r5, #12]
 8000702:	6820      	ldr	r0, [r4, #0]
 8000704:	6128      	str	r0, [r5, #16]
 8000706:	88a3      	ldrh	r3, [r4, #4]
 8000708:	82ab      	strh	r3, [r5, #20]
  //HAL_UART_Transmit(lora, (uint8_t *)automode , strlen(automode), 60);
  char message[55] = "rcv\n";
 800070a:	4a1f      	ldr	r2, [pc, #124]	; (8000788 <main+0xe0>)
 800070c:	463b      	mov	r3, r7
 800070e:	6810      	ldr	r0, [r2, #0]
 8000710:	6018      	str	r0, [r3, #0]
 8000712:	7912      	ldrb	r2, [r2, #4]
 8000714:	711a      	strb	r2, [r3, #4]
 8000716:	1d7b      	adds	r3, r7, #5
 8000718:	2232      	movs	r2, #50	; 0x32
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f004 f847 	bl	80047b0 <memset>
  //uint8_t premessage[55] = "AT+MSG\r\n";

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 8000722:	2201      	movs	r2, #1
 8000724:	2120      	movs	r1, #32
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f001 f9df 	bl	8001aec <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800072e:	2064      	movs	r0, #100	; 0x64
 8000730:	f000 fc86 	bl	8001040 <HAL_Delay>
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000734:	2120      	movs	r1, #32
 8000736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073a:	f001 f9ef 	bl	8001b1c <HAL_GPIO_TogglePin>
  HAL_UART_Transmit(&huart4,message2 , 7, 10);
  HAL_Delay(1000);*/
  //HAL_UART_Receive_DMA (serial, (uint8_t*)reception, 100);
  //HAL_UART_Receive_IT(&huart2, rcvbff, 150);

  HAL_UARTEx_ReceiveToIdle_DMA(serial, rcvbff, RX_BUFF_SIZE);
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <main+0xd4>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	22c8      	movs	r2, #200	; 0xc8
 8000744:	4911      	ldr	r1, [pc, #68]	; (800078c <main+0xe4>)
 8000746:	4618      	mov	r0, r3
 8000748:	f003 ffde 	bl	8004708 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <main+0xe8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <main+0xe8>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f022 0204 	bic.w	r2, r2, #4
 800075a:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(lora, rcvbff, RX_BUFF_SIZE);
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <main+0xec>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	22c8      	movs	r2, #200	; 0xc8
 8000762:	490a      	ldr	r1, [pc, #40]	; (800078c <main+0xe4>)
 8000764:	4618      	mov	r0, r3
 8000766:	f003 ffcf 	bl	8004708 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <main+0xf0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <main+0xf0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f022 0204 	bic.w	r2, r2, #4
 8000778:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800077a:	e7fe      	b.n	800077a <main+0xd2>
 800077c:	20000004 	.word	0x20000004
 8000780:	08004858 	.word	0x08004858
 8000784:	08004864 	.word	0x08004864
 8000788:	0800487c 	.word	0x0800487c
 800078c:	200002a0 	.word	0x200002a0
 8000790:	20000258 	.word	0x20000258
 8000794:	20000000 	.word	0x20000000
 8000798:	200001c8 	.word	0x200001c8

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b096      	sub	sp, #88	; 0x58
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2244      	movs	r2, #68	; 0x44
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f004 f800 	bl	80047b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	463b      	mov	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007c2:	f001 f9d3 	bl	8001b6c <HAL_PWREx_ControlVoltageScaling>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007cc:	f000 f96c 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007da:	2310      	movs	r3, #16
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e2:	2302      	movs	r3, #2
 80007e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007ea:	230a      	movs	r3, #10
 80007ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007ee:	2307      	movs	r3, #7
 80007f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 fa0a 	bl	8001c18 <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800080a:	f000 f94d 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	230f      	movs	r3, #15
 8000810:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2303      	movs	r3, #3
 8000814:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000822:	463b      	mov	r3, r7
 8000824:	2104      	movs	r1, #4
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fdd2 	bl	80023d0 <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000832:	f000 f939 	bl	8000aa8 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3758      	adds	r7, #88	; 0x58
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_UART4_Init+0x60>)
 8000846:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <MX_UART4_Init+0x64>)
 8000848:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_UART4_Init+0x60>)
 800084c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000850:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_UART4_Init+0x60>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_UART4_Init+0x60>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <MX_UART4_Init+0x60>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_UART4_Init+0x60>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <MX_UART4_Init+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_UART4_Init+0x60>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <MX_UART4_Init+0x60>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_UART4_Init+0x60>)
 800087e:	2208      	movs	r2, #8
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <MX_UART4_Init+0x60>)
 8000884:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000888:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_UART4_Init+0x60>)
 800088c:	f002 fc80 	bl	8003190 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 8000896:	f000 f907 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000030 	.word	0x20000030
 80008a4:	40004c00 	.word	0x40004c00

080008a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008ae:	4a15      	ldr	r2, [pc, #84]	; (8000904 <MX_USART1_UART_Init+0x5c>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008ec:	f002 fc50 	bl	8003190 <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008f6:	f000 f8d7 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000b8 	.word	0x200000b8
 8000904:	40013800 	.word	0x40013800

08000908 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_USART2_UART_Init+0x58>)
 800090e:	4a15      	ldr	r2, [pc, #84]	; (8000964 <MX_USART2_UART_Init+0x5c>)
 8000910:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_USART2_UART_Init+0x58>)
 8000914:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000918:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_USART2_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_USART2_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_USART2_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_USART2_UART_Init+0x58>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_USART2_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_USART2_UART_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_USART2_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_USART2_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_USART2_UART_Init+0x58>)
 800094c:	f002 fc20 	bl	8003190 <HAL_UART_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000956:	f000 f8a7 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000140 	.word	0x20000140
 8000964:	40004400 	.word	0x40004400

08000968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_DMA_Init+0x70>)
 8000970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000972:	4a19      	ldr	r2, [pc, #100]	; (80009d8 <MX_DMA_Init+0x70>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6493      	str	r3, [r2, #72]	; 0x48
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_DMA_Init+0x70>)
 800097c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_DMA_Init+0x70>)
 8000988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800098a:	4a13      	ldr	r2, [pc, #76]	; (80009d8 <MX_DMA_Init+0x70>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6493      	str	r3, [r2, #72]	; 0x48
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_DMA_Init+0x70>)
 8000994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	200f      	movs	r0, #15
 80009a4:	f000 fc4b 	bl	800123e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80009a8:	200f      	movs	r0, #15
 80009aa:	f000 fc64 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	2010      	movs	r0, #16
 80009b4:	f000 fc43 	bl	800123e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80009b8:	2010      	movs	r0, #16
 80009ba:	f000 fc5c 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	203c      	movs	r0, #60	; 0x3c
 80009c4:	f000 fc3b 	bl	800123e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80009c8:	203c      	movs	r0, #60	; 0x3c
 80009ca:	f000 fc54 	bl	8001276 <HAL_NVIC_EnableIRQ>

}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a2a      	ldr	r2, [pc, #168]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a24      	ldr	r2, [pc, #144]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a1e      	ldr	r2, [pc, #120]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2120      	movs	r1, #32
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f001 f847 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a64:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <MX_GPIO_Init+0xc8>)
 8000a76:	f000 fe8f 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a7a:	2320      	movs	r3, #32
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f000 fe80 	bl	8001798 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	; 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	48000800 	.word	0x48000800

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x8>
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_MspInit+0x44>)
 8000abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <HAL_MspInit+0x44>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <HAL_MspInit+0x44>)
 8000ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_MspInit+0x44>)
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_MspInit+0x44>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_MspInit+0x44>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b0b0      	sub	sp, #192	; 0xc0
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	2288      	movs	r2, #136	; 0x88
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f003 fe47 	bl	80047b0 <memset>
  if(huart->Instance==UART4)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4aad      	ldr	r2, [pc, #692]	; (8000ddc <HAL_UART_MspInit+0x2e0>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d16d      	bne.n	8000c08 <HAL_UART_MspInit+0x10c>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 fe6d 	bl	8002818 <HAL_RCCEx_PeriphCLKConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b44:	f7ff ffb0 	bl	8000aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b48:	4ba5      	ldr	r3, [pc, #660]	; (8000de0 <HAL_UART_MspInit+0x2e4>)
 8000b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4c:	4aa4      	ldr	r2, [pc, #656]	; (8000de0 <HAL_UART_MspInit+0x2e4>)
 8000b4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b52:	6593      	str	r3, [r2, #88]	; 0x58
 8000b54:	4ba2      	ldr	r3, [pc, #648]	; (8000de0 <HAL_UART_MspInit+0x2e4>)
 8000b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b5c:	623b      	str	r3, [r7, #32]
 8000b5e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b9f      	ldr	r3, [pc, #636]	; (8000de0 <HAL_UART_MspInit+0x2e4>)
 8000b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b64:	4a9e      	ldr	r2, [pc, #632]	; (8000de0 <HAL_UART_MspInit+0x2e4>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6c:	4b9c      	ldr	r3, [pc, #624]	; (8000de0 <HAL_UART_MspInit+0x2e4>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	61fb      	str	r3, [r7, #28]
 8000b76:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = Lora_TX_Pin|Lora_RX_Pin;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b90:	2308      	movs	r3, #8
 8000b92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba0:	f000 fdfa 	bl	8001798 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8000ba4:	4b8f      	ldr	r3, [pc, #572]	; (8000de4 <HAL_UART_MspInit+0x2e8>)
 8000ba6:	4a90      	ldr	r2, [pc, #576]	; (8000de8 <HAL_UART_MspInit+0x2ec>)
 8000ba8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8000baa:	4b8e      	ldr	r3, [pc, #568]	; (8000de4 <HAL_UART_MspInit+0x2e8>)
 8000bac:	2202      	movs	r2, #2
 8000bae:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bb0:	4b8c      	ldr	r3, [pc, #560]	; (8000de4 <HAL_UART_MspInit+0x2e8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb6:	4b8b      	ldr	r3, [pc, #556]	; (8000de4 <HAL_UART_MspInit+0x2e8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bbc:	4b89      	ldr	r3, [pc, #548]	; (8000de4 <HAL_UART_MspInit+0x2e8>)
 8000bbe:	2280      	movs	r2, #128	; 0x80
 8000bc0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bc2:	4b88      	ldr	r3, [pc, #544]	; (8000de4 <HAL_UART_MspInit+0x2e8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc8:	4b86      	ldr	r3, [pc, #536]	; (8000de4 <HAL_UART_MspInit+0x2e8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000bce:	4b85      	ldr	r3, [pc, #532]	; (8000de4 <HAL_UART_MspInit+0x2e8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bd4:	4b83      	ldr	r3, [pc, #524]	; (8000de4 <HAL_UART_MspInit+0x2e8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000bda:	4882      	ldr	r0, [pc, #520]	; (8000de4 <HAL_UART_MspInit+0x2e8>)
 8000bdc:	f000 fb66 	bl	80012ac <HAL_DMA_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8000be6:	f7ff ff5f 	bl	8000aa8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a7d      	ldr	r2, [pc, #500]	; (8000de4 <HAL_UART_MspInit+0x2e8>)
 8000bee:	675a      	str	r2, [r3, #116]	; 0x74
 8000bf0:	4a7c      	ldr	r2, [pc, #496]	; (8000de4 <HAL_UART_MspInit+0x2e8>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2034      	movs	r0, #52	; 0x34
 8000bfc:	f000 fb1f 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000c00:	2034      	movs	r0, #52	; 0x34
 8000c02:	f000 fb38 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c06:	e0e5      	b.n	8000dd4 <HAL_UART_MspInit+0x2d8>
  else if(huart->Instance==USART1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a77      	ldr	r2, [pc, #476]	; (8000dec <HAL_UART_MspInit+0x2f0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d16e      	bne.n	8000cf0 <HAL_UART_MspInit+0x1f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c16:	2300      	movs	r3, #0
 8000c18:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 fdfa 	bl	8002818 <HAL_RCCEx_PeriphCLKConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_UART_MspInit+0x132>
      Error_Handler();
 8000c2a:	f7ff ff3d 	bl	8000aa8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c2e:	4b6c      	ldr	r3, [pc, #432]	; (8000de0 <HAL_UART_MspInit+0x2e4>)
 8000c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c32:	4a6b      	ldr	r2, [pc, #428]	; (8000de0 <HAL_UART_MspInit+0x2e4>)
 8000c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c38:	6613      	str	r3, [r2, #96]	; 0x60
 8000c3a:	4b69      	ldr	r3, [pc, #420]	; (8000de0 <HAL_UART_MspInit+0x2e4>)
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b66      	ldr	r3, [pc, #408]	; (8000de0 <HAL_UART_MspInit+0x2e4>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	4a65      	ldr	r2, [pc, #404]	; (8000de0 <HAL_UART_MspInit+0x2e4>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c52:	4b63      	ldr	r3, [pc, #396]	; (8000de0 <HAL_UART_MspInit+0x2e4>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c78:	2307      	movs	r3, #7
 8000c7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c82:	4619      	mov	r1, r3
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c88:	f000 fd86 	bl	8001798 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000c8c:	4b58      	ldr	r3, [pc, #352]	; (8000df0 <HAL_UART_MspInit+0x2f4>)
 8000c8e:	4a59      	ldr	r2, [pc, #356]	; (8000df4 <HAL_UART_MspInit+0x2f8>)
 8000c90:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000c92:	4b57      	ldr	r3, [pc, #348]	; (8000df0 <HAL_UART_MspInit+0x2f4>)
 8000c94:	2202      	movs	r2, #2
 8000c96:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c98:	4b55      	ldr	r3, [pc, #340]	; (8000df0 <HAL_UART_MspInit+0x2f4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c9e:	4b54      	ldr	r3, [pc, #336]	; (8000df0 <HAL_UART_MspInit+0x2f4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca4:	4b52      	ldr	r3, [pc, #328]	; (8000df0 <HAL_UART_MspInit+0x2f4>)
 8000ca6:	2280      	movs	r2, #128	; 0x80
 8000ca8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000caa:	4b51      	ldr	r3, [pc, #324]	; (8000df0 <HAL_UART_MspInit+0x2f4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb0:	4b4f      	ldr	r3, [pc, #316]	; (8000df0 <HAL_UART_MspInit+0x2f4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000cb6:	4b4e      	ldr	r3, [pc, #312]	; (8000df0 <HAL_UART_MspInit+0x2f4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cbc:	4b4c      	ldr	r3, [pc, #304]	; (8000df0 <HAL_UART_MspInit+0x2f4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000cc2:	484b      	ldr	r0, [pc, #300]	; (8000df0 <HAL_UART_MspInit+0x2f4>)
 8000cc4:	f000 faf2 	bl	80012ac <HAL_DMA_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 8000cce:	f7ff feeb 	bl	8000aa8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a46      	ldr	r2, [pc, #280]	; (8000df0 <HAL_UART_MspInit+0x2f4>)
 8000cd6:	675a      	str	r2, [r3, #116]	; 0x74
 8000cd8:	4a45      	ldr	r2, [pc, #276]	; (8000df0 <HAL_UART_MspInit+0x2f4>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2025      	movs	r0, #37	; 0x25
 8000ce4:	f000 faab 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ce8:	2025      	movs	r0, #37	; 0x25
 8000cea:	f000 fac4 	bl	8001276 <HAL_NVIC_EnableIRQ>
}
 8000cee:	e071      	b.n	8000dd4 <HAL_UART_MspInit+0x2d8>
  else if(huart->Instance==USART2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a40      	ldr	r2, [pc, #256]	; (8000df8 <HAL_UART_MspInit+0x2fc>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d16c      	bne.n	8000dd4 <HAL_UART_MspInit+0x2d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 fd86 	bl	8002818 <HAL_RCCEx_PeriphCLKConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_UART_MspInit+0x21a>
      Error_Handler();
 8000d12:	f7ff fec9 	bl	8000aa8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d16:	4b32      	ldr	r3, [pc, #200]	; (8000de0 <HAL_UART_MspInit+0x2e4>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1a:	4a31      	ldr	r2, [pc, #196]	; (8000de0 <HAL_UART_MspInit+0x2e4>)
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d20:	6593      	str	r3, [r2, #88]	; 0x58
 8000d22:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <HAL_UART_MspInit+0x2e4>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <HAL_UART_MspInit+0x2e4>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	4a2b      	ldr	r2, [pc, #172]	; (8000de0 <HAL_UART_MspInit+0x2e4>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3a:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <HAL_UART_MspInit+0x2e4>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d46:	230c      	movs	r3, #12
 8000d48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d5e:	2307      	movs	r3, #7
 8000d60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6e:	f000 fd13 	bl	8001798 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000d72:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <HAL_UART_MspInit+0x300>)
 8000d74:	4a22      	ldr	r2, [pc, #136]	; (8000e00 <HAL_UART_MspInit+0x304>)
 8000d76:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000d78:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <HAL_UART_MspInit+0x300>)
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <HAL_UART_MspInit+0x300>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d84:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <HAL_UART_MspInit+0x300>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <HAL_UART_MspInit+0x300>)
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d90:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <HAL_UART_MspInit+0x300>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <HAL_UART_MspInit+0x300>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <HAL_UART_MspInit+0x300>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <HAL_UART_MspInit+0x300>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000da8:	4814      	ldr	r0, [pc, #80]	; (8000dfc <HAL_UART_MspInit+0x300>)
 8000daa:	f000 fa7f 	bl	80012ac <HAL_DMA_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_UART_MspInit+0x2bc>
      Error_Handler();
 8000db4:	f7ff fe78 	bl	8000aa8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <HAL_UART_MspInit+0x300>)
 8000dbc:	675a      	str	r2, [r3, #116]	; 0x74
 8000dbe:	4a0f      	ldr	r2, [pc, #60]	; (8000dfc <HAL_UART_MspInit+0x300>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2026      	movs	r0, #38	; 0x26
 8000dca:	f000 fa38 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dce:	2026      	movs	r0, #38	; 0x26
 8000dd0:	f000 fa51 	bl	8001276 <HAL_NVIC_EnableIRQ>
}
 8000dd4:	bf00      	nop
 8000dd6:	37c0      	adds	r7, #192	; 0xc0
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40004c00 	.word	0x40004c00
 8000de0:	40021000 	.word	0x40021000
 8000de4:	200001c8 	.word	0x200001c8
 8000de8:	40020458 	.word	0x40020458
 8000dec:	40013800 	.word	0x40013800
 8000df0:	20000210 	.word	0x20000210
 8000df4:	40020058 	.word	0x40020058
 8000df8:	40004400 	.word	0x40004400
 8000dfc:	20000258 	.word	0x20000258
 8000e00:	4002006c 	.word	0x4002006c

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e50:	f000 f8d6 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <DMA1_Channel5_IRQHandler+0x10>)
 8000e5e:	f000 fbbc 	bl	80015da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000210 	.word	0x20000210

08000e6c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <DMA1_Channel6_IRQHandler+0x10>)
 8000e72:	f000 fbb2 	bl	80015da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000258 	.word	0x20000258

08000e80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <USART1_IRQHandler+0x10>)
 8000e86:	f002 fa5b 	bl	8003340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200000b8 	.word	0x200000b8

08000e94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <USART2_IRQHandler+0x10>)
 8000e9a:	f002 fa51 	bl	8003340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000140 	.word	0x20000140

08000ea8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <UART4_IRQHandler+0x10>)
 8000eae:	f002 fa47 	bl	8003340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000030 	.word	0x20000030

08000ebc <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <DMA2_Channel5_IRQHandler+0x10>)
 8000ec2:	f000 fb8a 	bl	80015da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200001c8 	.word	0x200001c8

08000ed0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <SystemInit+0x20>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <SystemInit+0x20>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ef8:	f7ff ffea 	bl	8000ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000efe:	490d      	ldr	r1, [pc, #52]	; (8000f34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <LoopForever+0xe>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f14:	4c0a      	ldr	r4, [pc, #40]	; (8000f40 <LoopForever+0x16>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f22:	f003 fc4d 	bl	80047c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f26:	f7ff fbbf 	bl	80006a8 <main>

08000f2a <LoopForever>:

LoopForever:
    b LoopForever
 8000f2a:	e7fe      	b.n	8000f2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f34:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f38:	080048dc 	.word	0x080048dc
  ldr r2, =_sbss
 8000f3c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f40:	20000434 	.word	0x20000434

08000f44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <ADC1_2_IRQHandler>
	...

08000f48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_Init+0x3c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <HAL_Init+0x3c>)
 8000f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5e:	2003      	movs	r0, #3
 8000f60:	f000 f962 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f64:	2000      	movs	r0, #0
 8000f66:	f000 f80f 	bl	8000f88 <HAL_InitTick>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	71fb      	strb	r3, [r7, #7]
 8000f74:	e001      	b.n	8000f7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f76:	f7ff fd9d 	bl	8000ab4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40022000 	.word	0x40022000

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_InitTick+0x6c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d023      	beq.n	8000fe4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_InitTick+0x70>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_InitTick+0x6c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f96d 	bl	8001292 <HAL_SYSTICK_Config>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10f      	bne.n	8000fde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d809      	bhi.n	8000fd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f000 f937 	bl	800123e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <HAL_InitTick+0x74>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	e007      	b.n	8000fe8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e004      	b.n	8000fe8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	e001      	b.n	8000fe8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000010 	.word	0x20000010
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	2000000c 	.word	0x2000000c

08001000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000010 	.word	0x20000010
 8001024:	20000430 	.word	0x20000430

08001028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000430 	.word	0x20000430

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff ffee 	bl	8001028 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_Delay+0x44>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001066:	bf00      	nop
 8001068:	f7ff ffde 	bl	8001028 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000010 	.word	0x20000010

08001088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db0b      	blt.n	8001116 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	4907      	ldr	r1, [pc, #28]	; (8001124 <__NVIC_EnableIRQ+0x38>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	2001      	movs	r0, #1
 800110e:	fa00 f202 	lsl.w	r2, r0, r2
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000e100 	.word	0xe000e100

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	; (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	; (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f4:	d301      	bcc.n	80011fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00f      	b.n	800121a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <SysTick_Config+0x40>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001202:	210f      	movs	r1, #15
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f7ff ff8e 	bl	8001128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <SysTick_Config+0x40>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SysTick_Config+0x40>)
 8001214:	2207      	movs	r2, #7
 8001216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	e000e010 	.word	0xe000e010

08001228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff29 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001250:	f7ff ff3e 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 8001254:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff ff8e 	bl	800117c <NVIC_EncodePriority>
 8001260:	4602      	mov	r2, r0
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff5d 	bl	8001128 <__NVIC_SetPriority>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff31 	bl	80010ec <__NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffa2 	bl	80011e4 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e098      	b.n	80013f0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b4d      	ldr	r3, [pc, #308]	; (80013fc <HAL_DMA_Init+0x150>)
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d80f      	bhi.n	80012ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <HAL_DMA_Init+0x154>)
 80012d2:	4413      	add	r3, r2
 80012d4:	4a4b      	ldr	r2, [pc, #300]	; (8001404 <HAL_DMA_Init+0x158>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	009a      	lsls	r2, r3, #2
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a48      	ldr	r2, [pc, #288]	; (8001408 <HAL_DMA_Init+0x15c>)
 80012e6:	641a      	str	r2, [r3, #64]	; 0x40
 80012e8:	e00e      	b.n	8001308 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b46      	ldr	r3, [pc, #280]	; (800140c <HAL_DMA_Init+0x160>)
 80012f2:	4413      	add	r3, r2
 80012f4:	4a43      	ldr	r2, [pc, #268]	; (8001404 <HAL_DMA_Init+0x158>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	009a      	lsls	r2, r3, #2
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a42      	ldr	r2, [pc, #264]	; (8001410 <HAL_DMA_Init+0x164>)
 8001306:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2202      	movs	r2, #2
 800130c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800131e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001322:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800132c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001338:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001344:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001362:	d039      	beq.n	80013d8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	4a27      	ldr	r2, [pc, #156]	; (8001408 <HAL_DMA_Init+0x15c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d11a      	bne.n	80013a4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800136e:	4b29      	ldr	r3, [pc, #164]	; (8001414 <HAL_DMA_Init+0x168>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f003 031c 	and.w	r3, r3, #28
 800137a:	210f      	movs	r1, #15
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	4924      	ldr	r1, [pc, #144]	; (8001414 <HAL_DMA_Init+0x168>)
 8001384:	4013      	ands	r3, r2
 8001386:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001388:	4b22      	ldr	r3, [pc, #136]	; (8001414 <HAL_DMA_Init+0x168>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6859      	ldr	r1, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	f003 031c 	and.w	r3, r3, #28
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	491d      	ldr	r1, [pc, #116]	; (8001414 <HAL_DMA_Init+0x168>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
 80013a2:	e019      	b.n	80013d8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80013a4:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <HAL_DMA_Init+0x16c>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ac:	f003 031c 	and.w	r3, r3, #28
 80013b0:	210f      	movs	r1, #15
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	4917      	ldr	r1, [pc, #92]	; (8001418 <HAL_DMA_Init+0x16c>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <HAL_DMA_Init+0x16c>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6859      	ldr	r1, [r3, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f003 031c 	and.w	r3, r3, #28
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	4911      	ldr	r1, [pc, #68]	; (8001418 <HAL_DMA_Init+0x16c>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	40020407 	.word	0x40020407
 8001400:	bffdfff8 	.word	0xbffdfff8
 8001404:	cccccccd 	.word	0xcccccccd
 8001408:	40020000 	.word	0x40020000
 800140c:	bffdfbf8 	.word	0xbffdfbf8
 8001410:	40020400 	.word	0x40020400
 8001414:	400200a8 	.word	0x400200a8
 8001418:	400204a8 	.word	0x400204a8

0800141c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_DMA_Start_IT+0x20>
 8001438:	2302      	movs	r3, #2
 800143a:	e04b      	b.n	80014d4 <HAL_DMA_Start_IT+0xb8>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b01      	cmp	r3, #1
 800144e:	d13a      	bne.n	80014c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2202      	movs	r2, #2
 8001454:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2200      	movs	r2, #0
 800145c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0201 	bic.w	r2, r2, #1
 800146c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	68b9      	ldr	r1, [r7, #8]
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f000 f95f 	bl	8001738 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	2b00      	cmp	r3, #0
 8001480:	d008      	beq.n	8001494 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 020e 	orr.w	r2, r2, #14
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	e00f      	b.n	80014b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0204 	bic.w	r2, r2, #4
 80014a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 020a 	orr.w	r2, r2, #10
 80014b2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0201 	orr.w	r2, r2, #1
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	e005      	b.n	80014d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80014ce:	2302      	movs	r3, #2
 80014d0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80014d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d008      	beq.n	8001506 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2204      	movs	r2, #4
 80014f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e022      	b.n	800154c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 020e 	bic.w	r2, r2, #14
 8001514:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0201 	bic.w	r2, r2, #1
 8001524:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f003 021c 	and.w	r2, r3, #28
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	2101      	movs	r1, #1
 8001534:	fa01 f202 	lsl.w	r2, r1, r2
 8001538:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d005      	beq.n	800157c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2204      	movs	r2, #4
 8001574:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
 800157a:	e029      	b.n	80015d0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 020e 	bic.w	r2, r2, #14
 800158a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0201 	bic.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a0:	f003 021c 	and.w	r2, r3, #28
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	2101      	movs	r1, #1
 80015aa:	fa01 f202 	lsl.w	r2, r1, r2
 80015ae:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	4798      	blx	r3
    }
  }
  return status;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b084      	sub	sp, #16
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f003 031c 	and.w	r3, r3, #28
 80015fa:	2204      	movs	r2, #4
 80015fc:	409a      	lsls	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4013      	ands	r3, r2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d026      	beq.n	8001654 <HAL_DMA_IRQHandler+0x7a>
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d021      	beq.n	8001654 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0320 	and.w	r3, r3, #32
 800161a:	2b00      	cmp	r3, #0
 800161c:	d107      	bne.n	800162e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0204 	bic.w	r2, r2, #4
 800162c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f003 021c 	and.w	r2, r3, #28
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	2104      	movs	r1, #4
 800163c:	fa01 f202 	lsl.w	r2, r1, r2
 8001640:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	2b00      	cmp	r3, #0
 8001648:	d071      	beq.n	800172e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001652:	e06c      	b.n	800172e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	f003 031c 	and.w	r3, r3, #28
 800165c:	2202      	movs	r2, #2
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d02e      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xec>
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d029      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0320 	and.w	r3, r3, #32
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10b      	bne.n	8001698 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 020a 	bic.w	r2, r2, #10
 800168e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	f003 021c 	and.w	r2, r3, #28
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	2102      	movs	r1, #2
 80016a6:	fa01 f202 	lsl.w	r2, r1, r2
 80016aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d038      	beq.n	800172e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016c4:	e033      	b.n	800172e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	f003 031c 	and.w	r3, r3, #28
 80016ce:	2208      	movs	r2, #8
 80016d0:	409a      	lsls	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d02a      	beq.n	8001730 <HAL_DMA_IRQHandler+0x156>
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d025      	beq.n	8001730 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 020e 	bic.w	r2, r2, #14
 80016f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	f003 021c 	and.w	r2, r3, #28
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	2101      	movs	r1, #1
 8001702:	fa01 f202 	lsl.w	r2, r1, r2
 8001706:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001722:	2b00      	cmp	r3, #0
 8001724:	d004      	beq.n	8001730 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800172e:	bf00      	nop
 8001730:	bf00      	nop
}
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f003 021c 	and.w	r2, r3, #28
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	2101      	movs	r1, #1
 8001754:	fa01 f202 	lsl.w	r2, r1, r2
 8001758:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b10      	cmp	r3, #16
 8001768:	d108      	bne.n	800177c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800177a:	e007      	b.n	800178c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	60da      	str	r2, [r3, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a6:	e17f      	b.n	8001aa8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2101      	movs	r1, #1
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	4013      	ands	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8171 	beq.w	8001aa2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d005      	beq.n	80017d8 <HAL_GPIO_Init+0x40>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d130      	bne.n	800183a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800180e:	2201      	movs	r2, #1
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	f003 0201 	and.w	r2, r3, #1
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b03      	cmp	r3, #3
 8001844:	d118      	bne.n	8001878 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800184c:	2201      	movs	r2, #1
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	08db      	lsrs	r3, r3, #3
 8001862:	f003 0201 	and.w	r2, r3, #1
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b03      	cmp	r3, #3
 8001882:	d017      	beq.n	80018b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d123      	bne.n	8001908 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	08da      	lsrs	r2, r3, #3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3208      	adds	r2, #8
 80018c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	220f      	movs	r2, #15
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	691a      	ldr	r2, [r3, #16]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	08da      	lsrs	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3208      	adds	r2, #8
 8001902:	6939      	ldr	r1, [r7, #16]
 8001904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2203      	movs	r2, #3
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0203 	and.w	r2, r3, #3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80ac 	beq.w	8001aa2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194a:	4b5f      	ldr	r3, [pc, #380]	; (8001ac8 <HAL_GPIO_Init+0x330>)
 800194c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194e:	4a5e      	ldr	r2, [pc, #376]	; (8001ac8 <HAL_GPIO_Init+0x330>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6613      	str	r3, [r2, #96]	; 0x60
 8001956:	4b5c      	ldr	r3, [pc, #368]	; (8001ac8 <HAL_GPIO_Init+0x330>)
 8001958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001962:	4a5a      	ldr	r2, [pc, #360]	; (8001acc <HAL_GPIO_Init+0x334>)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	3302      	adds	r3, #2
 800196a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	220f      	movs	r2, #15
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800198c:	d025      	beq.n	80019da <HAL_GPIO_Init+0x242>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4f      	ldr	r2, [pc, #316]	; (8001ad0 <HAL_GPIO_Init+0x338>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d01f      	beq.n	80019d6 <HAL_GPIO_Init+0x23e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4e      	ldr	r2, [pc, #312]	; (8001ad4 <HAL_GPIO_Init+0x33c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d019      	beq.n	80019d2 <HAL_GPIO_Init+0x23a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4d      	ldr	r2, [pc, #308]	; (8001ad8 <HAL_GPIO_Init+0x340>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d013      	beq.n	80019ce <HAL_GPIO_Init+0x236>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4c      	ldr	r2, [pc, #304]	; (8001adc <HAL_GPIO_Init+0x344>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d00d      	beq.n	80019ca <HAL_GPIO_Init+0x232>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4b      	ldr	r2, [pc, #300]	; (8001ae0 <HAL_GPIO_Init+0x348>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d007      	beq.n	80019c6 <HAL_GPIO_Init+0x22e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4a      	ldr	r2, [pc, #296]	; (8001ae4 <HAL_GPIO_Init+0x34c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d101      	bne.n	80019c2 <HAL_GPIO_Init+0x22a>
 80019be:	2306      	movs	r3, #6
 80019c0:	e00c      	b.n	80019dc <HAL_GPIO_Init+0x244>
 80019c2:	2307      	movs	r3, #7
 80019c4:	e00a      	b.n	80019dc <HAL_GPIO_Init+0x244>
 80019c6:	2305      	movs	r3, #5
 80019c8:	e008      	b.n	80019dc <HAL_GPIO_Init+0x244>
 80019ca:	2304      	movs	r3, #4
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x244>
 80019ce:	2303      	movs	r3, #3
 80019d0:	e004      	b.n	80019dc <HAL_GPIO_Init+0x244>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e002      	b.n	80019dc <HAL_GPIO_Init+0x244>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <HAL_GPIO_Init+0x244>
 80019da:	2300      	movs	r3, #0
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	f002 0203 	and.w	r2, r2, #3
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	4093      	lsls	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019ec:	4937      	ldr	r1, [pc, #220]	; (8001acc <HAL_GPIO_Init+0x334>)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019fa:	4b3b      	ldr	r3, [pc, #236]	; (8001ae8 <HAL_GPIO_Init+0x350>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a1e:	4a32      	ldr	r2, [pc, #200]	; (8001ae8 <HAL_GPIO_Init+0x350>)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a24:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <HAL_GPIO_Init+0x350>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a48:	4a27      	ldr	r2, [pc, #156]	; (8001ae8 <HAL_GPIO_Init+0x350>)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a4e:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <HAL_GPIO_Init+0x350>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a72:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <HAL_GPIO_Init+0x350>)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a78:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <HAL_GPIO_Init+0x350>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a9c:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <HAL_GPIO_Init+0x350>)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f47f ae78 	bne.w	80017a8 <HAL_GPIO_Init+0x10>
  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	371c      	adds	r7, #28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40010000 	.word	0x40010000
 8001ad0:	48000400 	.word	0x48000400
 8001ad4:	48000800 	.word	0x48000800
 8001ad8:	48000c00 	.word	0x48000c00
 8001adc:	48001000 	.word	0x48001000
 8001ae0:	48001400 	.word	0x48001400
 8001ae4:	48001800 	.word	0x48001800
 8001ae8:	40010400 	.word	0x40010400

08001aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
 8001af8:	4613      	mov	r3, r2
 8001afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001afc:	787b      	ldrb	r3, [r7, #1]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b0a:	887a      	ldrh	r2, [r7, #2]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4013      	ands	r3, r2
 8001b34:	041a      	lsls	r2, r3, #16
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	43d9      	mvns	r1, r3
 8001b3a:	887b      	ldrh	r3, [r7, #2]
 8001b3c:	400b      	ands	r3, r1
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	619a      	str	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40007000 	.word	0x40007000

08001b6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b7a:	d130      	bne.n	8001bde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b88:	d038      	beq.n	8001bfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b92:	4a1e      	ldr	r2, [pc, #120]	; (8001c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2232      	movs	r2, #50	; 0x32
 8001ba0:	fb02 f303 	mul.w	r3, r2, r3
 8001ba4:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8001baa:	0c9b      	lsrs	r3, r3, #18
 8001bac:	3301      	adds	r3, #1
 8001bae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bb0:	e002      	b.n	8001bb8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc4:	d102      	bne.n	8001bcc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f2      	bne.n	8001bb2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd8:	d110      	bne.n	8001bfc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e00f      	b.n	8001bfe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bea:	d007      	beq.n	8001bfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bec:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bf4:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bfa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40007000 	.word	0x40007000
 8001c10:	20000008 	.word	0x20000008
 8001c14:	431bde83 	.word	0x431bde83

08001c18 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e3ca      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2a:	4b97      	ldr	r3, [pc, #604]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c34:	4b94      	ldr	r3, [pc, #592]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 80e4 	beq.w	8001e14 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d007      	beq.n	8001c62 <HAL_RCC_OscConfig+0x4a>
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	2b0c      	cmp	r3, #12
 8001c56:	f040 808b 	bne.w	8001d70 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	f040 8087 	bne.w	8001d70 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c62:	4b89      	ldr	r3, [pc, #548]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <HAL_RCC_OscConfig+0x62>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e3a2      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1a      	ldr	r2, [r3, #32]
 8001c7e:	4b82      	ldr	r3, [pc, #520]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d004      	beq.n	8001c94 <HAL_RCC_OscConfig+0x7c>
 8001c8a:	4b7f      	ldr	r3, [pc, #508]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c92:	e005      	b.n	8001ca0 <HAL_RCC_OscConfig+0x88>
 8001c94:	4b7c      	ldr	r3, [pc, #496]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c9a:	091b      	lsrs	r3, r3, #4
 8001c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d223      	bcs.n	8001cec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 fd55 	bl	8002758 <RCC_SetFlashLatencyFromMSIRange>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e383      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb8:	4b73      	ldr	r3, [pc, #460]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a72      	ldr	r2, [pc, #456]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001cbe:	f043 0308 	orr.w	r3, r3, #8
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	4b70      	ldr	r3, [pc, #448]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	496d      	ldr	r1, [pc, #436]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cd6:	4b6c      	ldr	r3, [pc, #432]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	4968      	ldr	r1, [pc, #416]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	604b      	str	r3, [r1, #4]
 8001cea:	e025      	b.n	8001d38 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cec:	4b66      	ldr	r3, [pc, #408]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a65      	ldr	r2, [pc, #404]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001cf2:	f043 0308 	orr.w	r3, r3, #8
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b63      	ldr	r3, [pc, #396]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	4960      	ldr	r1, [pc, #384]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d0a:	4b5f      	ldr	r3, [pc, #380]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	021b      	lsls	r3, r3, #8
 8001d18:	495b      	ldr	r1, [pc, #364]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d109      	bne.n	8001d38 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 fd15 	bl	8002758 <RCC_SetFlashLatencyFromMSIRange>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e343      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d38:	f000 fc4a 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b52      	ldr	r3, [pc, #328]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	4950      	ldr	r1, [pc, #320]	; (8001e8c <HAL_RCC_OscConfig+0x274>)
 8001d4a:	5ccb      	ldrb	r3, [r1, r3]
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
 8001d54:	4a4e      	ldr	r2, [pc, #312]	; (8001e90 <HAL_RCC_OscConfig+0x278>)
 8001d56:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d58:	4b4e      	ldr	r3, [pc, #312]	; (8001e94 <HAL_RCC_OscConfig+0x27c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff f913 	bl	8000f88 <HAL_InitTick>
 8001d62:	4603      	mov	r3, r0
 8001d64:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d052      	beq.n	8001e12 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	e327      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d032      	beq.n	8001dde <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d78:	4b43      	ldr	r3, [pc, #268]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a42      	ldr	r2, [pc, #264]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d84:	f7ff f950 	bl	8001028 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d8c:	f7ff f94c 	bl	8001028 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e310      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d9e:	4b3a      	ldr	r3, [pc, #232]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001daa:	4b37      	ldr	r3, [pc, #220]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a36      	ldr	r2, [pc, #216]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001db0:	f043 0308 	orr.w	r3, r3, #8
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4931      	ldr	r1, [pc, #196]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	492c      	ldr	r1, [pc, #176]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
 8001ddc:	e01a      	b.n	8001e14 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dde:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a29      	ldr	r2, [pc, #164]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dea:	f7ff f91d 	bl	8001028 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001df2:	f7ff f919 	bl	8001028 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e2dd      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e04:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x1da>
 8001e10:	e000      	b.n	8001e14 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e12:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d074      	beq.n	8001f0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d005      	beq.n	8001e32 <HAL_RCC_OscConfig+0x21a>
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b0c      	cmp	r3, #12
 8001e2a:	d10e      	bne.n	8001e4a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d10b      	bne.n	8001e4a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d064      	beq.n	8001f08 <HAL_RCC_OscConfig+0x2f0>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d160      	bne.n	8001f08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e2ba      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e52:	d106      	bne.n	8001e62 <HAL_RCC_OscConfig+0x24a>
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	e026      	b.n	8001eb0 <HAL_RCC_OscConfig+0x298>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e6a:	d115      	bne.n	8001e98 <HAL_RCC_OscConfig+0x280>
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001e72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a02      	ldr	r2, [pc, #8]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	e014      	b.n	8001eb0 <HAL_RCC_OscConfig+0x298>
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	08004884 	.word	0x08004884
 8001e90:	20000008 	.word	0x20000008
 8001e94:	2000000c 	.word	0x2000000c
 8001e98:	4ba0      	ldr	r3, [pc, #640]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a9f      	ldr	r2, [pc, #636]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b9d      	ldr	r3, [pc, #628]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a9c      	ldr	r2, [pc, #624]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d013      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f8b6 	bl	8001028 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff f8b2 	bl	8001028 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e276      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed2:	4b92      	ldr	r3, [pc, #584]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x2a8>
 8001ede:	e014      	b.n	8001f0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff f8a2 	bl	8001028 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff f89e 	bl	8001028 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e262      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001efa:	4b88      	ldr	r3, [pc, #544]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x2d0>
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d060      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_OscConfig+0x310>
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2b0c      	cmp	r3, #12
 8001f20:	d119      	bne.n	8001f56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d116      	bne.n	8001f56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f28:	4b7c      	ldr	r3, [pc, #496]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_OscConfig+0x328>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e23f      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f40:	4b76      	ldr	r3, [pc, #472]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	061b      	lsls	r3, r3, #24
 8001f4e:	4973      	ldr	r1, [pc, #460]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f54:	e040      	b.n	8001fd8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d023      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f5e:	4b6f      	ldr	r3, [pc, #444]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a6e      	ldr	r2, [pc, #440]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6a:	f7ff f85d 	bl	8001028 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f72:	f7ff f859 	bl	8001028 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e21d      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f84:	4b65      	ldr	r3, [pc, #404]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f90:	4b62      	ldr	r3, [pc, #392]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	061b      	lsls	r3, r3, #24
 8001f9e:	495f      	ldr	r1, [pc, #380]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
 8001fa4:	e018      	b.n	8001fd8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a5c      	ldr	r2, [pc, #368]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb2:	f7ff f839 	bl	8001028 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fba:	f7ff f835 	bl	8001028 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e1f9      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fcc:	4b53      	ldr	r3, [pc, #332]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f0      	bne.n	8001fba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d03c      	beq.n	800205e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01c      	beq.n	8002026 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fec:	4b4b      	ldr	r3, [pc, #300]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff2:	4a4a      	ldr	r2, [pc, #296]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7ff f814 	bl	8001028 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002004:	f7ff f810 	bl	8001028 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e1d4      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002016:	4b41      	ldr	r3, [pc, #260]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8002018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ef      	beq.n	8002004 <HAL_RCC_OscConfig+0x3ec>
 8002024:	e01b      	b.n	800205e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002026:	4b3d      	ldr	r3, [pc, #244]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8002028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202c:	4a3b      	ldr	r2, [pc, #236]	; (800211c <HAL_RCC_OscConfig+0x504>)
 800202e:	f023 0301 	bic.w	r3, r3, #1
 8002032:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002036:	f7fe fff7 	bl	8001028 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203e:	f7fe fff3 	bl	8001028 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e1b7      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002050:	4b32      	ldr	r3, [pc, #200]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8002052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1ef      	bne.n	800203e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 80a6 	beq.w	80021b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206c:	2300      	movs	r3, #0
 800206e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002070:	4b2a      	ldr	r3, [pc, #168]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10d      	bne.n	8002098 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <HAL_RCC_OscConfig+0x504>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	4a26      	ldr	r2, [pc, #152]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8002082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002086:	6593      	str	r3, [r2, #88]	; 0x58
 8002088:	4b24      	ldr	r3, [pc, #144]	; (800211c <HAL_RCC_OscConfig+0x504>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002094:	2301      	movs	r3, #1
 8002096:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002098:	4b21      	ldr	r3, [pc, #132]	; (8002120 <HAL_RCC_OscConfig+0x508>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d118      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a4:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <HAL_RCC_OscConfig+0x508>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1d      	ldr	r2, [pc, #116]	; (8002120 <HAL_RCC_OscConfig+0x508>)
 80020aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b0:	f7fe ffba 	bl	8001028 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b8:	f7fe ffb6 	bl	8001028 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e17a      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_RCC_OscConfig+0x508>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d108      	bne.n	80020f0 <HAL_RCC_OscConfig+0x4d8>
 80020de:	4b0f      	ldr	r3, [pc, #60]	; (800211c <HAL_RCC_OscConfig+0x504>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e4:	4a0d      	ldr	r2, [pc, #52]	; (800211c <HAL_RCC_OscConfig+0x504>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ee:	e029      	b.n	8002144 <HAL_RCC_OscConfig+0x52c>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b05      	cmp	r3, #5
 80020f6:	d115      	bne.n	8002124 <HAL_RCC_OscConfig+0x50c>
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <HAL_RCC_OscConfig+0x504>)
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fe:	4a07      	ldr	r2, [pc, #28]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <HAL_RCC_OscConfig+0x504>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210e:	4a03      	ldr	r2, [pc, #12]	; (800211c <HAL_RCC_OscConfig+0x504>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002118:	e014      	b.n	8002144 <HAL_RCC_OscConfig+0x52c>
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000
 8002120:	40007000 	.word	0x40007000
 8002124:	4b9c      	ldr	r3, [pc, #624]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	4a9b      	ldr	r2, [pc, #620]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 800212c:	f023 0301 	bic.w	r3, r3, #1
 8002130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002134:	4b98      	ldr	r3, [pc, #608]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	4a97      	ldr	r2, [pc, #604]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 800213c:	f023 0304 	bic.w	r3, r3, #4
 8002140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d016      	beq.n	800217a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7fe ff6c 	bl	8001028 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002152:	e00a      	b.n	800216a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002154:	f7fe ff68 	bl	8001028 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e12a      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800216a:	4b8b      	ldr	r3, [pc, #556]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0ed      	beq.n	8002154 <HAL_RCC_OscConfig+0x53c>
 8002178:	e015      	b.n	80021a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217a:	f7fe ff55 	bl	8001028 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002180:	e00a      	b.n	8002198 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002182:	f7fe ff51 	bl	8001028 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e113      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002198:	4b7f      	ldr	r3, [pc, #508]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1ed      	bne.n	8002182 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021a6:	7ffb      	ldrb	r3, [r7, #31]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d105      	bne.n	80021b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ac:	4b7a      	ldr	r3, [pc, #488]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	4a79      	ldr	r2, [pc, #484]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 80021b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80fe 	beq.w	80023be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	f040 80d0 	bne.w	800236c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021cc:	4b72      	ldr	r3, [pc, #456]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f003 0203 	and.w	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021dc:	429a      	cmp	r2, r3
 80021de:	d130      	bne.n	8002242 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	3b01      	subs	r3, #1
 80021ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d127      	bne.n	8002242 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d11f      	bne.n	8002242 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800220c:	2a07      	cmp	r2, #7
 800220e:	bf14      	ite	ne
 8002210:	2201      	movne	r2, #1
 8002212:	2200      	moveq	r2, #0
 8002214:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002216:	4293      	cmp	r3, r2
 8002218:	d113      	bne.n	8002242 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002224:	085b      	lsrs	r3, r3, #1
 8002226:	3b01      	subs	r3, #1
 8002228:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800222a:	429a      	cmp	r2, r3
 800222c:	d109      	bne.n	8002242 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	085b      	lsrs	r3, r3, #1
 800223a:	3b01      	subs	r3, #1
 800223c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d06e      	beq.n	8002320 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	2b0c      	cmp	r3, #12
 8002246:	d069      	beq.n	800231c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002248:	4b53      	ldr	r3, [pc, #332]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d105      	bne.n	8002260 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002254:	4b50      	ldr	r3, [pc, #320]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0ad      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002264:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a4b      	ldr	r2, [pc, #300]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 800226a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800226e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002270:	f7fe feda 	bl	8001028 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002278:	f7fe fed6 	bl	8001028 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e09a      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800228a:	4b43      	ldr	r3, [pc, #268]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002296:	4b40      	ldr	r3, [pc, #256]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	4b40      	ldr	r3, [pc, #256]	; (800239c <HAL_RCC_OscConfig+0x784>)
 800229c:	4013      	ands	r3, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022a6:	3a01      	subs	r2, #1
 80022a8:	0112      	lsls	r2, r2, #4
 80022aa:	4311      	orrs	r1, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022b0:	0212      	lsls	r2, r2, #8
 80022b2:	4311      	orrs	r1, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022b8:	0852      	lsrs	r2, r2, #1
 80022ba:	3a01      	subs	r2, #1
 80022bc:	0552      	lsls	r2, r2, #21
 80022be:	4311      	orrs	r1, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022c4:	0852      	lsrs	r2, r2, #1
 80022c6:	3a01      	subs	r2, #1
 80022c8:	0652      	lsls	r2, r2, #25
 80022ca:	4311      	orrs	r1, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022d0:	0912      	lsrs	r2, r2, #4
 80022d2:	0452      	lsls	r2, r2, #17
 80022d4:	430a      	orrs	r2, r1
 80022d6:	4930      	ldr	r1, [pc, #192]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022dc:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a2d      	ldr	r2, [pc, #180]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 80022e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022e8:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4a2a      	ldr	r2, [pc, #168]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 80022ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022f4:	f7fe fe98 	bl	8001028 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fc:	f7fe fe94 	bl	8001028 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e058      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230e:	4b22      	ldr	r3, [pc, #136]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800231a:	e050      	b.n	80023be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e04f      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002320:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d148      	bne.n	80023be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800232c:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a19      	ldr	r2, [pc, #100]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 8002332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002336:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002338:	4b17      	ldr	r3, [pc, #92]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a16      	ldr	r2, [pc, #88]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 800233e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002342:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002344:	f7fe fe70 	bl	8001028 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe fe6c 	bl	8001028 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e030      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x734>
 800236a:	e028      	b.n	80023be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2b0c      	cmp	r3, #12
 8002370:	d023      	beq.n	80023ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a08      	ldr	r2, [pc, #32]	; (8002398 <HAL_RCC_OscConfig+0x780>)
 8002378:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800237c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7fe fe53 	bl	8001028 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002384:	e00c      	b.n	80023a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002386:	f7fe fe4f 	bl	8001028 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d905      	bls.n	80023a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e013      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
 8002398:	40021000 	.word	0x40021000
 800239c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_RCC_OscConfig+0x7b0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1ec      	bne.n	8002386 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_RCC_OscConfig+0x7b0>)
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	4905      	ldr	r1, [pc, #20]	; (80023c8 <HAL_RCC_OscConfig+0x7b0>)
 80023b2:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_RCC_OscConfig+0x7b4>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	60cb      	str	r3, [r1, #12]
 80023b8:	e001      	b.n	80023be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3720      	adds	r7, #32
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000
 80023cc:	feeefffc 	.word	0xfeeefffc

080023d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0e7      	b.n	80025b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023e4:	4b75      	ldr	r3, [pc, #468]	; (80025bc <HAL_RCC_ClockConfig+0x1ec>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d910      	bls.n	8002414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b72      	ldr	r3, [pc, #456]	; (80025bc <HAL_RCC_ClockConfig+0x1ec>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 0207 	bic.w	r2, r3, #7
 80023fa:	4970      	ldr	r1, [pc, #448]	; (80025bc <HAL_RCC_ClockConfig+0x1ec>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b6e      	ldr	r3, [pc, #440]	; (80025bc <HAL_RCC_ClockConfig+0x1ec>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0cf      	b.n	80025b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d010      	beq.n	8002442 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	4b66      	ldr	r3, [pc, #408]	; (80025c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800242c:	429a      	cmp	r2, r3
 800242e:	d908      	bls.n	8002442 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002430:	4b63      	ldr	r3, [pc, #396]	; (80025c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4960      	ldr	r1, [pc, #384]	; (80025c0 <HAL_RCC_ClockConfig+0x1f0>)
 800243e:	4313      	orrs	r3, r2
 8002440:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d04c      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002456:	4b5a      	ldr	r3, [pc, #360]	; (80025c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d121      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0a6      	b.n	80025b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800246e:	4b54      	ldr	r3, [pc, #336]	; (80025c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d115      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e09a      	b.n	80025b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002486:	4b4e      	ldr	r3, [pc, #312]	; (80025c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e08e      	b.n	80025b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002496:	4b4a      	ldr	r3, [pc, #296]	; (80025c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e086      	b.n	80025b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024a6:	4b46      	ldr	r3, [pc, #280]	; (80025c0 <HAL_RCC_ClockConfig+0x1f0>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f023 0203 	bic.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4943      	ldr	r1, [pc, #268]	; (80025c0 <HAL_RCC_ClockConfig+0x1f0>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b8:	f7fe fdb6 	bl	8001028 <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c0:	f7fe fdb2 	bl	8001028 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e06e      	b.n	80025b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	4b3a      	ldr	r3, [pc, #232]	; (80025c0 <HAL_RCC_ClockConfig+0x1f0>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 020c 	and.w	r2, r3, #12
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d1eb      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d010      	beq.n	8002516 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	4b31      	ldr	r3, [pc, #196]	; (80025c0 <HAL_RCC_ClockConfig+0x1f0>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002500:	429a      	cmp	r2, r3
 8002502:	d208      	bcs.n	8002516 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002504:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	492b      	ldr	r1, [pc, #172]	; (80025c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002516:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_RCC_ClockConfig+0x1ec>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d210      	bcs.n	8002546 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002524:	4b25      	ldr	r3, [pc, #148]	; (80025bc <HAL_RCC_ClockConfig+0x1ec>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f023 0207 	bic.w	r2, r3, #7
 800252c:	4923      	ldr	r1, [pc, #140]	; (80025bc <HAL_RCC_ClockConfig+0x1ec>)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	4313      	orrs	r3, r2
 8002532:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002534:	4b21      	ldr	r3, [pc, #132]	; (80025bc <HAL_RCC_ClockConfig+0x1ec>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d001      	beq.n	8002546 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e036      	b.n	80025b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002552:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	4918      	ldr	r1, [pc, #96]	; (80025c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d009      	beq.n	8002584 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002570:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4910      	ldr	r1, [pc, #64]	; (80025c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002580:	4313      	orrs	r3, r2
 8002582:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002584:	f000 f824 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <HAL_RCC_ClockConfig+0x1f0>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	490b      	ldr	r1, [pc, #44]	; (80025c4 <HAL_RCC_ClockConfig+0x1f4>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
 80025a0:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <HAL_RCC_ClockConfig+0x1f8>)
 80025a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <HAL_RCC_ClockConfig+0x1fc>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fced 	bl	8000f88 <HAL_InitTick>
 80025ae:	4603      	mov	r3, r0
 80025b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80025b2:	7afb      	ldrb	r3, [r7, #11]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40022000 	.word	0x40022000
 80025c0:	40021000 	.word	0x40021000
 80025c4:	08004884 	.word	0x08004884
 80025c8:	20000008 	.word	0x20000008
 80025cc:	2000000c 	.word	0x2000000c

080025d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	; 0x24
 80025d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025de:	4b3e      	ldr	r3, [pc, #248]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025e8:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_GetSysClockFreq+0x34>
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	2b0c      	cmp	r3, #12
 80025fc:	d121      	bne.n	8002642 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d11e      	bne.n	8002642 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002604:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d107      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002610:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002616:	0a1b      	lsrs	r3, r3, #8
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	e005      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002620:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800262c:	4a2b      	ldr	r2, [pc, #172]	; (80026dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002634:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10d      	bne.n	8002658 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002640:	e00a      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2b04      	cmp	r3, #4
 8002646:	d102      	bne.n	800264e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002648:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	e004      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	2b08      	cmp	r3, #8
 8002652:	d101      	bne.n	8002658 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002654:	4b23      	ldr	r3, [pc, #140]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002656:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	2b0c      	cmp	r3, #12
 800265c:	d134      	bne.n	80026c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800265e:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d003      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0xa6>
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b03      	cmp	r3, #3
 8002672:	d003      	beq.n	800267c <HAL_RCC_GetSysClockFreq+0xac>
 8002674:	e005      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002676:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002678:	617b      	str	r3, [r7, #20]
      break;
 800267a:	e005      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800267e:	617b      	str	r3, [r7, #20]
      break;
 8002680:	e002      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	617b      	str	r3, [r7, #20]
      break;
 8002686:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002688:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	3301      	adds	r3, #1
 8002694:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	fb03 f202 	mul.w	r2, r3, r2
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	0e5b      	lsrs	r3, r3, #25
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	3301      	adds	r3, #1
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026c8:	69bb      	ldr	r3, [r7, #24]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	; 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000
 80026dc:	0800489c 	.word	0x0800489c
 80026e0:	00f42400 	.word	0x00f42400
 80026e4:	007a1200 	.word	0x007a1200

080026e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000008 	.word	0x20000008

08002700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002704:	f7ff fff0 	bl	80026e8 <HAL_RCC_GetHCLKFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_RCC_GetPCLK1Freq+0x24>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	4904      	ldr	r1, [pc, #16]	; (8002728 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002716:	5ccb      	ldrb	r3, [r1, r3]
 8002718:	f003 031f 	and.w	r3, r3, #31
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000
 8002728:	08004894 	.word	0x08004894

0800272c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002730:	f7ff ffda 	bl	80026e8 <HAL_RCC_GetHCLKFreq>
 8002734:	4602      	mov	r2, r0
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	0adb      	lsrs	r3, r3, #11
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	4904      	ldr	r1, [pc, #16]	; (8002754 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002742:	5ccb      	ldrb	r3, [r1, r3]
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40021000 	.word	0x40021000
 8002754:	08004894 	.word	0x08004894

08002758 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002760:	2300      	movs	r3, #0
 8002762:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002764:	4b2a      	ldr	r3, [pc, #168]	; (8002810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002770:	f7ff f9ee 	bl	8001b50 <HAL_PWREx_GetVoltageRange>
 8002774:	6178      	str	r0, [r7, #20]
 8002776:	e014      	b.n	80027a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002778:	4b25      	ldr	r3, [pc, #148]	; (8002810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800277a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277c:	4a24      	ldr	r2, [pc, #144]	; (8002810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800277e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002782:	6593      	str	r3, [r2, #88]	; 0x58
 8002784:	4b22      	ldr	r3, [pc, #136]	; (8002810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002790:	f7ff f9de 	bl	8001b50 <HAL_PWREx_GetVoltageRange>
 8002794:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002796:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800279c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027a8:	d10b      	bne.n	80027c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b80      	cmp	r3, #128	; 0x80
 80027ae:	d919      	bls.n	80027e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2ba0      	cmp	r3, #160	; 0xa0
 80027b4:	d902      	bls.n	80027bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027b6:	2302      	movs	r3, #2
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	e013      	b.n	80027e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027bc:	2301      	movs	r3, #1
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	e010      	b.n	80027e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b80      	cmp	r3, #128	; 0x80
 80027c6:	d902      	bls.n	80027ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027c8:	2303      	movs	r3, #3
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	e00a      	b.n	80027e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b80      	cmp	r3, #128	; 0x80
 80027d2:	d102      	bne.n	80027da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027d4:	2302      	movs	r3, #2
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	e004      	b.n	80027e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b70      	cmp	r3, #112	; 0x70
 80027de:	d101      	bne.n	80027e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027e0:	2301      	movs	r3, #1
 80027e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 0207 	bic.w	r2, r3, #7
 80027ec:	4909      	ldr	r1, [pc, #36]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027f4:	4b07      	ldr	r3, [pc, #28]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d001      	beq.n	8002806 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40021000 	.word	0x40021000
 8002814:	40022000 	.word	0x40022000

08002818 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002820:	2300      	movs	r3, #0
 8002822:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002824:	2300      	movs	r3, #0
 8002826:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002830:	2b00      	cmp	r3, #0
 8002832:	d041      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002838:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800283c:	d02a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800283e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002842:	d824      	bhi.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002844:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002848:	d008      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800284a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800284e:	d81e      	bhi.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002858:	d010      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800285a:	e018      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800285c:	4b86      	ldr	r3, [pc, #536]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4a85      	ldr	r2, [pc, #532]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002866:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002868:	e015      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3304      	adds	r3, #4
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fabb 	bl	8002dec <RCCEx_PLLSAI1_Config>
 8002876:	4603      	mov	r3, r0
 8002878:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800287a:	e00c      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3320      	adds	r3, #32
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f000 fba6 	bl	8002fd4 <RCCEx_PLLSAI2_Config>
 8002888:	4603      	mov	r3, r0
 800288a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800288c:	e003      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	74fb      	strb	r3, [r7, #19]
      break;
 8002892:	e000      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002896:	7cfb      	ldrb	r3, [r7, #19]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10b      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800289c:	4b76      	ldr	r3, [pc, #472]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028aa:	4973      	ldr	r1, [pc, #460]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028b2:	e001      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b4:	7cfb      	ldrb	r3, [r7, #19]
 80028b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d041      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028cc:	d02a      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80028ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028d2:	d824      	bhi.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028d8:	d008      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028de:	d81e      	bhi.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80028e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e8:	d010      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028ea:	e018      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028ec:	4b62      	ldr	r3, [pc, #392]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a61      	ldr	r2, [pc, #388]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028f8:	e015      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3304      	adds	r3, #4
 80028fe:	2100      	movs	r1, #0
 8002900:	4618      	mov	r0, r3
 8002902:	f000 fa73 	bl	8002dec <RCCEx_PLLSAI1_Config>
 8002906:	4603      	mov	r3, r0
 8002908:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800290a:	e00c      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3320      	adds	r3, #32
 8002910:	2100      	movs	r1, #0
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fb5e 	bl	8002fd4 <RCCEx_PLLSAI2_Config>
 8002918:	4603      	mov	r3, r0
 800291a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800291c:	e003      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	74fb      	strb	r3, [r7, #19]
      break;
 8002922:	e000      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002926:	7cfb      	ldrb	r3, [r7, #19]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10b      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800292c:	4b52      	ldr	r3, [pc, #328]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002932:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800293a:	494f      	ldr	r1, [pc, #316]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002942:	e001      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002944:	7cfb      	ldrb	r3, [r7, #19]
 8002946:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80a0 	beq.w	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002956:	2300      	movs	r3, #0
 8002958:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800295a:	4b47      	ldr	r3, [pc, #284]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800296a:	2300      	movs	r3, #0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00d      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002970:	4b41      	ldr	r3, [pc, #260]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002974:	4a40      	ldr	r2, [pc, #256]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297a:	6593      	str	r3, [r2, #88]	; 0x58
 800297c:	4b3e      	ldr	r3, [pc, #248]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002988:	2301      	movs	r3, #1
 800298a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800298c:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a3a      	ldr	r2, [pc, #232]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002996:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002998:	f7fe fb46 	bl	8001028 <HAL_GetTick>
 800299c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800299e:	e009      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a0:	f7fe fb42 	bl	8001028 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d902      	bls.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	74fb      	strb	r3, [r7, #19]
        break;
 80029b2:	e005      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029b4:	4b31      	ldr	r3, [pc, #196]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0ef      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80029c0:	7cfb      	ldrb	r3, [r7, #19]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d15c      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029c6:	4b2c      	ldr	r3, [pc, #176]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01f      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d019      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029e4:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029f0:	4b21      	ldr	r3, [pc, #132]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f6:	4a20      	ldr	r2, [pc, #128]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a00:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a06:	4a1c      	ldr	r2, [pc, #112]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a10:	4a19      	ldr	r2, [pc, #100]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d016      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a22:	f7fe fb01 	bl	8001028 <HAL_GetTick>
 8002a26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a28:	e00b      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2a:	f7fe fafd 	bl	8001028 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d902      	bls.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	74fb      	strb	r3, [r7, #19]
            break;
 8002a40:	e006      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a42:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0ec      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a50:	7cfb      	ldrb	r3, [r7, #19]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a56:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a66:	4904      	ldr	r1, [pc, #16]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a6e:	e009      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a70:	7cfb      	ldrb	r3, [r7, #19]
 8002a72:	74bb      	strb	r3, [r7, #18]
 8002a74:	e006      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a80:	7cfb      	ldrb	r3, [r7, #19]
 8002a82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a84:	7c7b      	ldrb	r3, [r7, #17]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d105      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8a:	4b9e      	ldr	r3, [pc, #632]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	4a9d      	ldr	r2, [pc, #628]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aa2:	4b98      	ldr	r3, [pc, #608]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa8:	f023 0203 	bic.w	r2, r3, #3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	4994      	ldr	r1, [pc, #592]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ac4:	4b8f      	ldr	r3, [pc, #572]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aca:	f023 020c 	bic.w	r2, r3, #12
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad2:	498c      	ldr	r1, [pc, #560]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ae6:	4b87      	ldr	r3, [pc, #540]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	4983      	ldr	r1, [pc, #524]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b08:	4b7e      	ldr	r3, [pc, #504]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	497b      	ldr	r1, [pc, #492]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b2a:	4b76      	ldr	r3, [pc, #472]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b38:	4972      	ldr	r1, [pc, #456]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b4c:	4b6d      	ldr	r3, [pc, #436]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5a:	496a      	ldr	r1, [pc, #424]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b6e:	4b65      	ldr	r3, [pc, #404]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	4961      	ldr	r1, [pc, #388]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b90:	4b5c      	ldr	r3, [pc, #368]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9e:	4959      	ldr	r1, [pc, #356]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bb2:	4b54      	ldr	r3, [pc, #336]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc0:	4950      	ldr	r1, [pc, #320]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bd4:	4b4b      	ldr	r3, [pc, #300]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be2:	4948      	ldr	r1, [pc, #288]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bf6:	4b43      	ldr	r3, [pc, #268]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	493f      	ldr	r1, [pc, #252]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d028      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c18:	4b3a      	ldr	r3, [pc, #232]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c26:	4937      	ldr	r1, [pc, #220]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c36:	d106      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c38:	4b32      	ldr	r3, [pc, #200]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4a31      	ldr	r2, [pc, #196]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c42:	60d3      	str	r3, [r2, #12]
 8002c44:	e011      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c4e:	d10c      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3304      	adds	r3, #4
 8002c54:	2101      	movs	r1, #1
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f8c8 	bl	8002dec <RCCEx_PLLSAI1_Config>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c66:	7cfb      	ldrb	r3, [r7, #19]
 8002c68:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d028      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c76:	4b23      	ldr	r3, [pc, #140]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	491f      	ldr	r1, [pc, #124]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c94:	d106      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c96:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	4a1a      	ldr	r2, [pc, #104]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ca0:	60d3      	str	r3, [r2, #12]
 8002ca2:	e011      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 f899 	bl	8002dec <RCCEx_PLLSAI1_Config>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cbe:	7cfb      	ldrb	r3, [r7, #19]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002cc4:	7cfb      	ldrb	r3, [r7, #19]
 8002cc6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d02b      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce2:	4908      	ldr	r1, [pc, #32]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cf2:	d109      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4a02      	ldr	r2, [pc, #8]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cfe:	60d3      	str	r3, [r2, #12]
 8002d00:	e014      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3304      	adds	r3, #4
 8002d16:	2101      	movs	r1, #1
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 f867 	bl	8002dec <RCCEx_PLLSAI1_Config>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d22:	7cfb      	ldrb	r3, [r7, #19]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d28:	7cfb      	ldrb	r3, [r7, #19]
 8002d2a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d02f      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d38:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d46:	4928      	ldr	r1, [pc, #160]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d56:	d10d      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f844 	bl	8002dec <RCCEx_PLLSAI1_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d014      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d6e:	7cfb      	ldrb	r3, [r7, #19]
 8002d70:	74bb      	strb	r3, [r7, #18]
 8002d72:	e011      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3320      	adds	r3, #32
 8002d82:	2102      	movs	r1, #2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 f925 	bl	8002fd4 <RCCEx_PLLSAI2_Config>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d8e:	7cfb      	ldrb	r3, [r7, #19]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d94:	7cfb      	ldrb	r3, [r7, #19]
 8002d96:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002da4:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db2:	490d      	ldr	r1, [pc, #52]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd6:	4904      	ldr	r1, [pc, #16]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002dde:	7cbb      	ldrb	r3, [r7, #18]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40021000 	.word	0x40021000

08002dec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dfa:	4b75      	ldr	r3, [pc, #468]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d018      	beq.n	8002e38 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e06:	4b72      	ldr	r3, [pc, #456]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0203 	and.w	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d10d      	bne.n	8002e32 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
       ||
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e1e:	4b6c      	ldr	r3, [pc, #432]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d047      	beq.n	8002ec2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	73fb      	strb	r3, [r7, #15]
 8002e36:	e044      	b.n	8002ec2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d018      	beq.n	8002e72 <RCCEx_PLLSAI1_Config+0x86>
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d825      	bhi.n	8002e90 <RCCEx_PLLSAI1_Config+0xa4>
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d002      	beq.n	8002e4e <RCCEx_PLLSAI1_Config+0x62>
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d009      	beq.n	8002e60 <RCCEx_PLLSAI1_Config+0x74>
 8002e4c:	e020      	b.n	8002e90 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e4e:	4b60      	ldr	r3, [pc, #384]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d11d      	bne.n	8002e96 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e5e:	e01a      	b.n	8002e96 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e60:	4b5b      	ldr	r3, [pc, #364]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d116      	bne.n	8002e9a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e70:	e013      	b.n	8002e9a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e72:	4b57      	ldr	r3, [pc, #348]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10f      	bne.n	8002e9e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e7e:	4b54      	ldr	r3, [pc, #336]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e8e:	e006      	b.n	8002e9e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
      break;
 8002e94:	e004      	b.n	8002ea0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e96:	bf00      	nop
 8002e98:	e002      	b.n	8002ea0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e9a:	bf00      	nop
 8002e9c:	e000      	b.n	8002ea0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10d      	bne.n	8002ec2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ea6:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6819      	ldr	r1, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	4944      	ldr	r1, [pc, #272]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d17d      	bne.n	8002fc4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ec8:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a40      	ldr	r2, [pc, #256]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ece:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed4:	f7fe f8a8 	bl	8001028 <HAL_GetTick>
 8002ed8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002eda:	e009      	b.n	8002ef0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002edc:	f7fe f8a4 	bl	8001028 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d902      	bls.n	8002ef0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	73fb      	strb	r3, [r7, #15]
        break;
 8002eee:	e005      	b.n	8002efc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ef0:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ef      	bne.n	8002edc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d160      	bne.n	8002fc4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d111      	bne.n	8002f2c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f08:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6892      	ldr	r2, [r2, #8]
 8002f18:	0211      	lsls	r1, r2, #8
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68d2      	ldr	r2, [r2, #12]
 8002f1e:	0912      	lsrs	r2, r2, #4
 8002f20:	0452      	lsls	r2, r2, #17
 8002f22:	430a      	orrs	r2, r1
 8002f24:	492a      	ldr	r1, [pc, #168]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	610b      	str	r3, [r1, #16]
 8002f2a:	e027      	b.n	8002f7c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d112      	bne.n	8002f58 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f32:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6892      	ldr	r2, [r2, #8]
 8002f42:	0211      	lsls	r1, r2, #8
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6912      	ldr	r2, [r2, #16]
 8002f48:	0852      	lsrs	r2, r2, #1
 8002f4a:	3a01      	subs	r2, #1
 8002f4c:	0552      	lsls	r2, r2, #21
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	491f      	ldr	r1, [pc, #124]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	610b      	str	r3, [r1, #16]
 8002f56:	e011      	b.n	8002f7c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f58:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6892      	ldr	r2, [r2, #8]
 8002f68:	0211      	lsls	r1, r2, #8
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6952      	ldr	r2, [r2, #20]
 8002f6e:	0852      	lsrs	r2, r2, #1
 8002f70:	3a01      	subs	r2, #1
 8002f72:	0652      	lsls	r2, r2, #25
 8002f74:	430a      	orrs	r2, r1
 8002f76:	4916      	ldr	r1, [pc, #88]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f7c:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a13      	ldr	r2, [pc, #76]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f88:	f7fe f84e 	bl	8001028 <HAL_GetTick>
 8002f8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f8e:	e009      	b.n	8002fa4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f90:	f7fe f84a 	bl	8001028 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d902      	bls.n	8002fa4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	73fb      	strb	r3, [r7, #15]
          break;
 8002fa2:	e005      	b.n	8002fb0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0ef      	beq.n	8002f90 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	4904      	ldr	r1, [pc, #16]	; (8002fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000

08002fd4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fe2:	4b6a      	ldr	r3, [pc, #424]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d018      	beq.n	8003020 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002fee:	4b67      	ldr	r3, [pc, #412]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f003 0203 	and.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d10d      	bne.n	800301a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
       ||
 8003002:	2b00      	cmp	r3, #0
 8003004:	d009      	beq.n	800301a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003006:	4b61      	ldr	r3, [pc, #388]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
       ||
 8003016:	429a      	cmp	r2, r3
 8003018:	d047      	beq.n	80030aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
 800301e:	e044      	b.n	80030aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b03      	cmp	r3, #3
 8003026:	d018      	beq.n	800305a <RCCEx_PLLSAI2_Config+0x86>
 8003028:	2b03      	cmp	r3, #3
 800302a:	d825      	bhi.n	8003078 <RCCEx_PLLSAI2_Config+0xa4>
 800302c:	2b01      	cmp	r3, #1
 800302e:	d002      	beq.n	8003036 <RCCEx_PLLSAI2_Config+0x62>
 8003030:	2b02      	cmp	r3, #2
 8003032:	d009      	beq.n	8003048 <RCCEx_PLLSAI2_Config+0x74>
 8003034:	e020      	b.n	8003078 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003036:	4b55      	ldr	r3, [pc, #340]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d11d      	bne.n	800307e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003046:	e01a      	b.n	800307e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003048:	4b50      	ldr	r3, [pc, #320]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	2b00      	cmp	r3, #0
 8003052:	d116      	bne.n	8003082 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003058:	e013      	b.n	8003082 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800305a:	4b4c      	ldr	r3, [pc, #304]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10f      	bne.n	8003086 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003066:	4b49      	ldr	r3, [pc, #292]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003076:	e006      	b.n	8003086 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
      break;
 800307c:	e004      	b.n	8003088 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800307e:	bf00      	nop
 8003080:	e002      	b.n	8003088 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003082:	bf00      	nop
 8003084:	e000      	b.n	8003088 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003086:	bf00      	nop
    }

    if(status == HAL_OK)
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10d      	bne.n	80030aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800308e:	4b3f      	ldr	r3, [pc, #252]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6819      	ldr	r1, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	3b01      	subs	r3, #1
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	430b      	orrs	r3, r1
 80030a4:	4939      	ldr	r1, [pc, #228]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d167      	bne.n	8003180 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80030b0:	4b36      	ldr	r3, [pc, #216]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a35      	ldr	r2, [pc, #212]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030bc:	f7fd ffb4 	bl	8001028 <HAL_GetTick>
 80030c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030c2:	e009      	b.n	80030d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030c4:	f7fd ffb0 	bl	8001028 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d902      	bls.n	80030d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	73fb      	strb	r3, [r7, #15]
        break;
 80030d6:	e005      	b.n	80030e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030d8:	4b2c      	ldr	r3, [pc, #176]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1ef      	bne.n	80030c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d14a      	bne.n	8003180 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d111      	bne.n	8003114 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030f0:	4b26      	ldr	r3, [pc, #152]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6892      	ldr	r2, [r2, #8]
 8003100:	0211      	lsls	r1, r2, #8
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68d2      	ldr	r2, [r2, #12]
 8003106:	0912      	lsrs	r2, r2, #4
 8003108:	0452      	lsls	r2, r2, #17
 800310a:	430a      	orrs	r2, r1
 800310c:	491f      	ldr	r1, [pc, #124]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 800310e:	4313      	orrs	r3, r2
 8003110:	614b      	str	r3, [r1, #20]
 8003112:	e011      	b.n	8003138 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003114:	4b1d      	ldr	r3, [pc, #116]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800311c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6892      	ldr	r2, [r2, #8]
 8003124:	0211      	lsls	r1, r2, #8
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6912      	ldr	r2, [r2, #16]
 800312a:	0852      	lsrs	r2, r2, #1
 800312c:	3a01      	subs	r2, #1
 800312e:	0652      	lsls	r2, r2, #25
 8003130:	430a      	orrs	r2, r1
 8003132:	4916      	ldr	r1, [pc, #88]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003134:	4313      	orrs	r3, r2
 8003136:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003138:	4b14      	ldr	r3, [pc, #80]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a13      	ldr	r2, [pc, #76]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 800313e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003142:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003144:	f7fd ff70 	bl	8001028 <HAL_GetTick>
 8003148:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800314a:	e009      	b.n	8003160 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800314c:	f7fd ff6c 	bl	8001028 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d902      	bls.n	8003160 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	73fb      	strb	r3, [r7, #15]
          break;
 800315e:	e005      	b.n	800316c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0ef      	beq.n	800314c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	4904      	ldr	r1, [pc, #16]	; (800318c <RCCEx_PLLSAI2_Config+0x1b8>)
 800317c:	4313      	orrs	r3, r2
 800317e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003180:	7bfb      	ldrb	r3, [r7, #15]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000

08003190 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e040      	b.n	8003224 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fd fca2 	bl	8000afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2224      	movs	r2, #36	; 0x24
 80031bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0201 	bic.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fe7c 	bl	8003ed4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fbc1 	bl	8003964 <UART_SetConfig>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e01b      	b.n	8003224 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800320a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fefb 	bl	8004018 <UART_CheckIdleState>
 8003222:	4603      	mov	r3, r0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08a      	sub	sp, #40	; 0x28
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	4613      	mov	r3, r2
 800323a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003240:	2b20      	cmp	r3, #32
 8003242:	d178      	bne.n	8003336 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_UART_Transmit+0x24>
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e071      	b.n	8003338 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2221      	movs	r2, #33	; 0x21
 8003260:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003262:	f7fd fee1 	bl	8001028 <HAL_GetTick>
 8003266:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	88fa      	ldrh	r2, [r7, #6]
 800326c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	88fa      	ldrh	r2, [r7, #6]
 8003274:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003280:	d108      	bne.n	8003294 <HAL_UART_Transmit+0x68>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d104      	bne.n	8003294 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	e003      	b.n	800329c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003298:	2300      	movs	r3, #0
 800329a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800329c:	e030      	b.n	8003300 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2200      	movs	r2, #0
 80032a6:	2180      	movs	r1, #128	; 0x80
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 ff5d 	bl	8004168 <UART_WaitOnFlagUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d004      	beq.n	80032be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e03c      	b.n	8003338 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10b      	bne.n	80032dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	881a      	ldrh	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d0:	b292      	uxth	r2, r2
 80032d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	3302      	adds	r3, #2
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	e008      	b.n	80032ee <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	781a      	ldrb	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	b292      	uxth	r2, r2
 80032e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	3301      	adds	r3, #1
 80032ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1c8      	bne.n	800329e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2200      	movs	r2, #0
 8003314:	2140      	movs	r1, #64	; 0x40
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 ff26 	bl	8004168 <UART_WaitOnFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d004      	beq.n	800332c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2220      	movs	r2, #32
 8003326:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e005      	b.n	8003338 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e000      	b.n	8003338 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003336:	2302      	movs	r3, #2
  }
}
 8003338:	4618      	mov	r0, r3
 800333a:	3720      	adds	r7, #32
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b0ba      	sub	sp, #232	; 0xe8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003366:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800336a:	f640 030f 	movw	r3, #2063	; 0x80f
 800336e:	4013      	ands	r3, r2
 8003370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d115      	bne.n	80033a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800337c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00f      	beq.n	80033a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 82ae 	beq.w	80038fa <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	4798      	blx	r3
      }
      return;
 80033a6:	e2a8      	b.n	80038fa <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80033a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 8117 	beq.w	80035e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80033b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80033be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80033c2:	4b85      	ldr	r3, [pc, #532]	; (80035d8 <HAL_UART_IRQHandler+0x298>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 810a 	beq.w	80035e0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d011      	beq.n	80033fc <HAL_UART_IRQHandler+0xbc>
 80033d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00b      	beq.n	80033fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2201      	movs	r2, #1
 80033ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f2:	f043 0201 	orr.w	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d011      	beq.n	800342c <HAL_UART_IRQHandler+0xec>
 8003408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00b      	beq.n	800342c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2202      	movs	r2, #2
 800341a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003422:	f043 0204 	orr.w	r2, r3, #4
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800342c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d011      	beq.n	800345c <HAL_UART_IRQHandler+0x11c>
 8003438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00b      	beq.n	800345c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2204      	movs	r2, #4
 800344a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003452:	f043 0202 	orr.w	r2, r3, #2
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800345c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d017      	beq.n	8003498 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d105      	bne.n	8003480 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003478:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00b      	beq.n	8003498 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2208      	movs	r2, #8
 8003486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800348e:	f043 0208 	orr.w	r2, r3, #8
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d012      	beq.n	80034ca <HAL_UART_IRQHandler+0x18a>
 80034a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00c      	beq.n	80034ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034c0:	f043 0220 	orr.w	r2, r3, #32
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8214 	beq.w	80038fe <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80034d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00d      	beq.n	80034fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d007      	beq.n	80034fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003504:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003512:	2b40      	cmp	r3, #64	; 0x40
 8003514:	d005      	beq.n	8003522 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800351a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800351e:	2b00      	cmp	r3, #0
 8003520:	d04f      	beq.n	80035c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 ff4e 	bl	80043c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	d141      	bne.n	80035ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3308      	adds	r3, #8
 800353c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003540:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003544:	e853 3f00 	ldrex	r3, [r3]
 8003548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800354c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3308      	adds	r3, #8
 800355e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003562:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003566:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800356e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003572:	e841 2300 	strex	r3, r2, [r1]
 8003576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800357a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1d9      	bne.n	8003536 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003586:	2b00      	cmp	r3, #0
 8003588:	d013      	beq.n	80035b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358e:	4a13      	ldr	r2, [pc, #76]	; (80035dc <HAL_UART_IRQHandler+0x29c>)
 8003590:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd ffde 	bl	8001558 <HAL_DMA_Abort_IT>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d017      	beq.n	80035d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035ac:	4610      	mov	r0, r2
 80035ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b0:	e00f      	b.n	80035d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f9cc 	bl	8003950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b8:	e00b      	b.n	80035d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f9c8 	bl	8003950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c0:	e007      	b.n	80035d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f9c4 	bl	8003950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80035d0:	e195      	b.n	80038fe <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d2:	bf00      	nop
    return;
 80035d4:	e193      	b.n	80038fe <HAL_UART_IRQHandler+0x5be>
 80035d6:	bf00      	nop
 80035d8:	04000120 	.word	0x04000120
 80035dc:	08004675 	.word	0x08004675

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	f040 814e 	bne.w	8003886 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80035ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ee:	f003 0310 	and.w	r3, r3, #16
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 8147 	beq.w	8003886 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80035f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8140 	beq.w	8003886 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2210      	movs	r2, #16
 800360c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003618:	2b40      	cmp	r3, #64	; 0x40
 800361a:	f040 80b8 	bne.w	800378e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800362a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8167 	beq.w	8003902 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800363a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800363e:	429a      	cmp	r2, r3
 8003640:	f080 815f 	bcs.w	8003902 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800364a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	f040 8086 	bne.w	800376c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003668:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800366c:	e853 3f00 	ldrex	r3, [r3]
 8003670:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003674:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800367c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800368a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800368e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003696:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800369a:	e841 2300 	strex	r3, r2, [r1]
 800369e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80036a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1da      	bne.n	8003660 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3308      	adds	r3, #8
 80036b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3308      	adds	r3, #8
 80036ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e1      	bne.n	80036aa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3308      	adds	r3, #8
 80036ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036f0:	e853 3f00 	ldrex	r3, [r3]
 80036f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3308      	adds	r3, #8
 8003706:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800370a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800370c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003710:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003712:	e841 2300 	strex	r3, r2, [r1]
 8003716:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1e3      	bne.n	80036e6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800373a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800373c:	f023 0310 	bic.w	r3, r3, #16
 8003740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800374e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003750:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003752:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003754:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003756:	e841 2300 	strex	r3, r2, [r1]
 800375a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800375c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1e4      	bne.n	800372c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd feb8 	bl	80014dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800377e:	b29b      	uxth	r3, r3
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	b29b      	uxth	r3, r3
 8003784:	4619      	mov	r1, r3
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fc feae 	bl	80004e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800378c:	e0b9      	b.n	8003902 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800379a:	b29b      	uxth	r3, r3
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 80ab 	beq.w	8003906 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80037b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80a6 	beq.w	8003906 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c2:	e853 3f00 	ldrex	r3, [r3]
 80037c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037dc:	647b      	str	r3, [r7, #68]	; 0x44
 80037de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037e4:	e841 2300 	strex	r3, r2, [r1]
 80037e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e4      	bne.n	80037ba <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3308      	adds	r3, #8
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	e853 3f00 	ldrex	r3, [r3]
 80037fe:	623b      	str	r3, [r7, #32]
   return(result);
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3308      	adds	r3, #8
 8003810:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003814:	633a      	str	r2, [r7, #48]	; 0x30
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003818:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800381a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800381c:	e841 2300 	strex	r3, r2, [r1]
 8003820:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e3      	bne.n	80037f0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	60fb      	str	r3, [r7, #12]
   return(result);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f023 0310 	bic.w	r3, r3, #16
 8003850:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800385e:	61fb      	str	r3, [r7, #28]
 8003860:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003862:	69b9      	ldr	r1, [r7, #24]
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	e841 2300 	strex	r3, r2, [r1]
 800386a:	617b      	str	r3, [r7, #20]
   return(result);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1e4      	bne.n	800383c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003878:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800387c:	4619      	mov	r1, r3
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7fc fe32 	bl	80004e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003884:	e03f      	b.n	8003906 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00e      	beq.n	80038b0 <HAL_UART_IRQHandler+0x570>
 8003892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d008      	beq.n	80038b0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 ff23 	bl	80046f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038ae:	e02d      	b.n	800390c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80038b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00e      	beq.n	80038da <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80038bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01c      	beq.n	800390a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
    }
    return;
 80038d8:	e017      	b.n	800390a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d012      	beq.n	800390c <HAL_UART_IRQHandler+0x5cc>
 80038e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fed4 	bl	80046a0 <UART_EndTransmit_IT>
    return;
 80038f8:	e008      	b.n	800390c <HAL_UART_IRQHandler+0x5cc>
      return;
 80038fa:	bf00      	nop
 80038fc:	e006      	b.n	800390c <HAL_UART_IRQHandler+0x5cc>
    return;
 80038fe:	bf00      	nop
 8003900:	e004      	b.n	800390c <HAL_UART_IRQHandler+0x5cc>
      return;
 8003902:	bf00      	nop
 8003904:	e002      	b.n	800390c <HAL_UART_IRQHandler+0x5cc>
      return;
 8003906:	bf00      	nop
 8003908:	e000      	b.n	800390c <HAL_UART_IRQHandler+0x5cc>
    return;
 800390a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800390c:	37e8      	adds	r7, #232	; 0xe8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop

08003914 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003968:	b08a      	sub	sp, #40	; 0x28
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	431a      	orrs	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	431a      	orrs	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	4313      	orrs	r3, r2
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4ba4      	ldr	r3, [pc, #656]	; (8003c24 <UART_SetConfig+0x2c0>)
 8003994:	4013      	ands	r3, r2
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800399c:	430b      	orrs	r3, r1
 800399e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a99      	ldr	r2, [pc, #612]	; (8003c28 <UART_SetConfig+0x2c4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d004      	beq.n	80039d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039cc:	4313      	orrs	r3, r2
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e0:	430a      	orrs	r2, r1
 80039e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a90      	ldr	r2, [pc, #576]	; (8003c2c <UART_SetConfig+0x2c8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d126      	bne.n	8003a3c <UART_SetConfig+0xd8>
 80039ee:	4b90      	ldr	r3, [pc, #576]	; (8003c30 <UART_SetConfig+0x2cc>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d81b      	bhi.n	8003a34 <UART_SetConfig+0xd0>
 80039fc:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <UART_SetConfig+0xa0>)
 80039fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08003a15 	.word	0x08003a15
 8003a08:	08003a25 	.word	0x08003a25
 8003a0c:	08003a1d 	.word	0x08003a1d
 8003a10:	08003a2d 	.word	0x08003a2d
 8003a14:	2301      	movs	r3, #1
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1a:	e116      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a22:	e112      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003a24:	2304      	movs	r3, #4
 8003a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2a:	e10e      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003a2c:	2308      	movs	r3, #8
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a32:	e10a      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003a34:	2310      	movs	r3, #16
 8003a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3a:	e106      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a7c      	ldr	r2, [pc, #496]	; (8003c34 <UART_SetConfig+0x2d0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d138      	bne.n	8003ab8 <UART_SetConfig+0x154>
 8003a46:	4b7a      	ldr	r3, [pc, #488]	; (8003c30 <UART_SetConfig+0x2cc>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b0c      	cmp	r3, #12
 8003a52:	d82d      	bhi.n	8003ab0 <UART_SetConfig+0x14c>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <UART_SetConfig+0xf8>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003a91 	.word	0x08003a91
 8003a60:	08003ab1 	.word	0x08003ab1
 8003a64:	08003ab1 	.word	0x08003ab1
 8003a68:	08003ab1 	.word	0x08003ab1
 8003a6c:	08003aa1 	.word	0x08003aa1
 8003a70:	08003ab1 	.word	0x08003ab1
 8003a74:	08003ab1 	.word	0x08003ab1
 8003a78:	08003ab1 	.word	0x08003ab1
 8003a7c:	08003a99 	.word	0x08003a99
 8003a80:	08003ab1 	.word	0x08003ab1
 8003a84:	08003ab1 	.word	0x08003ab1
 8003a88:	08003ab1 	.word	0x08003ab1
 8003a8c:	08003aa9 	.word	0x08003aa9
 8003a90:	2300      	movs	r3, #0
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a96:	e0d8      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9e:	e0d4      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa6:	e0d0      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003aa8:	2308      	movs	r3, #8
 8003aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aae:	e0cc      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003ab0:	2310      	movs	r3, #16
 8003ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab6:	e0c8      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a5e      	ldr	r2, [pc, #376]	; (8003c38 <UART_SetConfig+0x2d4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d125      	bne.n	8003b0e <UART_SetConfig+0x1aa>
 8003ac2:	4b5b      	ldr	r3, [pc, #364]	; (8003c30 <UART_SetConfig+0x2cc>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003acc:	2b30      	cmp	r3, #48	; 0x30
 8003ace:	d016      	beq.n	8003afe <UART_SetConfig+0x19a>
 8003ad0:	2b30      	cmp	r3, #48	; 0x30
 8003ad2:	d818      	bhi.n	8003b06 <UART_SetConfig+0x1a2>
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d00a      	beq.n	8003aee <UART_SetConfig+0x18a>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d814      	bhi.n	8003b06 <UART_SetConfig+0x1a2>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <UART_SetConfig+0x182>
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d008      	beq.n	8003af6 <UART_SetConfig+0x192>
 8003ae4:	e00f      	b.n	8003b06 <UART_SetConfig+0x1a2>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aec:	e0ad      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003aee:	2302      	movs	r3, #2
 8003af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af4:	e0a9      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003af6:	2304      	movs	r3, #4
 8003af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afc:	e0a5      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003afe:	2308      	movs	r3, #8
 8003b00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b04:	e0a1      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003b06:	2310      	movs	r3, #16
 8003b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0c:	e09d      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a4a      	ldr	r2, [pc, #296]	; (8003c3c <UART_SetConfig+0x2d8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d125      	bne.n	8003b64 <UART_SetConfig+0x200>
 8003b18:	4b45      	ldr	r3, [pc, #276]	; (8003c30 <UART_SetConfig+0x2cc>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b22:	2bc0      	cmp	r3, #192	; 0xc0
 8003b24:	d016      	beq.n	8003b54 <UART_SetConfig+0x1f0>
 8003b26:	2bc0      	cmp	r3, #192	; 0xc0
 8003b28:	d818      	bhi.n	8003b5c <UART_SetConfig+0x1f8>
 8003b2a:	2b80      	cmp	r3, #128	; 0x80
 8003b2c:	d00a      	beq.n	8003b44 <UART_SetConfig+0x1e0>
 8003b2e:	2b80      	cmp	r3, #128	; 0x80
 8003b30:	d814      	bhi.n	8003b5c <UART_SetConfig+0x1f8>
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <UART_SetConfig+0x1d8>
 8003b36:	2b40      	cmp	r3, #64	; 0x40
 8003b38:	d008      	beq.n	8003b4c <UART_SetConfig+0x1e8>
 8003b3a:	e00f      	b.n	8003b5c <UART_SetConfig+0x1f8>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b42:	e082      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003b44:	2302      	movs	r3, #2
 8003b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4a:	e07e      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003b4c:	2304      	movs	r3, #4
 8003b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b52:	e07a      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003b54:	2308      	movs	r3, #8
 8003b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5a:	e076      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003b5c:	2310      	movs	r3, #16
 8003b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b62:	e072      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a35      	ldr	r2, [pc, #212]	; (8003c40 <UART_SetConfig+0x2dc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d12a      	bne.n	8003bc4 <UART_SetConfig+0x260>
 8003b6e:	4b30      	ldr	r3, [pc, #192]	; (8003c30 <UART_SetConfig+0x2cc>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b7c:	d01a      	beq.n	8003bb4 <UART_SetConfig+0x250>
 8003b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b82:	d81b      	bhi.n	8003bbc <UART_SetConfig+0x258>
 8003b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b88:	d00c      	beq.n	8003ba4 <UART_SetConfig+0x240>
 8003b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b8e:	d815      	bhi.n	8003bbc <UART_SetConfig+0x258>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <UART_SetConfig+0x238>
 8003b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b98:	d008      	beq.n	8003bac <UART_SetConfig+0x248>
 8003b9a:	e00f      	b.n	8003bbc <UART_SetConfig+0x258>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba2:	e052      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003baa:	e04e      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003bac:	2304      	movs	r3, #4
 8003bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb2:	e04a      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003bb4:	2308      	movs	r3, #8
 8003bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bba:	e046      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc2:	e042      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a17      	ldr	r2, [pc, #92]	; (8003c28 <UART_SetConfig+0x2c4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d13a      	bne.n	8003c44 <UART_SetConfig+0x2e0>
 8003bce:	4b18      	ldr	r3, [pc, #96]	; (8003c30 <UART_SetConfig+0x2cc>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bdc:	d01a      	beq.n	8003c14 <UART_SetConfig+0x2b0>
 8003bde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003be2:	d81b      	bhi.n	8003c1c <UART_SetConfig+0x2b8>
 8003be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be8:	d00c      	beq.n	8003c04 <UART_SetConfig+0x2a0>
 8003bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bee:	d815      	bhi.n	8003c1c <UART_SetConfig+0x2b8>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <UART_SetConfig+0x298>
 8003bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf8:	d008      	beq.n	8003c0c <UART_SetConfig+0x2a8>
 8003bfa:	e00f      	b.n	8003c1c <UART_SetConfig+0x2b8>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c02:	e022      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003c04:	2302      	movs	r3, #2
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0a:	e01e      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c12:	e01a      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003c14:	2308      	movs	r3, #8
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c1a:	e016      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c22:	e012      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003c24:	efff69f3 	.word	0xefff69f3
 8003c28:	40008000 	.word	0x40008000
 8003c2c:	40013800 	.word	0x40013800
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40004400 	.word	0x40004400
 8003c38:	40004800 	.word	0x40004800
 8003c3c:	40004c00 	.word	0x40004c00
 8003c40:	40005000 	.word	0x40005000
 8003c44:	2310      	movs	r3, #16
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a9f      	ldr	r2, [pc, #636]	; (8003ecc <UART_SetConfig+0x568>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d17a      	bne.n	8003d4a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d824      	bhi.n	8003ca6 <UART_SetConfig+0x342>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <UART_SetConfig+0x300>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c89 	.word	0x08003c89
 8003c68:	08003ca7 	.word	0x08003ca7
 8003c6c:	08003c91 	.word	0x08003c91
 8003c70:	08003ca7 	.word	0x08003ca7
 8003c74:	08003c97 	.word	0x08003c97
 8003c78:	08003ca7 	.word	0x08003ca7
 8003c7c:	08003ca7 	.word	0x08003ca7
 8003c80:	08003ca7 	.word	0x08003ca7
 8003c84:	08003c9f 	.word	0x08003c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c88:	f7fe fd3a 	bl	8002700 <HAL_RCC_GetPCLK1Freq>
 8003c8c:	61f8      	str	r0, [r7, #28]
        break;
 8003c8e:	e010      	b.n	8003cb2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c90:	4b8f      	ldr	r3, [pc, #572]	; (8003ed0 <UART_SetConfig+0x56c>)
 8003c92:	61fb      	str	r3, [r7, #28]
        break;
 8003c94:	e00d      	b.n	8003cb2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c96:	f7fe fc9b 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 8003c9a:	61f8      	str	r0, [r7, #28]
        break;
 8003c9c:	e009      	b.n	8003cb2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca2:	61fb      	str	r3, [r7, #28]
        break;
 8003ca4:	e005      	b.n	8003cb2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80fb 	beq.w	8003eb0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	4413      	add	r3, r2
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d305      	bcc.n	8003cd6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d903      	bls.n	8003cde <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cdc:	e0e8      	b.n	8003eb0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	461c      	mov	r4, r3
 8003ce4:	4615      	mov	r5, r2
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	022b      	lsls	r3, r5, #8
 8003cf0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003cf4:	0222      	lsls	r2, r4, #8
 8003cf6:	68f9      	ldr	r1, [r7, #12]
 8003cf8:	6849      	ldr	r1, [r1, #4]
 8003cfa:	0849      	lsrs	r1, r1, #1
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	4688      	mov	r8, r1
 8003d00:	4681      	mov	r9, r0
 8003d02:	eb12 0a08 	adds.w	sl, r2, r8
 8003d06:	eb43 0b09 	adc.w	fp, r3, r9
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d18:	4650      	mov	r0, sl
 8003d1a:	4659      	mov	r1, fp
 8003d1c:	f7fc fa66 	bl	80001ec <__aeabi_uldivmod>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4613      	mov	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d2e:	d308      	bcc.n	8003d42 <UART_SetConfig+0x3de>
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d36:	d204      	bcs.n	8003d42 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	60da      	str	r2, [r3, #12]
 8003d40:	e0b6      	b.n	8003eb0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d48:	e0b2      	b.n	8003eb0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d52:	d15e      	bne.n	8003e12 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d828      	bhi.n	8003dae <UART_SetConfig+0x44a>
 8003d5c:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <UART_SetConfig+0x400>)
 8003d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d62:	bf00      	nop
 8003d64:	08003d89 	.word	0x08003d89
 8003d68:	08003d91 	.word	0x08003d91
 8003d6c:	08003d99 	.word	0x08003d99
 8003d70:	08003daf 	.word	0x08003daf
 8003d74:	08003d9f 	.word	0x08003d9f
 8003d78:	08003daf 	.word	0x08003daf
 8003d7c:	08003daf 	.word	0x08003daf
 8003d80:	08003daf 	.word	0x08003daf
 8003d84:	08003da7 	.word	0x08003da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d88:	f7fe fcba 	bl	8002700 <HAL_RCC_GetPCLK1Freq>
 8003d8c:	61f8      	str	r0, [r7, #28]
        break;
 8003d8e:	e014      	b.n	8003dba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d90:	f7fe fccc 	bl	800272c <HAL_RCC_GetPCLK2Freq>
 8003d94:	61f8      	str	r0, [r7, #28]
        break;
 8003d96:	e010      	b.n	8003dba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d98:	4b4d      	ldr	r3, [pc, #308]	; (8003ed0 <UART_SetConfig+0x56c>)
 8003d9a:	61fb      	str	r3, [r7, #28]
        break;
 8003d9c:	e00d      	b.n	8003dba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9e:	f7fe fc17 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 8003da2:	61f8      	str	r0, [r7, #28]
        break;
 8003da4:	e009      	b.n	8003dba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003daa:	61fb      	str	r3, [r7, #28]
        break;
 8003dac:	e005      	b.n	8003dba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003db8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d077      	beq.n	8003eb0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	005a      	lsls	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	085b      	lsrs	r3, r3, #1
 8003dca:	441a      	add	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b0f      	cmp	r3, #15
 8003dda:	d916      	bls.n	8003e0a <UART_SetConfig+0x4a6>
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de2:	d212      	bcs.n	8003e0a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	f023 030f 	bic.w	r3, r3, #15
 8003dec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	085b      	lsrs	r3, r3, #1
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	8afb      	ldrh	r3, [r7, #22]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	8afa      	ldrh	r2, [r7, #22]
 8003e06:	60da      	str	r2, [r3, #12]
 8003e08:	e052      	b.n	8003eb0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e10:	e04e      	b.n	8003eb0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d827      	bhi.n	8003e6a <UART_SetConfig+0x506>
 8003e1a:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <UART_SetConfig+0x4bc>)
 8003e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e20:	08003e45 	.word	0x08003e45
 8003e24:	08003e4d 	.word	0x08003e4d
 8003e28:	08003e55 	.word	0x08003e55
 8003e2c:	08003e6b 	.word	0x08003e6b
 8003e30:	08003e5b 	.word	0x08003e5b
 8003e34:	08003e6b 	.word	0x08003e6b
 8003e38:	08003e6b 	.word	0x08003e6b
 8003e3c:	08003e6b 	.word	0x08003e6b
 8003e40:	08003e63 	.word	0x08003e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e44:	f7fe fc5c 	bl	8002700 <HAL_RCC_GetPCLK1Freq>
 8003e48:	61f8      	str	r0, [r7, #28]
        break;
 8003e4a:	e014      	b.n	8003e76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e4c:	f7fe fc6e 	bl	800272c <HAL_RCC_GetPCLK2Freq>
 8003e50:	61f8      	str	r0, [r7, #28]
        break;
 8003e52:	e010      	b.n	8003e76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e54:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <UART_SetConfig+0x56c>)
 8003e56:	61fb      	str	r3, [r7, #28]
        break;
 8003e58:	e00d      	b.n	8003e76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e5a:	f7fe fbb9 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 8003e5e:	61f8      	str	r0, [r7, #28]
        break;
 8003e60:	e009      	b.n	8003e76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e66:	61fb      	str	r3, [r7, #28]
        break;
 8003e68:	e005      	b.n	8003e76 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e74:	bf00      	nop
    }

    if (pclk != 0U)
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d019      	beq.n	8003eb0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	085a      	lsrs	r2, r3, #1
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	441a      	add	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b0f      	cmp	r3, #15
 8003e94:	d909      	bls.n	8003eaa <UART_SetConfig+0x546>
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9c:	d205      	bcs.n	8003eaa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60da      	str	r2, [r3, #12]
 8003ea8:	e002      	b.n	8003eb0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ebc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3728      	adds	r7, #40	; 0x28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eca:	bf00      	nop
 8003ecc:	40008000 	.word	0x40008000
 8003ed0:	00f42400 	.word	0x00f42400

08003ed4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01a      	beq.n	8003fea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd2:	d10a      	bne.n	8003fea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	605a      	str	r2, [r3, #4]
  }
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b098      	sub	sp, #96	; 0x60
 800401c:	af02      	add	r7, sp, #8
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004028:	f7fc fffe 	bl	8001028 <HAL_GetTick>
 800402c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b08      	cmp	r3, #8
 800403a:	d12e      	bne.n	800409a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800403c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004044:	2200      	movs	r2, #0
 8004046:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f88c 	bl	8004168 <UART_WaitOnFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d021      	beq.n	800409a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405e:	e853 3f00 	ldrex	r3, [r3]
 8004062:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406a:	653b      	str	r3, [r7, #80]	; 0x50
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	461a      	mov	r2, r3
 8004072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004074:	647b      	str	r3, [r7, #68]	; 0x44
 8004076:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800407a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e6      	bne.n	8004056 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e062      	b.n	8004160 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d149      	bne.n	800413c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b0:	2200      	movs	r2, #0
 80040b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f856 	bl	8004168 <UART_WaitOnFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d03c      	beq.n	800413c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	623b      	str	r3, [r7, #32]
   return(result);
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e0:	633b      	str	r3, [r7, #48]	; 0x30
 80040e2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e6      	bne.n	80040c2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3308      	adds	r3, #8
 80040fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	e853 3f00 	ldrex	r3, [r3]
 8004102:	60fb      	str	r3, [r7, #12]
   return(result);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0301 	bic.w	r3, r3, #1
 800410a:	64bb      	str	r3, [r7, #72]	; 0x48
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3308      	adds	r3, #8
 8004112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004114:	61fa      	str	r2, [r7, #28]
 8004116:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004118:	69b9      	ldr	r1, [r7, #24]
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	e841 2300 	strex	r3, r2, [r1]
 8004120:	617b      	str	r3, [r7, #20]
   return(result);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1e5      	bne.n	80040f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e011      	b.n	8004160 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3758      	adds	r7, #88	; 0x58
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	4613      	mov	r3, r2
 8004176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004178:	e049      	b.n	800420e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004180:	d045      	beq.n	800420e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004182:	f7fc ff51 	bl	8001028 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	429a      	cmp	r2, r3
 8004190:	d302      	bcc.n	8004198 <UART_WaitOnFlagUntilTimeout+0x30>
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e048      	b.n	800422e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d031      	beq.n	800420e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d110      	bne.n	80041da <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2208      	movs	r2, #8
 80041be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 f8ff 	bl	80043c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2208      	movs	r2, #8
 80041ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e029      	b.n	800422e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e8:	d111      	bne.n	800420e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f8e5 	bl	80043c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e00f      	b.n	800422e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4013      	ands	r3, r2
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	429a      	cmp	r2, r3
 800421c:	bf0c      	ite	eq
 800421e:	2301      	moveq	r3, #1
 8004220:	2300      	movne	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	429a      	cmp	r2, r3
 800422a:	d0a6      	beq.n	800417a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b096      	sub	sp, #88	; 0x58
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	4613      	mov	r3, r2
 8004244:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	88fa      	ldrh	r2, [r7, #6]
 8004250:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2222      	movs	r2, #34	; 0x22
 8004260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004268:	2b00      	cmp	r3, #0
 800426a:	d028      	beq.n	80042be <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004270:	4a3e      	ldr	r2, [pc, #248]	; (800436c <UART_Start_Receive_DMA+0x134>)
 8004272:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004278:	4a3d      	ldr	r2, [pc, #244]	; (8004370 <UART_Start_Receive_DMA+0x138>)
 800427a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004280:	4a3c      	ldr	r2, [pc, #240]	; (8004374 <UART_Start_Receive_DMA+0x13c>)
 8004282:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004288:	2200      	movs	r2, #0
 800428a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3324      	adds	r3, #36	; 0x24
 8004296:	4619      	mov	r1, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429c:	461a      	mov	r2, r3
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	f7fd f8bc 	bl	800141c <HAL_DMA_Start_IT>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2210      	movs	r2, #16
 80042ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e051      	b.n	8004362 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d018      	beq.n	80042f8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042da:	657b      	str	r3, [r7, #84]	; 0x54
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80042e6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e6      	bne.n	80042c6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3308      	adds	r3, #8
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	653b      	str	r3, [r7, #80]	; 0x50
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3308      	adds	r3, #8
 8004316:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004318:	637a      	str	r2, [r7, #52]	; 0x34
 800431a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800431e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e5      	bne.n	80042f8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3308      	adds	r3, #8
 8004332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	613b      	str	r3, [r7, #16]
   return(result);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3308      	adds	r3, #8
 800434a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800434c:	623a      	str	r2, [r7, #32]
 800434e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	69f9      	ldr	r1, [r7, #28]
 8004352:	6a3a      	ldr	r2, [r7, #32]
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	61bb      	str	r3, [r7, #24]
   return(result);
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e5      	bne.n	800432c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3758      	adds	r7, #88	; 0x58
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	0800448d 	.word	0x0800448d
 8004370:	080045b9 	.word	0x080045b9
 8004374:	080045f7 	.word	0x080045f7

08004378 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004378:	b480      	push	{r7}
 800437a:	b089      	sub	sp, #36	; 0x24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	60bb      	str	r3, [r7, #8]
   return(result);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	6979      	ldr	r1, [r7, #20]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	613b      	str	r3, [r7, #16]
   return(result);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e6      	bne.n	8004380 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80043b8:	bf00      	nop
 80043ba:	3724      	adds	r7, #36	; 0x24
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b095      	sub	sp, #84	; 0x54
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ea:	643b      	str	r3, [r7, #64]	; 0x40
 80043ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e6      	bne.n	80043cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3308      	adds	r3, #8
 8004404:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	61fb      	str	r3, [r7, #28]
   return(result);
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	64bb      	str	r3, [r7, #72]	; 0x48
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3308      	adds	r3, #8
 800441c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800441e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004420:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e5      	bne.n	80043fe <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004436:	2b01      	cmp	r3, #1
 8004438:	d118      	bne.n	800446c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	e853 3f00 	ldrex	r3, [r3]
 8004446:	60bb      	str	r3, [r7, #8]
   return(result);
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f023 0310 	bic.w	r3, r3, #16
 800444e:	647b      	str	r3, [r7, #68]	; 0x44
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	6979      	ldr	r1, [r7, #20]
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	e841 2300 	strex	r3, r2, [r1]
 8004464:	613b      	str	r3, [r7, #16]
   return(result);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e6      	bne.n	800443a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004480:	bf00      	nop
 8004482:	3754      	adds	r7, #84	; 0x54
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b09c      	sub	sp, #112	; 0x70
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d171      	bne.n	800458c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80044a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80044c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80044d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044d6:	e841 2300 	strex	r3, r2, [r1]
 80044da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e6      	bne.n	80044b0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3308      	adds	r3, #8
 80044e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	667b      	str	r3, [r7, #100]	; 0x64
 80044fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3308      	adds	r3, #8
 8004500:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004502:	647a      	str	r2, [r7, #68]	; 0x44
 8004504:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004508:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e5      	bne.n	80044e2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3308      	adds	r3, #8
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	623b      	str	r3, [r7, #32]
   return(result);
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800452c:	663b      	str	r3, [r7, #96]	; 0x60
 800452e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3308      	adds	r3, #8
 8004534:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004536:	633a      	str	r2, [r7, #48]	; 0x30
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800453c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453e:	e841 2300 	strex	r3, r2, [r1]
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1e5      	bne.n	8004516 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800454a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454c:	2220      	movs	r2, #32
 800454e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004556:	2b01      	cmp	r3, #1
 8004558:	d118      	bne.n	800458c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800455a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	60fb      	str	r3, [r7, #12]
   return(result);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0310 	bic.w	r3, r3, #16
 800456e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	69b9      	ldr	r1, [r7, #24]
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	617b      	str	r3, [r7, #20]
   return(result);
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e6      	bne.n	800455a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800458c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458e:	2200      	movs	r2, #0
 8004590:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004596:	2b01      	cmp	r3, #1
 8004598:	d107      	bne.n	80045aa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800459a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80045a0:	4619      	mov	r1, r3
 80045a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045a4:	f7fb ffa0 	bl	80004e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045a8:	e002      	b.n	80045b0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80045aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045ac:	f7ff f9bc 	bl	8003928 <HAL_UART_RxCpltCallback>
}
 80045b0:	bf00      	nop
 80045b2:	3770      	adds	r7, #112	; 0x70
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d109      	bne.n	80045e8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80045da:	085b      	lsrs	r3, r3, #1
 80045dc:	b29b      	uxth	r3, r3
 80045de:	4619      	mov	r1, r3
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7fb ff81 	bl	80004e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045e6:	e002      	b.n	80045ee <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7ff f9a7 	bl	800393c <HAL_UART_RxHalfCpltCallback>
}
 80045ee:	bf00      	nop
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b086      	sub	sp, #24
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004602:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004608:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004610:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461c:	2b80      	cmp	r3, #128	; 0x80
 800461e:	d109      	bne.n	8004634 <UART_DMAError+0x3e>
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b21      	cmp	r3, #33	; 0x21
 8004624:	d106      	bne.n	8004634 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2200      	movs	r2, #0
 800462a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800462e:	6978      	ldr	r0, [r7, #20]
 8004630:	f7ff fea2 	bl	8004378 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463e:	2b40      	cmp	r3, #64	; 0x40
 8004640:	d109      	bne.n	8004656 <UART_DMAError+0x60>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b22      	cmp	r3, #34	; 0x22
 8004646:	d106      	bne.n	8004656 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	2200      	movs	r2, #0
 800464c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004650:	6978      	ldr	r0, [r7, #20]
 8004652:	f7ff feb7 	bl	80043c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465c:	f043 0210 	orr.w	r2, r3, #16
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004666:	6978      	ldr	r0, [r7, #20]
 8004668:	f7ff f972 	bl	8003950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800466c:	bf00      	nop
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7ff f95c 	bl	8003950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6979      	ldr	r1, [r7, #20]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	613b      	str	r3, [r7, #16]
   return(result);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e6      	bne.n	80046a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7ff f914 	bl	8003914 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046ec:	bf00      	nop
 80046ee:	3720      	adds	r7, #32
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08c      	sub	sp, #48	; 0x30
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	4613      	mov	r3, r2
 8004714:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800471c:	2b20      	cmp	r3, #32
 800471e:	d142      	bne.n	80047a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8004726:	88fb      	ldrh	r3, [r7, #6]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e03b      	b.n	80047a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	461a      	mov	r2, r3
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f7ff fd78 	bl	8004238 <UART_Start_Receive_DMA>
 8004748:	4603      	mov	r3, r0
 800474a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800474e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004752:	2b00      	cmp	r3, #0
 8004754:	d124      	bne.n	80047a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475a:	2b01      	cmp	r3, #1
 800475c:	d11d      	bne.n	800479a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2210      	movs	r2, #16
 8004764:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	617b      	str	r3, [r7, #20]
   return(result);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f043 0310 	orr.w	r3, r3, #16
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
 8004786:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6a39      	ldr	r1, [r7, #32]
 800478a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	61fb      	str	r3, [r7, #28]
   return(result);
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e6      	bne.n	8004766 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8004798:	e002      	b.n	80047a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80047a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047a4:	e000      	b.n	80047a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80047a6:	2302      	movs	r3, #2
  }
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3730      	adds	r7, #48	; 0x30
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <memset>:
 80047b0:	4402      	add	r2, r0
 80047b2:	4603      	mov	r3, r0
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d100      	bne.n	80047ba <memset+0xa>
 80047b8:	4770      	bx	lr
 80047ba:	f803 1b01 	strb.w	r1, [r3], #1
 80047be:	e7f9      	b.n	80047b4 <memset+0x4>

080047c0 <__libc_init_array>:
 80047c0:	b570      	push	{r4, r5, r6, lr}
 80047c2:	4d0d      	ldr	r5, [pc, #52]	; (80047f8 <__libc_init_array+0x38>)
 80047c4:	4c0d      	ldr	r4, [pc, #52]	; (80047fc <__libc_init_array+0x3c>)
 80047c6:	1b64      	subs	r4, r4, r5
 80047c8:	10a4      	asrs	r4, r4, #2
 80047ca:	2600      	movs	r6, #0
 80047cc:	42a6      	cmp	r6, r4
 80047ce:	d109      	bne.n	80047e4 <__libc_init_array+0x24>
 80047d0:	4d0b      	ldr	r5, [pc, #44]	; (8004800 <__libc_init_array+0x40>)
 80047d2:	4c0c      	ldr	r4, [pc, #48]	; (8004804 <__libc_init_array+0x44>)
 80047d4:	f000 f826 	bl	8004824 <_init>
 80047d8:	1b64      	subs	r4, r4, r5
 80047da:	10a4      	asrs	r4, r4, #2
 80047dc:	2600      	movs	r6, #0
 80047de:	42a6      	cmp	r6, r4
 80047e0:	d105      	bne.n	80047ee <__libc_init_array+0x2e>
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
 80047e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e8:	4798      	blx	r3
 80047ea:	3601      	adds	r6, #1
 80047ec:	e7ee      	b.n	80047cc <__libc_init_array+0xc>
 80047ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f2:	4798      	blx	r3
 80047f4:	3601      	adds	r6, #1
 80047f6:	e7f2      	b.n	80047de <__libc_init_array+0x1e>
 80047f8:	080048d4 	.word	0x080048d4
 80047fc:	080048d4 	.word	0x080048d4
 8004800:	080048d4 	.word	0x080048d4
 8004804:	080048d8 	.word	0x080048d8

08004808 <memcpy>:
 8004808:	440a      	add	r2, r1
 800480a:	4291      	cmp	r1, r2
 800480c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004810:	d100      	bne.n	8004814 <memcpy+0xc>
 8004812:	4770      	bx	lr
 8004814:	b510      	push	{r4, lr}
 8004816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800481a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800481e:	4291      	cmp	r1, r2
 8004820:	d1f9      	bne.n	8004816 <memcpy+0xe>
 8004822:	bd10      	pop	{r4, pc}

08004824 <_init>:
 8004824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004826:	bf00      	nop
 8004828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482a:	bc08      	pop	{r3}
 800482c:	469e      	mov	lr, r3
 800482e:	4770      	bx	lr

08004830 <_fini>:
 8004830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004832:	bf00      	nop
 8004834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004836:	bc08      	pop	{r3}
 8004838:	469e      	mov	lr, r3
 800483a:	4770      	bx	lr
