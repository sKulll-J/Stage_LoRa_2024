
ruche_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800b478  0800b478  0001b478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b964  0800b964  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b964  0800b964  0001b964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b96c  0800b96c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b96c  0800b96c  0001b96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b970  0800b970  0001b970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  200001dc  0800bb50  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008b4  0800bb50  000208b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a94  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003417  00000000  00000000  00039ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001758  00000000  00000000  0003d100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000122c  00000000  00000000  0003e858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ac9a  00000000  00000000  0003fa84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a9c6  00000000  00000000  0006a71e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e34d  00000000  00000000  000850e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007570  00000000  00000000  00193434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0019a9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b45c 	.word	0x0800b45c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800b45c 	.word	0x0800b45c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <DHT_Init>:

data myDt;

//initialise le dht22
void DHT_Init(GPIO_TypeDef* _GPIO_Port, uint16_t _GPIO_Pin, TIM_HandleTypeDef* _tim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	817b      	strh	r3, [r7, #10]
	myDt.GPIO_Port = _GPIO_Port;
 8000f52:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <DHT_Init+0x34>)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	60d3      	str	r3, [r2, #12]
	myDt.GPIO_Pin = _GPIO_Pin;
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <DHT_Init+0x34>)
 8000f5a:	897b      	ldrh	r3, [r7, #10]
 8000f5c:	8213      	strh	r3, [r2, #16]
	myDt.tim = _tim;
 8000f5e:	4a06      	ldr	r2, [pc, #24]	; (8000f78 <DHT_Init+0x34>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6093      	str	r3, [r2, #8]
	  HAL_TIM_Base_Start(myDt.tim);
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <DHT_Init+0x34>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f005 fddd 	bl	8006b28 <HAL_TIM_Base_Start>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200001f8 	.word	0x200001f8

08000f7c <delay_us>:

void delay_us (uint16_t us)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(myDt.tim,0);  // set the counter value a 0
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <delay_us+0x34>)
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(myDt.tim) < us);  // wait for the counter to reach the us input in the parameter
 8000f90:	bf00      	nop
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <delay_us+0x34>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d3f8      	bcc.n	8000f92 <delay_us+0x16>
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	200001f8 	.word	0x200001f8

08000fb4 <bitPosToVal>:

uint8_t bitPosToVal(uint16_t mot) //recupere la position du bit a 1 dans un registre
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0; i<16;i++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	81fb      	strh	r3, [r7, #14]
 8000fc2:	e00b      	b.n	8000fdc <bitPosToVal+0x28>
	{
		if((mot>>i)==1)
 8000fc4:	88fa      	ldrh	r2, [r7, #6]
 8000fc6:	89fb      	ldrh	r3, [r7, #14]
 8000fc8:	fa42 f303 	asr.w	r3, r2, r3
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d102      	bne.n	8000fd6 <bitPosToVal+0x22>
			return i;
 8000fd0:	89fb      	ldrh	r3, [r7, #14]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	e006      	b.n	8000fe4 <bitPosToVal+0x30>
	for(uint16_t i=0; i<16;i++)
 8000fd6:	89fb      	ldrh	r3, [r7, #14]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	81fb      	strh	r3, [r7, #14]
 8000fdc:	89fb      	ldrh	r3, [r7, #14]
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	d9f0      	bls.n	8000fc4 <bitPosToVal+0x10>
	}
	return 0;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <verifcation_rep>:


uint8_t verifcation_rep(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
	uint8_t reponse = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f001 fbd2 	bl	80027a4 <HAL_Delay>
	//initialisation du capteur
	myDt.GPIO_Port->MODER |= (0x1UL<<(2*bitPosToVal(myDt.GPIO_Pin)));
 8001000:	4b30      	ldr	r3, [pc, #192]	; (80010c4 <verifcation_rep+0xd4>)
 8001002:	8a1b      	ldrh	r3, [r3, #16]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ffd5 	bl	8000fb4 <bitPosToVal>
 800100a:	4603      	mov	r3, r0
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2201      	movs	r2, #1
 8001010:	fa02 f103 	lsl.w	r1, r2, r3
 8001014:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <verifcation_rep+0xd4>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <verifcation_rep+0xd4>)
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	430a      	orrs	r2, r1
 8001020:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(myDt.GPIO_Port, myDt.GPIO_Pin, 0);
 8001022:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <verifcation_rep+0xd4>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <verifcation_rep+0xd4>)
 8001028:	8a11      	ldrh	r1, [r2, #16]
 800102a:	2200      	movs	r2, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f003 ff31 	bl	8004e94 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f001 fbb6 	bl	80027a4 <HAL_Delay>
	myDt.GPIO_Port->MODER &= ~(0x3UL<<(2*bitPosToVal(myDt.GPIO_Pin)));
 8001038:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <verifcation_rep+0xd4>)
 800103a:	8a1b      	ldrh	r3, [r3, #16]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ffb9 	bl	8000fb4 <bitPosToVal>
 8001042:	4603      	mov	r3, r0
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43d9      	mvns	r1, r3
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <verifcation_rep+0xd4>)
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <verifcation_rep+0xd4>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	400a      	ands	r2, r1
 800105a:	601a      	str	r2, [r3, #0]
//	myDt.GPIO_Port->MODER &= ~(GPIO_MODER_MODER0);
	//récupération de la présence

	delay_us(40);                                     //attente de la fin du pin 0
 800105c:	2028      	movs	r0, #40	; 0x28
 800105e:	f7ff ff8d 	bl	8000f7c <delay_us>
	if (!(HAL_GPIO_ReadPin (myDt.GPIO_Port, myDt.GPIO_Pin)))	//si la ligne est a 0
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <verifcation_rep+0xd4>)
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <verifcation_rep+0xd4>)
 8001068:	8a12      	ldrh	r2, [r2, #16]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f003 fef9 	bl	8004e64 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d112      	bne.n	800109e <verifcation_rep+0xae>
		{
			delay_us (80);								//attenjte de la montée a 1
 8001078:	2050      	movs	r0, #80	; 0x50
 800107a:	f7ff ff7f 	bl	8000f7c <delay_us>
			if ((HAL_GPIO_ReadPin (myDt.GPIO_Port, myDt.GPIO_Pin)))
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <verifcation_rep+0xd4>)
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	4a10      	ldr	r2, [pc, #64]	; (80010c4 <verifcation_rep+0xd4>)
 8001084:	8a12      	ldrh	r2, [r2, #16]
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f003 feeb 	bl	8004e64 <HAL_GPIO_ReadPin>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <verifcation_rep+0xaa>
				reponse = 1;	//si retour à 1 réponse à 1
 8001094:	2301      	movs	r3, #1
 8001096:	71fb      	strb	r3, [r7, #7]
			else return -1;									//sinon rép -1
		}
	else return 0;
	while ((HAL_GPIO_ReadPin (myDt.GPIO_Port, myDt.GPIO_Pin)));   // attente de retour de la ligne au niveau initial
 8001098:	e003      	b.n	80010a2 <verifcation_rep+0xb2>
			else return -1;									//sinon rép -1
 800109a:	23ff      	movs	r3, #255	; 0xff
 800109c:	e00d      	b.n	80010ba <verifcation_rep+0xca>
	else return 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	e00b      	b.n	80010ba <verifcation_rep+0xca>
	while ((HAL_GPIO_ReadPin (myDt.GPIO_Port, myDt.GPIO_Pin)));   // attente de retour de la ligne au niveau initial
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <verifcation_rep+0xd4>)
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <verifcation_rep+0xd4>)
 80010a8:	8a12      	ldrh	r2, [r2, #16]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 fed9 	bl	8004e64 <HAL_GPIO_ReadPin>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1f4      	bne.n	80010a2 <verifcation_rep+0xb2>
	return reponse;
 80010b8:	79fb      	ldrb	r3, [r7, #7]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200001f8 	.word	0x200001f8

080010c8 <DHT_Read>:

uint32_t DHT_Read (void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
	uint32_t i,j;

	for (j=0;j<32;j++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	e03a      	b.n	800114a <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (myDt.GPIO_Port, myDt.GPIO_Pin)));   // On attends que le pin soit a l'état haut
 80010d4:	bf00      	nop
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <DHT_Read+0x94>)
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	4a20      	ldr	r2, [pc, #128]	; (800115c <DHT_Read+0x94>)
 80010dc:	8a12      	ldrh	r2, [r2, #16]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 febf 	bl	8004e64 <HAL_GPIO_ReadPin>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0f4      	beq.n	80010d6 <DHT_Read+0xe>
		delay_us (40);   									// attente de 40 us
 80010ec:	2028      	movs	r0, #40	; 0x28
 80010ee:	f7ff ff45 	bl	8000f7c <delay_us>
		if (!(HAL_GPIO_ReadPin (myDt.GPIO_Port, myDt.GPIO_Pin)))   //si le pin est à 0
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <DHT_Read+0x94>)
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	4a19      	ldr	r2, [pc, #100]	; (800115c <DHT_Read+0x94>)
 80010f8:	8a12      	ldrh	r2, [r2, #16]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 feb1 	bl	8004e64 <HAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d109      	bne.n	800111c <DHT_Read+0x54>
		{
			i&= ~(1<<(31-j));   						// on écrit 0
 8001108:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	fa22 f303 	lsr.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	4013      	ands	r3, r2
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	e007      	b.n	800112c <DHT_Read+0x64>
		}
		else i|= (1<<(31-j));  						// si le pin est à 1, on ecrit 1
 800111c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	fa22 f303 	lsr.w	r3, r2, r3
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	4313      	orrs	r3, r2
 800112a:	607b      	str	r3, [r7, #4]
		while ((HAL_GPIO_ReadPin (myDt.GPIO_Port, myDt.GPIO_Pin)));  // on attends le retour à l'état initial
 800112c:	bf00      	nop
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <DHT_Read+0x94>)
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <DHT_Read+0x94>)
 8001134:	8a12      	ldrh	r2, [r2, #16]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f003 fe93 	bl	8004e64 <HAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f4      	bne.n	800112e <DHT_Read+0x66>
	for (j=0;j<32;j++)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	2b1f      	cmp	r3, #31
 800114e:	d9c1      	bls.n	80010d4 <DHT_Read+0xc>
	}
	return i;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200001f8 	.word	0x200001f8

08001160 <DHT_GetValue>:

void DHT_GetValue()
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	uint32_t val;
	if(verifcation_rep()==1)
 8001166:	f7ff ff43 	bl	8000ff0 <verifcation_rep>
 800116a:	4603      	mov	r3, r0
 800116c:	2b01      	cmp	r3, #1
 800116e:	d103      	bne.n	8001178 <DHT_GetValue+0x18>
		val = DHT_Read();
 8001170:	f7ff ffaa 	bl	80010c8 <DHT_Read>
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	e001      	b.n	800117c <DHT_GetValue+0x1c>
	else
		val=0;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
	myDt.humi = (val>>16)/10;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	0c1b      	lsrs	r3, r3, #16
 8001180:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <DHT_GetValue+0x58>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	08db      	lsrs	r3, r3, #3
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <DHT_GetValue+0x5c>)
 8001192:	edc3 7a00 	vstr	s15, [r3]
	myDt.temp= (val&0xFFFF)/10;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	b29b      	uxth	r3, r3
 800119a:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <DHT_GetValue+0x58>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	08db      	lsrs	r3, r3, #3
 80011a2:	ee07 3a90 	vmov	s15, r3
 80011a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <DHT_GetValue+0x5c>)
 80011ac:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	cccccccd 	.word	0xcccccccd
 80011bc:	200001f8 	.word	0x200001f8

080011c0 <DHT_GetHumi>:

float DHT_GetHumi()
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
	return myDt.humi;
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <DHT_GetHumi+0x18>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	ee07 3a90 	vmov	s15, r3
}
 80011cc:	eeb0 0a67 	vmov.f32	s0, s15
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	200001f8 	.word	0x200001f8

080011dc <DHT_GetTemp>:

float DHT_GetTemp()
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
	return myDt.temp;
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <DHT_GetTemp+0x18>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	ee07 3a90 	vmov	s15, r3
}
 80011e8:	eeb0 0a67 	vmov.f32	s0, s15
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	200001f8 	.word	0x200001f8

080011f8 <HAL_UARTEx_RxEventCallback>:
	float battery;
}DatasStruct;
DatasStruct myDatas;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80011f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011fc:	b087      	sub	sp, #28
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	807b      	strh	r3, [r7, #2]
	#if SERIAL_INPUT
	if(huart == serial)  //huart->Instance == USART2
 8001206:	4b83      	ldr	r3, [pc, #524]	; (8001414 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	429a      	cmp	r2, r3
 800120e:	d178      	bne.n	8001302 <HAL_UARTEx_RxEventCallback+0x10a>
	{
 8001210:	466b      	mov	r3, sp
 8001212:	461e      	mov	r6, r3
		memcpy(mainbff, rcvbff, Size);
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	461a      	mov	r2, r3
 8001218:	497f      	ldr	r1, [pc, #508]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 800121a:	4880      	ldr	r0, [pc, #512]	; (800141c <HAL_UARTEx_RxEventCallback+0x224>)
 800121c:	f008 f8a3 	bl	8009366 <memcpy>
		uint8_t tmpbff[strlen(rcvbff)+1];
 8001220:	487d      	ldr	r0, [pc, #500]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 8001222:	f7ff f825 	bl	8000270 <strlen>
 8001226:	4603      	mov	r3, r0
 8001228:	1c59      	adds	r1, r3, #1
 800122a:	460b      	mov	r3, r1
 800122c:	3b01      	subs	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	2300      	movs	r3, #0
 8001232:	4688      	mov	r8, r1
 8001234:	4699      	mov	r9, r3
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800124a:	2300      	movs	r3, #0
 800124c:	460c      	mov	r4, r1
 800124e:	461d      	mov	r5, r3
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	00eb      	lsls	r3, r5, #3
 800125a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800125e:	00e2      	lsls	r2, r4, #3
 8001260:	1dcb      	adds	r3, r1, #7
 8001262:	08db      	lsrs	r3, r3, #3
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	ebad 0d03 	sub.w	sp, sp, r3
 800126a:	466b      	mov	r3, sp
 800126c:	3300      	adds	r3, #0
 800126e:	60bb      	str	r3, [r7, #8]
					tmpbff[0]='>';
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	223e      	movs	r2, #62	; 0x3e
 8001274:	701a      	strb	r2, [r3, #0]
					memcpy(&tmpbff[1], rcvbff, strlen(rcvbff));
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1c5c      	adds	r4, r3, #1
 800127a:	4867      	ldr	r0, [pc, #412]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 800127c:	f7fe fff8 	bl	8000270 <strlen>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4964      	ldr	r1, [pc, #400]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 8001286:	4620      	mov	r0, r4
 8001288:	f008 f86d 	bl	8009366 <memcpy>

					HAL_UART_Transmit(serial,(uint8_t*)tmpbff,strlen(rcvbff)+1,10);
 800128c:	4b61      	ldr	r3, [pc, #388]	; (8001414 <HAL_UARTEx_RxEventCallback+0x21c>)
 800128e:	681c      	ldr	r4, [r3, #0]
 8001290:	4861      	ldr	r0, [pc, #388]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 8001292:	f7fe ffed 	bl	8000270 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	b29b      	uxth	r3, r3
 800129a:	3301      	adds	r3, #1
 800129c:	b29a      	uxth	r2, r3
 800129e:	230a      	movs	r3, #10
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	4620      	mov	r0, r4
 80012a4:	f005 ff7c 	bl	80071a0 <HAL_UART_Transmit>

		HAL_UART_Transmit(lora,(uint8_t*)rcvbff,strlen(rcvbff),10);
 80012a8:	4b5d      	ldr	r3, [pc, #372]	; (8001420 <HAL_UARTEx_RxEventCallback+0x228>)
 80012aa:	681c      	ldr	r4, [r3, #0]
 80012ac:	485a      	ldr	r0, [pc, #360]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 80012ae:	f7fe ffdf 	bl	8000270 <strlen>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	230a      	movs	r3, #10
 80012b8:	4957      	ldr	r1, [pc, #348]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 80012ba:	4620      	mov	r0, r4
 80012bc:	f005 ff70 	bl	80071a0 <HAL_UART_Transmit>



		for(int i=0; i<RX_BUFF_SIZE; i++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e007      	b.n	80012d6 <HAL_UARTEx_RxEventCallback+0xde>
			rcvbff[i] = 0x00;
 80012c6:	4a54      	ldr	r2, [pc, #336]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	4413      	add	r3, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<RX_BUFF_SIZE; i++)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3301      	adds	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2bc7      	cmp	r3, #199	; 0xc7
 80012da:	ddf4      	ble.n	80012c6 <HAL_UARTEx_RxEventCallback+0xce>
		rcvbff[0] = '\0';
 80012dc:	4b4e      	ldr	r3, [pc, #312]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]

		HAL_UARTEx_ReceiveToIdle_DMA(serial, rcvbff, RX_BUFF_SIZE);
 80012e2:	4b4c      	ldr	r3, [pc, #304]	; (8001414 <HAL_UARTEx_RxEventCallback+0x21c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	22c8      	movs	r2, #200	; 0xc8
 80012e8:	494b      	ldr	r1, [pc, #300]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 80012ea:	4618      	mov	r0, r3
 80012ec:	f007 f9c6 	bl	800867c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80012f0:	4b4c      	ldr	r3, [pc, #304]	; (8001424 <HAL_UARTEx_RxEventCallback+0x22c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b4b      	ldr	r3, [pc, #300]	; (8001424 <HAL_UARTEx_RxEventCallback+0x22c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0204 	bic.w	r2, r2, #4
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	46b5      	mov	sp, r6
	}
	#endif
	if(huart == lora)  //huart->Instance == USART2
 8001302:	4b47      	ldr	r3, [pc, #284]	; (8001420 <HAL_UARTEx_RxEventCallback+0x228>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	429a      	cmp	r2, r3
 800130a:	d17e      	bne.n	800140a <HAL_UARTEx_RxEventCallback+0x212>
		{
			memcpy(mainbff, rcvbff, Size);
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	461a      	mov	r2, r3
 8001310:	4941      	ldr	r1, [pc, #260]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 8001312:	4842      	ldr	r0, [pc, #264]	; (800141c <HAL_UARTEx_RxEventCallback+0x224>)
 8001314:	f008 f827 	bl	8009366 <memcpy>


			HAL_UART_Transmit(serial,(uint8_t*)rcvbff,strlen(rcvbff),60);
 8001318:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <HAL_UARTEx_RxEventCallback+0x21c>)
 800131a:	681c      	ldr	r4, [r3, #0]
 800131c:	483e      	ldr	r0, [pc, #248]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 800131e:	f7fe ffa7 	bl	8000270 <strlen>
 8001322:	4603      	mov	r3, r0
 8001324:	b29a      	uxth	r2, r3
 8001326:	233c      	movs	r3, #60	; 0x3c
 8001328:	493b      	ldr	r1, [pc, #236]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 800132a:	4620      	mov	r0, r4
 800132c:	f005 ff38 	bl	80071a0 <HAL_UART_Transmit>



			if(strstr(rcvbff, "+MSG: Done\r\n")!=NULL)
 8001330:	493d      	ldr	r1, [pc, #244]	; (8001428 <HAL_UARTEx_RxEventCallback+0x230>)
 8001332:	4839      	ldr	r0, [pc, #228]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 8001334:	f007 ff89 	bl	800924a <strstr>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00c      	beq.n	8001358 <HAL_UARTEx_RxEventCallback+0x160>
			{
				HAL_UART_Transmit(serial,(uint8_t*)"Valid data\n",11,10);
 800133e:	4b35      	ldr	r3, [pc, #212]	; (8001414 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	230a      	movs	r3, #10
 8001344:	220b      	movs	r2, #11
 8001346:	4939      	ldr	r1, [pc, #228]	; (800142c <HAL_UARTEx_RxEventCallback+0x234>)
 8001348:	f005 ff2a 	bl	80071a0 <HAL_UART_Transmit>
				 // pret a envoyer un nouveau message
				veille_rdy=1;
 800134c:	4b38      	ldr	r3, [pc, #224]	; (8001430 <HAL_UARTEx_RxEventCallback+0x238>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]
				wait_msg = 0;
 8001352:	4b38      	ldr	r3, [pc, #224]	; (8001434 <HAL_UARTEx_RxEventCallback+0x23c>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
			}
			if(strstr(rcvbff, "+AT: OK\r\n")!=NULL || strstr(rcvbff, "+LOWPOWER: WAKEUP\r\n")!=NULL)
 8001358:	4937      	ldr	r1, [pc, #220]	; (8001438 <HAL_UARTEx_RxEventCallback+0x240>)
 800135a:	482f      	ldr	r0, [pc, #188]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 800135c:	f007 ff75 	bl	800924a <strstr>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d106      	bne.n	8001374 <HAL_UARTEx_RxEventCallback+0x17c>
 8001366:	4935      	ldr	r1, [pc, #212]	; (800143c <HAL_UARTEx_RxEventCallback+0x244>)
 8001368:	482b      	ldr	r0, [pc, #172]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 800136a:	f007 ff6e 	bl	800924a <strstr>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <HAL_UARTEx_RxEventCallback+0x188>
			{
				at_rdy=1; // pret a envoyer un nouveau message
 8001374:	4b32      	ldr	r3, [pc, #200]	; (8001440 <HAL_UARTEx_RxEventCallback+0x248>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]
				wait_msg=0;
 800137a:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <HAL_UARTEx_RxEventCallback+0x23c>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
			}
			if(strstr(rcvbff, "+JOIN: Network joined\r\n")!=NULL || strstr(rcvbff, "+JOIN: Joined already\r\n")!=NULL)
 8001380:	4930      	ldr	r1, [pc, #192]	; (8001444 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001382:	4825      	ldr	r0, [pc, #148]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 8001384:	f007 ff61 	bl	800924a <strstr>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d106      	bne.n	800139c <HAL_UARTEx_RxEventCallback+0x1a4>
 800138e:	492e      	ldr	r1, [pc, #184]	; (8001448 <HAL_UARTEx_RxEventCallback+0x250>)
 8001390:	4821      	ldr	r0, [pc, #132]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 8001392:	f007 ff5a 	bl	800924a <strstr>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00f      	beq.n	80013bc <HAL_UARTEx_RxEventCallback+0x1c4>
			{
				joined_rdy=1; // pret a envoyer un nouveau message
 800139c:	4b2b      	ldr	r3, [pc, #172]	; (800144c <HAL_UARTEx_RxEventCallback+0x254>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(serial,(uint8_t*)"Ready to send\n",14,10);
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <HAL_UARTEx_RxEventCallback+0x21c>)
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	230a      	movs	r3, #10
 80013a8:	220e      	movs	r2, #14
 80013aa:	4929      	ldr	r1, [pc, #164]	; (8001450 <HAL_UARTEx_RxEventCallback+0x258>)
 80013ac:	f005 fef8 	bl	80071a0 <HAL_UART_Transmit>
				get_data=1;
 80013b0:	4b28      	ldr	r3, [pc, #160]	; (8001454 <HAL_UARTEx_RxEventCallback+0x25c>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
				wait_msg=0;
 80013b6:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <HAL_UARTEx_RxEventCallback+0x23c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
			}

			HAL_UART_Transmit(serial,(uint8_t*)"____\n",5,10);
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_UARTEx_RxEventCallback+0x21c>)
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	230a      	movs	r3, #10
 80013c2:	2205      	movs	r2, #5
 80013c4:	4924      	ldr	r1, [pc, #144]	; (8001458 <HAL_UARTEx_RxEventCallback+0x260>)
 80013c6:	f005 feeb 	bl	80071a0 <HAL_UART_Transmit>

			for(int i=0; i<RX_BUFF_SIZE; i++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	e007      	b.n	80013e0 <HAL_UARTEx_RxEventCallback+0x1e8>
				rcvbff[i] = 0x00;
 80013d0:	4a11      	ldr	r2, [pc, #68]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4413      	add	r3, r2
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<RX_BUFF_SIZE; i++)
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	3301      	adds	r3, #1
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	2bc7      	cmp	r3, #199	; 0xc7
 80013e4:	ddf4      	ble.n	80013d0 <HAL_UARTEx_RxEventCallback+0x1d8>
			rcvbff[0] = '\0';
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]

			HAL_UARTEx_ReceiveToIdle_DMA(lora, rcvbff, RX_BUFF_SIZE);
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <HAL_UARTEx_RxEventCallback+0x228>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	22c8      	movs	r2, #200	; 0xc8
 80013f2:	4909      	ldr	r1, [pc, #36]	; (8001418 <HAL_UARTEx_RxEventCallback+0x220>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f007 f941 	bl	800867c <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_UARTEx_RxEventCallback+0x264>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <HAL_UARTEx_RxEventCallback+0x264>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0204 	bic.w	r2, r2, #4
 8001408:	601a      	str	r2, [r3, #0]
		}
}
 800140a:	bf00      	nop
 800140c:	371c      	adds	r7, #28
 800140e:	46bd      	mov	sp, r7
 8001410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001414:	20000004 	.word	0x20000004
 8001418:	20000550 	.word	0x20000550
 800141c:	20000618 	.word	0x20000618
 8001420:	20000000 	.word	0x20000000
 8001424:	20000508 	.word	0x20000508
 8001428:	0800b478 	.word	0x0800b478
 800142c:	0800b488 	.word	0x0800b488
 8001430:	20000734 	.word	0x20000734
 8001434:	20000740 	.word	0x20000740
 8001438:	0800b494 	.word	0x0800b494
 800143c:	0800b4a0 	.word	0x0800b4a0
 8001440:	20000728 	.word	0x20000728
 8001444:	0800b4b4 	.word	0x0800b4b4
 8001448:	0800b4cc 	.word	0x0800b4cc
 800144c:	2000072c 	.word	0x2000072c
 8001450:	0800b4e4 	.word	0x0800b4e4
 8001454:	20000738 	.word	0x20000738
 8001458:	0800b4f4 	.word	0x0800b4f4
 800145c:	20000478 	.word	0x20000478

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001464:	b08f      	sub	sp, #60	; 0x3c
 8001466:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001468:	f001 f920 	bl	80026ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146c:	f000 fa24 	bl	80018b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001470:	f000 fc3e 	bl	8001cf0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001474:	f000 fc02 	bl	8001c7c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001478:	f000 fbd0 	bl	8001c1c <MX_USART2_UART_Init>
  MX_RTC_Init();
 800147c:	f000 faf4 	bl	8001a68 <MX_RTC_Init>
  MX_UART4_Init();
 8001480:	f000 fb68 	bl	8001b54 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001484:	f000 fb9a 	bl	8001bbc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001488:	f000 fa76 	bl	8001978 <MX_ADC1_Init>
  MX_TIM3_Init();
 800148c:	f000 fb14 	bl	8001ab8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  DHT_Init(DHT_GPIO_Port, DHT_Pin, &htim3);
 8001490:	4a9f      	ldr	r2, [pc, #636]	; (8001710 <main+0x2b0>)
 8001492:	2120      	movs	r1, #32
 8001494:	489f      	ldr	r0, [pc, #636]	; (8001714 <main+0x2b4>)
 8001496:	f7ff fd55 	bl	8000f44 <DHT_Init>

  HAL_UART_Transmit(serial, (uint8_t *)"UART2 INIT\n" , 11, 10);
 800149a:	4b9f      	ldr	r3, [pc, #636]	; (8001718 <main+0x2b8>)
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	230a      	movs	r3, #10
 80014a0:	220b      	movs	r2, #11
 80014a2:	499e      	ldr	r1, [pc, #632]	; (800171c <main+0x2bc>)
 80014a4:	f005 fe7c 	bl	80071a0 <HAL_UART_Transmit>

    //uint8_t premessage[55] = "AT+MSG\r\n";

    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	2120      	movs	r1, #32
 80014ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b0:	f003 fcf0 	bl	8004e94 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80014b4:	2064      	movs	r0, #100	; 0x64
 80014b6:	f001 f975 	bl	80027a4 <HAL_Delay>
    DHT_Init(DHT_GPIO_Port, DHT_Pin, &htim3);
 80014ba:	4a95      	ldr	r2, [pc, #596]	; (8001710 <main+0x2b0>)
 80014bc:	2120      	movs	r1, #32
 80014be:	4895      	ldr	r0, [pc, #596]	; (8001714 <main+0x2b4>)
 80014c0:	f7ff fd40 	bl	8000f44 <DHT_Init>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014c4:	2120      	movs	r1, #32
 80014c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ca:	f003 fcfb 	bl	8004ec4 <HAL_GPIO_TogglePin>

  //HAL_TIM_Base_Start_IT(&htim16);

	 //timer_val = __HAL_TIM_GET_COUNTER(&htim16);

  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, SLEEP_TIME, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 80014ce:	2204      	movs	r2, #4
 80014d0:	211e      	movs	r1, #30
 80014d2:	4893      	ldr	r0, [pc, #588]	; (8001720 <main+0x2c0>)
 80014d4:	f005 f9ae 	bl	8006834 <HAL_RTCEx_SetWakeUpTimer_IT>

  HAL_UARTEx_ReceiveToIdle_DMA(serial, rcvbff, RX_BUFF_SIZE);
 80014d8:	4b8f      	ldr	r3, [pc, #572]	; (8001718 <main+0x2b8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	22c8      	movs	r2, #200	; 0xc8
 80014de:	4991      	ldr	r1, [pc, #580]	; (8001724 <main+0x2c4>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f007 f8cb 	bl	800867c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80014e6:	4b90      	ldr	r3, [pc, #576]	; (8001728 <main+0x2c8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b8e      	ldr	r3, [pc, #568]	; (8001728 <main+0x2c8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0204 	bic.w	r2, r2, #4
 80014f4:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(lora, rcvbff, RX_BUFF_SIZE);
 80014f6:	4b8d      	ldr	r3, [pc, #564]	; (800172c <main+0x2cc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	22c8      	movs	r2, #200	; 0xc8
 80014fc:	4989      	ldr	r1, [pc, #548]	; (8001724 <main+0x2c4>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f007 f8bc 	bl	800867c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 8001504:	4b8a      	ldr	r3, [pc, #552]	; (8001730 <main+0x2d0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	4b89      	ldr	r3, [pc, #548]	; (8001730 <main+0x2d0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0204 	bic.w	r2, r2, #4
 8001512:	601a      	str	r2, [r3, #0]

    /* USER CODE BEGIN 3 */
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	/*LoRa send*/

	  if(!at_rdy && !wait_msg )
 8001514:	4b87      	ldr	r3, [pc, #540]	; (8001734 <main+0x2d4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d113      	bne.n	8001544 <main+0xe4>
 800151c:	4b86      	ldr	r3, [pc, #536]	; (8001738 <main+0x2d8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10f      	bne.n	8001544 <main+0xe4>
	  {
		  verifcation_rep();
 8001524:	f7ff fd64 	bl	8000ff0 <verifcation_rep>
		  HAL_Delay(200);
 8001528:	20c8      	movs	r0, #200	; 0xc8
 800152a:	f001 f93b 	bl	80027a4 <HAL_Delay>
		  HAL_UART_Transmit(lora, (uint8_t *)"AT\r\n" , 4, 10);
 800152e:	4b7f      	ldr	r3, [pc, #508]	; (800172c <main+0x2cc>)
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	230a      	movs	r3, #10
 8001534:	2204      	movs	r2, #4
 8001536:	4981      	ldr	r1, [pc, #516]	; (800173c <main+0x2dc>)
 8001538:	f005 fe32 	bl	80071a0 <HAL_UART_Transmit>
		  wait_msg=1;
 800153c:	4b7e      	ldr	r3, [pc, #504]	; (8001738 <main+0x2d8>)
 800153e:	2201      	movs	r2, #1
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	e19a      	b.n	800187a <main+0x41a>
	  }
	  else if(at_rdy && !wait_msg && !joined_rdy)
 8001544:	4b7b      	ldr	r3, [pc, #492]	; (8001734 <main+0x2d4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d012      	beq.n	8001572 <main+0x112>
 800154c:	4b7a      	ldr	r3, [pc, #488]	; (8001738 <main+0x2d8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10e      	bne.n	8001572 <main+0x112>
 8001554:	4b7a      	ldr	r3, [pc, #488]	; (8001740 <main+0x2e0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d10a      	bne.n	8001572 <main+0x112>
	  {
		  HAL_UART_Transmit(lora, (uint8_t *)"AT+JOIN\r\n" , 9, 10);
 800155c:	4b73      	ldr	r3, [pc, #460]	; (800172c <main+0x2cc>)
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	230a      	movs	r3, #10
 8001562:	2209      	movs	r2, #9
 8001564:	4977      	ldr	r1, [pc, #476]	; (8001744 <main+0x2e4>)
 8001566:	f005 fe1b 	bl	80071a0 <HAL_UART_Transmit>
		  wait_msg=1;
 800156a:	4b73      	ldr	r3, [pc, #460]	; (8001738 <main+0x2d8>)
 800156c:	2201      	movs	r2, #1
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	e183      	b.n	800187a <main+0x41a>
	  }
	  else if(joined_rdy && get_data && !message_rdy)
 8001572:	4b73      	ldr	r3, [pc, #460]	; (8001740 <main+0x2e0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 80f6 	beq.w	8001768 <main+0x308>
 800157c:	4b72      	ldr	r3, [pc, #456]	; (8001748 <main+0x2e8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 80f1 	beq.w	8001768 <main+0x308>
 8001586:	4b71      	ldr	r3, [pc, #452]	; (800174c <main+0x2ec>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	f040 80ec 	bne.w	8001768 <main+0x308>
	  {
		  //humidite
		  DHT_GetValue();
 8001590:	f7ff fde6 	bl	8001160 <DHT_GetValue>
		  //if(verifcation_rep()==1)
		  //HAL_UART_Transmit(&huart2, (uint8_t *) "verif\n", 6, 20);
		  myDatas.Hi = (int)DHT_GetHumi();
 8001594:	f7ff fe14 	bl	80011c0 <DHT_GetHumi>
 8001598:	eef0 7a40 	vmov.f32	s15, s0
 800159c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a0:	ee17 2a90 	vmov	r2, s15
 80015a4:	4b6a      	ldr	r3, [pc, #424]	; (8001750 <main+0x2f0>)
 80015a6:	601a      	str	r2, [r3, #0]
		  myDatas.Ho = 0;
 80015a8:	4b69      	ldr	r3, [pc, #420]	; (8001750 <main+0x2f0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]

		  //températures
		  myDatas.Ti = DHT_GetTemp();
 80015ae:	f7ff fe15 	bl	80011dc <DHT_GetTemp>
 80015b2:	eef0 7a40 	vmov.f32	s15, s0
 80015b6:	4b66      	ldr	r3, [pc, #408]	; (8001750 <main+0x2f0>)
 80015b8:	edc3 7a01 	vstr	s15, [r3, #4]
		  myDatas.To = 0.0;
 80015bc:	4b64      	ldr	r3, [pc, #400]	; (8001750 <main+0x2f0>)
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	60da      	str	r2, [r3, #12]

		  //poids
		  myDatas.poids = 00;
 80015c4:	4b62      	ldr	r3, [pc, #392]	; (8001750 <main+0x2f0>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]

		  //presence
		  myDatas.presence = (HAL_GPIO_ReadPin(PresPins_GPIO_Port, PresPins_Pin)!=GPIO_PIN_SET);
 80015ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ce:	4851      	ldr	r0, [pc, #324]	; (8001714 <main+0x2b4>)
 80015d0:	f003 fc48 	bl	8004e64 <HAL_GPIO_ReadPin>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	bf14      	ite	ne
 80015da:	2301      	movne	r3, #1
 80015dc:	2300      	moveq	r3, #0
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b5b      	ldr	r3, [pc, #364]	; (8001750 <main+0x2f0>)
 80015e4:	611a      	str	r2, [r3, #16]

		  //battery
		  HAL_ADC_Init(&hadc1);
 80015e6:	485b      	ldr	r0, [pc, #364]	; (8001754 <main+0x2f4>)
 80015e8:	f001 fb52 	bl	8002c90 <HAL_ADC_Init>
		  HAL_Delay(60);
 80015ec:	203c      	movs	r0, #60	; 0x3c
 80015ee:	f001 f8d9 	bl	80027a4 <HAL_Delay>
		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2120      	movs	r1, #32
 80015f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fa:	f003 fc4b 	bl	8004e94 <HAL_GPIO_WritePin>
		  uint16_t value_adc = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	81fb      	strh	r3, [r7, #14]
		  HAL_ADC_Start(&hadc1);
 8001602:	4854      	ldr	r0, [pc, #336]	; (8001754 <main+0x2f4>)
 8001604:	f001 fdca 	bl	800319c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001608:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800160c:	4851      	ldr	r0, [pc, #324]	; (8001754 <main+0x2f4>)
 800160e:	f001 feb3 	bl	8003378 <HAL_ADC_PollForConversion>
		  value_adc =HAL_ADC_GetValue(&hadc1);
 8001612:	4850      	ldr	r0, [pc, #320]	; (8001754 <main+0x2f4>)
 8001614:	f001 ff88 	bl	8003528 <HAL_ADC_GetValue>
 8001618:	4603      	mov	r3, r0
 800161a:	81fb      	strh	r3, [r7, #14]

		  HAL_ADC_Stop(&hadc1);
 800161c:	484d      	ldr	r0, [pc, #308]	; (8001754 <main+0x2f4>)
 800161e:	f001 fe77 	bl	8003310 <HAL_ADC_Stop>
		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	2120      	movs	r1, #32
 8001626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162a:	f003 fc33 	bl	8004e94 <HAL_GPIO_WritePin>
		  HAL_ADC_DeInit(&hadc1);
 800162e:	4849      	ldr	r0, [pc, #292]	; (8001754 <main+0x2f4>)
 8001630:	f001 fc7e 	bl	8002f30 <HAL_ADC_DeInit>

		  myDatas.battery = (value_adc*5.069/4095);
 8001634:	89fb      	ldrh	r3, [r7, #14]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff74 	bl	8000524 <__aeabi_i2d>
 800163c:	a330      	add	r3, pc, #192	; (adr r3, 8001700 <main+0x2a0>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7fe ffd9 	bl	80005f8 <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	a32e      	add	r3, pc, #184	; (adr r3, 8001708 <main+0x2a8>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7ff f8fa 	bl	800084c <__aeabi_ddiv>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f7ff faa2 	bl	8000ba8 <__aeabi_d2f>
 8001664:	4603      	mov	r3, r0
 8001666:	4a3a      	ldr	r2, [pc, #232]	; (8001750 <main+0x2f0>)
 8001668:	6193      	str	r3, [r2, #24]

		  //set message to send
		  sprintf(message,"AT+MSG=\"Ti:%0.2f,Hi:%d,To:%0.2f,Ho:%d,Pr:%d,Pd:%0.2f,Bt:%0.2f\"\r\n",myDatas.Ti,myDatas.Hi,myDatas.To,myDatas.Ho,myDatas.presence,myDatas.poids/1000.0, myDatas.battery);
 800166a:	4b39      	ldr	r3, [pc, #228]	; (8001750 <main+0x2f0>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff6a 	bl	8000548 <__aeabi_f2d>
 8001674:	4680      	mov	r8, r0
 8001676:	4689      	mov	r9, r1
 8001678:	4b35      	ldr	r3, [pc, #212]	; (8001750 <main+0x2f0>)
 800167a:	681e      	ldr	r6, [r3, #0]
 800167c:	4b34      	ldr	r3, [pc, #208]	; (8001750 <main+0x2f0>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff61 	bl	8000548 <__aeabi_f2d>
 8001686:	4604      	mov	r4, r0
 8001688:	460d      	mov	r5, r1
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <main+0x2f0>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <main+0x2f0>)
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	603a      	str	r2, [r7, #0]
 8001696:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <main+0x2f0>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe ff42 	bl	8000524 <__aeabi_i2d>
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	4b2c      	ldr	r3, [pc, #176]	; (8001758 <main+0x2f8>)
 80016a6:	f7ff f8d1 	bl	800084c <__aeabi_ddiv>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4692      	mov	sl, r2
 80016b0:	469b      	mov	fp, r3
 80016b2:	4b27      	ldr	r3, [pc, #156]	; (8001750 <main+0x2f0>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff46 	bl	8000548 <__aeabi_f2d>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80016c4:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	9205      	str	r2, [sp, #20]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	9304      	str	r3, [sp, #16]
 80016d0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80016d4:	9600      	str	r6, [sp, #0]
 80016d6:	4642      	mov	r2, r8
 80016d8:	464b      	mov	r3, r9
 80016da:	4920      	ldr	r1, [pc, #128]	; (800175c <main+0x2fc>)
 80016dc:	4820      	ldr	r0, [pc, #128]	; (8001760 <main+0x300>)
 80016de:	f007 fd49 	bl	8009174 <siprintf>
///Ti:([-]?\d*\.?\d+),Hi:(\d+),To:([-]?\d*\.?\d+),Ho:(\d+),Pr:(\d+),Pd:([-]?\d*\.?\d+),Bt:([-]?\d*\.?\d+)/

		  get_data=0;
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <main+0x2e8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
		  message_rdy=1;
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <main+0x2ec>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]

		  HAL_UART_Transmit(serial, (uint8_t *)"stp >38\n" ,7 , 10);
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <main+0x2b8>)
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	230a      	movs	r3, #10
 80016f4:	2207      	movs	r2, #7
 80016f6:	491b      	ldr	r1, [pc, #108]	; (8001764 <main+0x304>)
 80016f8:	f005 fd52 	bl	80071a0 <HAL_UART_Transmit>
	  {
 80016fc:	e0bd      	b.n	800187a <main+0x41a>
 80016fe:	bf00      	nop
 8001700:	ef9db22d 	.word	0xef9db22d
 8001704:	401446a7 	.word	0x401446a7
 8001708:	00000000 	.word	0x00000000
 800170c:	40affe00 	.word	0x40affe00
 8001710:	20000294 	.word	0x20000294
 8001714:	48000400 	.word	0x48000400
 8001718:	20000004 	.word	0x20000004
 800171c:	0800b4fc 	.word	0x0800b4fc
 8001720:	20000270 	.word	0x20000270
 8001724:	20000550 	.word	0x20000550
 8001728:	20000508 	.word	0x20000508
 800172c:	20000000 	.word	0x20000000
 8001730:	20000478 	.word	0x20000478
 8001734:	20000728 	.word	0x20000728
 8001738:	20000740 	.word	0x20000740
 800173c:	0800b508 	.word	0x0800b508
 8001740:	2000072c 	.word	0x2000072c
 8001744:	0800b510 	.word	0x0800b510
 8001748:	20000738 	.word	0x20000738
 800174c:	20000730 	.word	0x20000730
 8001750:	20000744 	.word	0x20000744
 8001754:	2000020c 	.word	0x2000020c
 8001758:	408f4000 	.word	0x408f4000
 800175c:	0800b51c 	.word	0x0800b51c
 8001760:	200006e0 	.word	0x200006e0
 8001764:	0800b560 	.word	0x0800b560
	  }
	  else if(joined_rdy && message_rdy)
 8001768:	4b44      	ldr	r3, [pc, #272]	; (800187c <main+0x41c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d029      	beq.n	80017c4 <main+0x364>
 8001770:	4b43      	ldr	r3, [pc, #268]	; (8001880 <main+0x420>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d025      	beq.n	80017c4 <main+0x364>
	  {

		  HAL_UART_Transmit(serial, (uint8_t *)"send >" ,6 , 10);
 8001778:	4b42      	ldr	r3, [pc, #264]	; (8001884 <main+0x424>)
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	230a      	movs	r3, #10
 800177e:	2206      	movs	r2, #6
 8001780:	4941      	ldr	r1, [pc, #260]	; (8001888 <main+0x428>)
 8001782:	f005 fd0d 	bl	80071a0 <HAL_UART_Transmit>

		  HAL_UART_Transmit(serial, (uint8_t *)message , strlen(message), 70);
 8001786:	4b3f      	ldr	r3, [pc, #252]	; (8001884 <main+0x424>)
 8001788:	681c      	ldr	r4, [r3, #0]
 800178a:	4840      	ldr	r0, [pc, #256]	; (800188c <main+0x42c>)
 800178c:	f7fe fd70 	bl	8000270 <strlen>
 8001790:	4603      	mov	r3, r0
 8001792:	b29a      	uxth	r2, r3
 8001794:	2346      	movs	r3, #70	; 0x46
 8001796:	493d      	ldr	r1, [pc, #244]	; (800188c <main+0x42c>)
 8001798:	4620      	mov	r0, r4
 800179a:	f005 fd01 	bl	80071a0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(lora, (uint8_t *)message , strlen(message), 70);
 800179e:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <main+0x430>)
 80017a0:	681c      	ldr	r4, [r3, #0]
 80017a2:	483a      	ldr	r0, [pc, #232]	; (800188c <main+0x42c>)
 80017a4:	f7fe fd64 	bl	8000270 <strlen>
 80017a8:	4603      	mov	r3, r0
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	2346      	movs	r3, #70	; 0x46
 80017ae:	4937      	ldr	r1, [pc, #220]	; (800188c <main+0x42c>)
 80017b0:	4620      	mov	r0, r4
 80017b2:	f005 fcf5 	bl	80071a0 <HAL_UART_Transmit>
		  message_rdy=0;
 80017b6:	4b32      	ldr	r3, [pc, #200]	; (8001880 <main+0x420>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
		  wait_msg=1;
 80017bc:	4b35      	ldr	r3, [pc, #212]	; (8001894 <main+0x434>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e05a      	b.n	800187a <main+0x41a>
	  }
	  else if(!error && joined_rdy  && !message_rdy && veille_rdy)
 80017c4:	4b34      	ldr	r3, [pc, #208]	; (8001898 <main+0x438>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f47f aea3 	bne.w	8001514 <main+0xb4>
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <main+0x41c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f43f ae9e 	beq.w	8001514 <main+0xb4>
 80017d8:	4b29      	ldr	r3, [pc, #164]	; (8001880 <main+0x420>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f47f ae99 	bne.w	8001514 <main+0xb4>
 80017e2:	4b2e      	ldr	r3, [pc, #184]	; (800189c <main+0x43c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f43f ae94 	beq.w	8001514 <main+0xb4>
	  {
		  /*preSTOP mode*/

		  HAL_UART_Transmit(lora, (uint8_t *)"AT+LOWPOWER\n\r" , 13, 60);
 80017ec:	4b28      	ldr	r3, [pc, #160]	; (8001890 <main+0x430>)
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	233c      	movs	r3, #60	; 0x3c
 80017f2:	220d      	movs	r2, #13
 80017f4:	492a      	ldr	r1, [pc, #168]	; (80018a0 <main+0x440>)
 80017f6:	f005 fcd3 	bl	80071a0 <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2120      	movs	r1, #32
 80017fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001802:	f003 fb47 	bl	8004e94 <HAL_GPIO_WritePin>
		 HAL_UART_Transmit(serial, (uint8_t *)"Start sleep\n" , 12, 10);
 8001806:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <main+0x424>)
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	230a      	movs	r3, #10
 800180c:	220c      	movs	r2, #12
 800180e:	4925      	ldr	r1, [pc, #148]	; (80018a4 <main+0x444>)
 8001810:	f005 fcc6 	bl	80071a0 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8001814:	2064      	movs	r0, #100	; 0x64
 8001816:	f000 ffc5 	bl	80027a4 <HAL_Delay>
		HAL_SuspendTick();
 800181a:	f000 ffe7 	bl	80027ec <HAL_SuspendTick>
		//HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 4098, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
		HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, SLEEP_TIME, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 800181e:	2204      	movs	r2, #4
 8001820:	211e      	movs	r1, #30
 8001822:	4821      	ldr	r0, [pc, #132]	; (80018a8 <main+0x448>)
 8001824:	f005 f806 	bl	8006834 <HAL_RTCEx_SetWakeUpTimer_IT>

		/* Enter STOP 2 mode */
		HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001828:	2001      	movs	r0, #1
 800182a:	f003 fbfd 	bl	8005028 <HAL_PWREx_EnterSTOP2Mode>
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800182e:	481e      	ldr	r0, [pc, #120]	; (80018a8 <main+0x448>)
 8001830:	f005 f894 	bl	800695c <HAL_RTCEx_DeactivateWakeUpTimer>
		SystemClock_Config();
 8001834:	f000 f840 	bl	80018b8 <SystemClock_Config>
		HAL_ResumeTick();
 8001838:	f000 ffe8 	bl	800280c <HAL_ResumeTick>

		  HAL_UART_Transmit(lora, (uint8_t *)"AT\n\r" , 4, 60); // reveille le lora
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <main+0x430>)
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	233c      	movs	r3, #60	; 0x3c
 8001842:	2204      	movs	r2, #4
 8001844:	4919      	ldr	r1, [pc, #100]	; (80018ac <main+0x44c>)
 8001846:	f005 fcab 	bl	80071a0 <HAL_UART_Transmit>
		 HAL_UART_Transmit(serial, (uint8_t *)"Wake up\n" , 8, 60);
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <main+0x424>)
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	233c      	movs	r3, #60	; 0x3c
 8001850:	2208      	movs	r2, #8
 8001852:	4917      	ldr	r1, [pc, #92]	; (80018b0 <main+0x450>)
 8001854:	f005 fca4 	bl	80071a0 <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2120      	movs	r1, #32
 800185c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001860:	f003 fb18 	bl	8004e94 <HAL_GPIO_WritePin>

		  MX_ADC1_Init();
 8001864:	f000 f888 	bl	8001978 <MX_ADC1_Init>
		  HAL_Delay(200);
 8001868:	20c8      	movs	r0, #200	; 0xc8
 800186a:	f000 ff9b 	bl	80027a4 <HAL_Delay>
		get_data=1;
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <main+0x454>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]
		veille_rdy=0;
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <main+0x43c>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
	  if(!at_rdy && !wait_msg )
 800187a:	e64b      	b.n	8001514 <main+0xb4>
 800187c:	2000072c 	.word	0x2000072c
 8001880:	20000730 	.word	0x20000730
 8001884:	20000004 	.word	0x20000004
 8001888:	0800b56c 	.word	0x0800b56c
 800188c:	200006e0 	.word	0x200006e0
 8001890:	20000000 	.word	0x20000000
 8001894:	20000740 	.word	0x20000740
 8001898:	2000073c 	.word	0x2000073c
 800189c:	20000734 	.word	0x20000734
 80018a0:	0800b574 	.word	0x0800b574
 80018a4:	0800b584 	.word	0x0800b584
 80018a8:	20000270 	.word	0x20000270
 80018ac:	0800b594 	.word	0x0800b594
 80018b0:	0800b59c 	.word	0x0800b59c
 80018b4:	20000738 	.word	0x20000738

080018b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b096      	sub	sp, #88	; 0x58
 80018bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	2244      	movs	r2, #68	; 0x44
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f007 fcb7 	bl	800923a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018cc:	463b      	mov	r3, r7
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
 80018d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018de:	f003 fb4d 	bl	8004f7c <HAL_PWREx_ControlVoltageScaling>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80018e8:	f000 fad6 	bl	8001e98 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018ec:	f003 fb28 	bl	8004f40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018f0:	4b20      	ldr	r3, [pc, #128]	; (8001974 <SystemClock_Config+0xbc>)
 80018f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f6:	4a1f      	ldr	r2, [pc, #124]	; (8001974 <SystemClock_Config+0xbc>)
 80018f8:	f023 0318 	bic.w	r3, r3, #24
 80018fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeD
  * ef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001900:	2306      	movs	r3, #6
 8001902:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001904:	2301      	movs	r3, #1
 8001906:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001908:	f44f 7380 	mov.w	r3, #256	; 0x100
 800190c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800190e:	2310      	movs	r3, #16
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001912:	2302      	movs	r3, #2
 8001914:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001916:	2302      	movs	r3, #2
 8001918:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800191a:	2301      	movs	r3, #1
 800191c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800191e:	230a      	movs	r3, #10
 8001920:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001922:	2307      	movs	r3, #7
 8001924:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001926:	2302      	movs	r3, #2
 8001928:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800192a:	2302      	movs	r3, #2
 800192c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4618      	mov	r0, r3
 8001934:	f003 fba4 	bl	8005080 <HAL_RCC_OscConfig>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800193e:	f000 faab 	bl	8001e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001942:	230f      	movs	r3, #15
 8001944:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001946:	2303      	movs	r3, #3
 8001948:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001956:	463b      	mov	r3, r7
 8001958:	2104      	movs	r1, #4
 800195a:	4618      	mov	r0, r3
 800195c:	f003 ff6c 	bl	8005838 <HAL_RCC_ClockConfig>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001966:	f000 fa97 	bl	8001e98 <Error_Handler>
  }
}
 800196a:	bf00      	nop
 800196c:	3758      	adds	r7, #88	; 0x58
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000

08001978 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
 8001998:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800199a:	4b30      	ldr	r3, [pc, #192]	; (8001a5c <MX_ADC1_Init+0xe4>)
 800199c:	4a30      	ldr	r2, [pc, #192]	; (8001a60 <MX_ADC1_Init+0xe8>)
 800199e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80019a0:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <MX_ADC1_Init+0xe4>)
 80019a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019a8:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <MX_ADC1_Init+0xe4>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ae:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <MX_ADC1_Init+0xe4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <MX_ADC1_Init+0xe4>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019ba:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <MX_ADC1_Init+0xe4>)
 80019bc:	2204      	movs	r2, #4
 80019be:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019c0:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <MX_ADC1_Init+0xe4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019c6:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <MX_ADC1_Init+0xe4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80019cc:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <MX_ADC1_Init+0xe4>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019d2:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <MX_ADC1_Init+0xe4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <MX_ADC1_Init+0xe4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019e0:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <MX_ADC1_Init+0xe4>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <MX_ADC1_Init+0xe4>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019ee:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <MX_ADC1_Init+0xe4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <MX_ADC1_Init+0xe4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019fc:	4817      	ldr	r0, [pc, #92]	; (8001a5c <MX_ADC1_Init+0xe4>)
 80019fe:	f001 f947 	bl	8002c90 <HAL_ADC_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001a08:	f000 fa46 	bl	8001e98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	4619      	mov	r1, r3
 8001a16:	4811      	ldr	r0, [pc, #68]	; (8001a5c <MX_ADC1_Init+0xe4>)
 8001a18:	f002 fb4e 	bl	80040b8 <HAL_ADCEx_MultiModeConfigChannel>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001a22:	f000 fa39 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_ADC1_Init+0xec>)
 8001a28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001a2e:	2306      	movs	r3, #6
 8001a30:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a32:	237f      	movs	r3, #127	; 0x7f
 8001a34:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a36:	2304      	movs	r3, #4
 8001a38:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	4619      	mov	r1, r3
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <MX_ADC1_Init+0xe4>)
 8001a44:	f001 fd7e 	bl	8003544 <HAL_ADC_ConfigChannel>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001a4e:	f000 fa23 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	3728      	adds	r7, #40	; 0x28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000020c 	.word	0x2000020c
 8001a60:	50040000 	.word	0x50040000
 8001a64:	25b00200 	.word	0x25b00200

08001a68 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a6c:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <MX_RTC_Init+0x48>)
 8001a6e:	4a11      	ldr	r2, [pc, #68]	; (8001ab4 <MX_RTC_Init+0x4c>)
 8001a70:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a72:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <MX_RTC_Init+0x48>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <MX_RTC_Init+0x48>)
 8001a7a:	227f      	movs	r2, #127	; 0x7f
 8001a7c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <MX_RTC_Init+0x48>)
 8001a80:	22ff      	movs	r2, #255	; 0xff
 8001a82:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a84:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <MX_RTC_Init+0x48>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <MX_RTC_Init+0x48>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a90:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <MX_RTC_Init+0x48>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_RTC_Init+0x48>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a9c:	4804      	ldr	r0, [pc, #16]	; (8001ab0 <MX_RTC_Init+0x48>)
 8001a9e:	f004 fdab 	bl	80065f8 <HAL_RTC_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001aa8:	f000 f9f6 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000270 	.word	0x20000270
 8001ab4:	40002800 	.word	0x40002800

08001ab8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001abe:	f107 0310 	add.w	r3, r7, #16
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <MX_TIM3_Init+0x94>)
 8001ad8:	4a1d      	ldr	r2, [pc, #116]	; (8001b50 <MX_TIM3_Init+0x98>)
 8001ada:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <MX_TIM3_Init+0x94>)
 8001ade:	224f      	movs	r2, #79	; 0x4f
 8001ae0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MX_TIM3_Init+0x94>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <MX_TIM3_Init+0x94>)
 8001aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af0:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <MX_TIM3_Init+0x94>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <MX_TIM3_Init+0x94>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001afc:	4813      	ldr	r0, [pc, #76]	; (8001b4c <MX_TIM3_Init+0x94>)
 8001afe:	f004 ffbb 	bl	8006a78 <HAL_TIM_Base_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b08:	f000 f9c6 	bl	8001e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	4619      	mov	r1, r3
 8001b18:	480c      	ldr	r0, [pc, #48]	; (8001b4c <MX_TIM3_Init+0x94>)
 8001b1a:	f005 f86d 	bl	8006bf8 <HAL_TIM_ConfigClockSource>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b24:	f000 f9b8 	bl	8001e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	4619      	mov	r1, r3
 8001b34:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_TIM3_Init+0x94>)
 8001b36:	f005 fa5d 	bl	8006ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b40:	f000 f9aa 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b44:	bf00      	nop
 8001b46:	3720      	adds	r7, #32
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000294 	.word	0x20000294
 8001b50:	40000400 	.word	0x40000400

08001b54 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <MX_UART4_Init+0x60>)
 8001b5a:	4a17      	ldr	r2, [pc, #92]	; (8001bb8 <MX_UART4_Init+0x64>)
 8001b5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <MX_UART4_Init+0x60>)
 8001b60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <MX_UART4_Init+0x60>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <MX_UART4_Init+0x60>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <MX_UART4_Init+0x60>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_UART4_Init+0x60>)
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <MX_UART4_Init+0x60>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <MX_UART4_Init+0x60>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <MX_UART4_Init+0x60>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <MX_UART4_Init+0x60>)
 8001b92:	2208      	movs	r2, #8
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <MX_UART4_Init+0x60>)
 8001b98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_UART4_Init+0x60>)
 8001ba0:	f005 fab0 	bl	8007104 <HAL_UART_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 8001baa:	f000 f975 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200002e0 	.word	0x200002e0
 8001bb8:	40004c00 	.word	0x40004c00

08001bbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <MX_USART1_UART_Init+0x58>)
 8001bc2:	4a15      	ldr	r2, [pc, #84]	; (8001c18 <MX_USART1_UART_Init+0x5c>)
 8001bc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <MX_USART1_UART_Init+0x58>)
 8001bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_USART1_UART_Init+0x58>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_USART1_UART_Init+0x58>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_USART1_UART_Init+0x58>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_USART1_UART_Init+0x58>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MX_USART1_UART_Init+0x58>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_USART1_UART_Init+0x58>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <MX_USART1_UART_Init+0x58>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_USART1_UART_Init+0x58>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_USART1_UART_Init+0x58>)
 8001c00:	f005 fa80 	bl	8007104 <HAL_UART_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c0a:	f000 f945 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000368 	.word	0x20000368
 8001c18:	40013800 	.word	0x40013800

08001c1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <MX_USART2_UART_Init+0x58>)
 8001c22:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <MX_USART2_UART_Init+0x5c>)
 8001c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <MX_USART2_UART_Init+0x58>)
 8001c28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <MX_USART2_UART_Init+0x58>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <MX_USART2_UART_Init+0x58>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <MX_USART2_UART_Init+0x58>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MX_USART2_UART_Init+0x58>)
 8001c42:	220c      	movs	r2, #12
 8001c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <MX_USART2_UART_Init+0x58>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_USART2_UART_Init+0x58>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <MX_USART2_UART_Init+0x58>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_USART2_UART_Init+0x58>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <MX_USART2_UART_Init+0x58>)
 8001c60:	f005 fa50 	bl	8007104 <HAL_UART_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c6a:	f000 f915 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200003f0 	.word	0x200003f0
 8001c78:	40004400 	.word	0x40004400

08001c7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <MX_DMA_Init+0x70>)
 8001c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c86:	4a19      	ldr	r2, [pc, #100]	; (8001cec <MX_DMA_Init+0x70>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6493      	str	r3, [r2, #72]	; 0x48
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <MX_DMA_Init+0x70>)
 8001c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <MX_DMA_Init+0x70>)
 8001c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9e:	4a13      	ldr	r2, [pc, #76]	; (8001cec <MX_DMA_Init+0x70>)
 8001ca0:	f043 0302 	orr.w	r3, r3, #2
 8001ca4:	6493      	str	r3, [r2, #72]	; 0x48
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <MX_DMA_Init+0x70>)
 8001ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	200f      	movs	r0, #15
 8001cb8:	f002 fb89 	bl	80043ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001cbc:	200f      	movs	r0, #15
 8001cbe:	f002 fba2 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2010      	movs	r0, #16
 8001cc8:	f002 fb81 	bl	80043ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001ccc:	2010      	movs	r0, #16
 8001cce:	f002 fb9a 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	203c      	movs	r0, #60	; 0x3c
 8001cd8:	f002 fb79 	bl	80043ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001cdc:	203c      	movs	r0, #60	; 0x3c
 8001cde:	f002 fb92 	bl	8004406 <HAL_NVIC_EnableIRQ>

}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000

08001cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
 8001d04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d06:	4b60      	ldr	r3, [pc, #384]	; (8001e88 <MX_GPIO_Init+0x198>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	4a5f      	ldr	r2, [pc, #380]	; (8001e88 <MX_GPIO_Init+0x198>)
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d12:	4b5d      	ldr	r3, [pc, #372]	; (8001e88 <MX_GPIO_Init+0x198>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d1e:	4b5a      	ldr	r3, [pc, #360]	; (8001e88 <MX_GPIO_Init+0x198>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	4a59      	ldr	r2, [pc, #356]	; (8001e88 <MX_GPIO_Init+0x198>)
 8001d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2a:	4b57      	ldr	r3, [pc, #348]	; (8001e88 <MX_GPIO_Init+0x198>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	4b54      	ldr	r3, [pc, #336]	; (8001e88 <MX_GPIO_Init+0x198>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	4a53      	ldr	r2, [pc, #332]	; (8001e88 <MX_GPIO_Init+0x198>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d42:	4b51      	ldr	r3, [pc, #324]	; (8001e88 <MX_GPIO_Init+0x198>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	4b4e      	ldr	r3, [pc, #312]	; (8001e88 <MX_GPIO_Init+0x198>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4a4d      	ldr	r2, [pc, #308]	; (8001e88 <MX_GPIO_Init+0x198>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5a:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <MX_GPIO_Init+0x198>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d66:	4b48      	ldr	r3, [pc, #288]	; (8001e88 <MX_GPIO_Init+0x198>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	4a47      	ldr	r2, [pc, #284]	; (8001e88 <MX_GPIO_Init+0x198>)
 8001d6c:	f043 0308 	orr.w	r3, r3, #8
 8001d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d72:	4b45      	ldr	r3, [pc, #276]	; (8001e88 <MX_GPIO_Init+0x198>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2120      	movs	r1, #32
 8001d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d86:	f003 f885 	bl	8004e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2120      	movs	r1, #32
 8001d8e:	483f      	ldr	r0, [pc, #252]	; (8001e8c <MX_GPIO_Init+0x19c>)
 8001d90:	f003 f880 	bl	8004e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4839      	ldr	r0, [pc, #228]	; (8001e90 <MX_GPIO_Init+0x1a0>)
 8001dac:	f002 fdbc 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001db0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001db4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db6:	2303      	movs	r3, #3
 8001db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4832      	ldr	r0, [pc, #200]	; (8001e90 <MX_GPIO_Init+0x1a0>)
 8001dc6:	f002 fdaf 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001dca:	2320      	movs	r3, #32
 8001dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de4:	f002 fda0 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8001de8:	f649 13c0 	movw	r3, #39360	; 0x99c0
 8001dec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dee:	2303      	movs	r3, #3
 8001df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e00:	f002 fd92 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11
                           PB12 PB13 PB14 PB15
                           PB3 BatPin_Pin PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 8001e04:	f64f 33df 	movw	r3, #64479	; 0xfbdf
 8001e08:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|BatPin_Pin|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	481c      	ldr	r0, [pc, #112]	; (8001e8c <MX_GPIO_Init+0x19c>)
 8001e1a:	f002 fd85 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PresPins_Pin */
  GPIO_InitStruct.Pin = PresPins_Pin;
 8001e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PresPins_GPIO_Port, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	4815      	ldr	r0, [pc, #84]	; (8001e8c <MX_GPIO_Init+0x19c>)
 8001e36:	f002 fd77 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4811      	ldr	r0, [pc, #68]	; (8001e94 <MX_GPIO_Init+0x1a4>)
 8001e4e:	f002 fd6b 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT_Pin */
  GPIO_InitStruct.Pin = DHT_Pin;
 8001e52:	2320      	movs	r3, #32
 8001e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e56:	2301      	movs	r3, #1
 8001e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4619      	mov	r1, r3
 8001e68:	4808      	ldr	r0, [pc, #32]	; (8001e8c <MX_GPIO_Init+0x19c>)
 8001e6a:	f002 fd5d 	bl	8004928 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	2028      	movs	r0, #40	; 0x28
 8001e74:	f002 faab 	bl	80043ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e78:	2028      	movs	r0, #40	; 0x28
 8001e7a:	f002 fac4 	bl	8004406 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e7e:	bf00      	nop
 8001e80:	3728      	adds	r7, #40	; 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	48000400 	.word	0x48000400
 8001e90:	48000800 	.word	0x48000800
 8001e94:	48000c00 	.word	0x48000c00

08001e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9c:	b672      	cpsid	i
}
 8001e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <Error_Handler+0x8>
	...

08001ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_MspInit+0x44>)
 8001eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eae:	4a0e      	ldr	r2, [pc, #56]	; (8001ee8 <HAL_MspInit+0x44>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6613      	str	r3, [r2, #96]	; 0x60
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_MspInit+0x44>)
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_MspInit+0x44>)
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	4a08      	ldr	r2, [pc, #32]	; (8001ee8 <HAL_MspInit+0x44>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_MspInit+0x44>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000

08001eec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b0ac      	sub	sp, #176	; 0xb0
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	2288      	movs	r2, #136	; 0x88
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f007 f994 	bl	800923a <memset>
  if(hadc->Instance==ADC1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a27      	ldr	r2, [pc, #156]	; (8001fb4 <HAL_ADC_MspInit+0xc8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d147      	bne.n	8001fac <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f20:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001f22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001f32:	2308      	movs	r3, #8
 8001f34:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001f36:	2307      	movs	r3, #7
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001f42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f46:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 fe97 	bl	8005c80 <HAL_RCCEx_PeriphCLKConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001f58:	f7ff ff9e 	bl	8001e98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001f5c:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_ADC_MspInit+0xcc>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f60:	4a15      	ldr	r2, [pc, #84]	; (8001fb8 <HAL_ADC_MspInit+0xcc>)
 8001f62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f68:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <HAL_ADC_MspInit+0xcc>)
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <HAL_ADC_MspInit+0xcc>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f78:	4a0f      	ldr	r2, [pc, #60]	; (8001fb8 <HAL_ADC_MspInit+0xcc>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f80:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <HAL_ADC_MspInit+0xcc>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f8c:	2310      	movs	r3, #16
 8001f8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f92:	230b      	movs	r3, #11
 8001f94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa8:	f002 fcbe 	bl	8004928 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fac:	bf00      	nop
 8001fae:	37b0      	adds	r7, #176	; 0xb0
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	50040000 	.word	0x50040000
 8001fb8:	40021000 	.word	0x40021000

08001fbc <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a08      	ldr	r2, [pc, #32]	; (8001fec <HAL_ADC_MspDeInit+0x30>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d10a      	bne.n	8001fe4 <HAL_ADC_MspDeInit+0x28>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_ADC_MspDeInit+0x34>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <HAL_ADC_MspDeInit+0x34>)
 8001fd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fd8:	64d3      	str	r3, [r2, #76]	; 0x4c

    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8001fda:	2110      	movs	r1, #16
 8001fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe0:	f002 fe4c 	bl	8004c7c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	50040000 	.word	0x50040000
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b0a4      	sub	sp, #144	; 0x90
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ffc:	f107 0308 	add.w	r3, r7, #8
 8002000:	2288      	movs	r2, #136	; 0x88
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f007 f918 	bl	800923a <memset>
  if(hrtc->Instance==RTC)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a14      	ldr	r2, [pc, #80]	; (8002060 <HAL_RTC_MspInit+0x6c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d120      	bne.n	8002056 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002018:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800201a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800201e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002022:	f107 0308 	add.w	r3, r7, #8
 8002026:	4618      	mov	r0, r3
 8002028:	f003 fe2a 	bl	8005c80 <HAL_RCCEx_PeriphCLKConfig>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002032:	f7ff ff31 	bl	8001e98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_RTC_MspInit+0x70>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203c:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_RTC_MspInit+0x70>)
 800203e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	2003      	movs	r0, #3
 800204c:	f002 f9bf 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002050:	2003      	movs	r0, #3
 8002052:	f002 f9d8 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002056:	bf00      	nop
 8002058:	3790      	adds	r7, #144	; 0x90
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40002800 	.word	0x40002800
 8002064:	40021000 	.word	0x40021000

08002068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <HAL_TIM_Base_MspInit+0x38>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d10b      	bne.n	8002092 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_TIM_Base_MspInit+0x3c>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	4a09      	ldr	r2, [pc, #36]	; (80020a4 <HAL_TIM_Base_MspInit+0x3c>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	6593      	str	r3, [r2, #88]	; 0x58
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <HAL_TIM_Base_MspInit+0x3c>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40021000 	.word	0x40021000

080020a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b0b0      	sub	sp, #192	; 0xc0
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c4:	2288      	movs	r2, #136	; 0x88
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f007 f8b6 	bl	800923a <memset>
  if(huart->Instance==UART4)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4aad      	ldr	r2, [pc, #692]	; (8002388 <HAL_UART_MspInit+0x2e0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d16d      	bne.n	80021b4 <HAL_UART_MspInit+0x10c>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80020d8:	2308      	movs	r3, #8
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80020dc:	2300      	movs	r3, #0
 80020de:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e4:	4618      	mov	r0, r3
 80020e6:	f003 fdcb 	bl	8005c80 <HAL_RCCEx_PeriphCLKConfig>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020f0:	f7ff fed2 	bl	8001e98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020f4:	4ba5      	ldr	r3, [pc, #660]	; (800238c <HAL_UART_MspInit+0x2e4>)
 80020f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f8:	4aa4      	ldr	r2, [pc, #656]	; (800238c <HAL_UART_MspInit+0x2e4>)
 80020fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002100:	4ba2      	ldr	r3, [pc, #648]	; (800238c <HAL_UART_MspInit+0x2e4>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002108:	623b      	str	r3, [r7, #32]
 800210a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210c:	4b9f      	ldr	r3, [pc, #636]	; (800238c <HAL_UART_MspInit+0x2e4>)
 800210e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002110:	4a9e      	ldr	r2, [pc, #632]	; (800238c <HAL_UART_MspInit+0x2e4>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002118:	4b9c      	ldr	r3, [pc, #624]	; (800238c <HAL_UART_MspInit+0x2e4>)
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002124:	2303      	movs	r3, #3
 8002126:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002136:	2303      	movs	r3, #3
 8002138:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800213c:	2308      	movs	r3, #8
 800213e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002142:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002146:	4619      	mov	r1, r3
 8002148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214c:	f002 fbec 	bl	8004928 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8002150:	4b8f      	ldr	r3, [pc, #572]	; (8002390 <HAL_UART_MspInit+0x2e8>)
 8002152:	4a90      	ldr	r2, [pc, #576]	; (8002394 <HAL_UART_MspInit+0x2ec>)
 8002154:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8002156:	4b8e      	ldr	r3, [pc, #568]	; (8002390 <HAL_UART_MspInit+0x2e8>)
 8002158:	2202      	movs	r2, #2
 800215a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800215c:	4b8c      	ldr	r3, [pc, #560]	; (8002390 <HAL_UART_MspInit+0x2e8>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002162:	4b8b      	ldr	r3, [pc, #556]	; (8002390 <HAL_UART_MspInit+0x2e8>)
 8002164:	2200      	movs	r2, #0
 8002166:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002168:	4b89      	ldr	r3, [pc, #548]	; (8002390 <HAL_UART_MspInit+0x2e8>)
 800216a:	2280      	movs	r2, #128	; 0x80
 800216c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800216e:	4b88      	ldr	r3, [pc, #544]	; (8002390 <HAL_UART_MspInit+0x2e8>)
 8002170:	2200      	movs	r2, #0
 8002172:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002174:	4b86      	ldr	r3, [pc, #536]	; (8002390 <HAL_UART_MspInit+0x2e8>)
 8002176:	2200      	movs	r2, #0
 8002178:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800217a:	4b85      	ldr	r3, [pc, #532]	; (8002390 <HAL_UART_MspInit+0x2e8>)
 800217c:	2200      	movs	r2, #0
 800217e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002180:	4b83      	ldr	r3, [pc, #524]	; (8002390 <HAL_UART_MspInit+0x2e8>)
 8002182:	2200      	movs	r2, #0
 8002184:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002186:	4882      	ldr	r0, [pc, #520]	; (8002390 <HAL_UART_MspInit+0x2e8>)
 8002188:	f002 f958 	bl	800443c <HAL_DMA_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8002192:	f7ff fe81 	bl	8001e98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a7d      	ldr	r2, [pc, #500]	; (8002390 <HAL_UART_MspInit+0x2e8>)
 800219a:	675a      	str	r2, [r3, #116]	; 0x74
 800219c:	4a7c      	ldr	r2, [pc, #496]	; (8002390 <HAL_UART_MspInit+0x2e8>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	2034      	movs	r0, #52	; 0x34
 80021a8:	f002 f911 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80021ac:	2034      	movs	r0, #52	; 0x34
 80021ae:	f002 f92a 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021b2:	e0e5      	b.n	8002380 <HAL_UART_MspInit+0x2d8>
  else if(huart->Instance==USART1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a77      	ldr	r2, [pc, #476]	; (8002398 <HAL_UART_MspInit+0x2f0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d16e      	bne.n	800229c <HAL_UART_MspInit+0x1f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021be:	2301      	movs	r3, #1
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021c2:	2300      	movs	r3, #0
 80021c4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ca:	4618      	mov	r0, r3
 80021cc:	f003 fd58 	bl	8005c80 <HAL_RCCEx_PeriphCLKConfig>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_UART_MspInit+0x132>
      Error_Handler();
 80021d6:	f7ff fe5f 	bl	8001e98 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021da:	4b6c      	ldr	r3, [pc, #432]	; (800238c <HAL_UART_MspInit+0x2e4>)
 80021dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021de:	4a6b      	ldr	r2, [pc, #428]	; (800238c <HAL_UART_MspInit+0x2e4>)
 80021e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e4:	6613      	str	r3, [r2, #96]	; 0x60
 80021e6:	4b69      	ldr	r3, [pc, #420]	; (800238c <HAL_UART_MspInit+0x2e4>)
 80021e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ee:	61bb      	str	r3, [r7, #24]
 80021f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f2:	4b66      	ldr	r3, [pc, #408]	; (800238c <HAL_UART_MspInit+0x2e4>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f6:	4a65      	ldr	r2, [pc, #404]	; (800238c <HAL_UART_MspInit+0x2e4>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021fe:	4b63      	ldr	r3, [pc, #396]	; (800238c <HAL_UART_MspInit+0x2e4>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800220a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800220e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221e:	2303      	movs	r3, #3
 8002220:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002224:	2307      	movs	r3, #7
 8002226:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800222e:	4619      	mov	r1, r3
 8002230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002234:	f002 fb78 	bl	8004928 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002238:	4b58      	ldr	r3, [pc, #352]	; (800239c <HAL_UART_MspInit+0x2f4>)
 800223a:	4a59      	ldr	r2, [pc, #356]	; (80023a0 <HAL_UART_MspInit+0x2f8>)
 800223c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800223e:	4b57      	ldr	r3, [pc, #348]	; (800239c <HAL_UART_MspInit+0x2f4>)
 8002240:	2202      	movs	r2, #2
 8002242:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002244:	4b55      	ldr	r3, [pc, #340]	; (800239c <HAL_UART_MspInit+0x2f4>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800224a:	4b54      	ldr	r3, [pc, #336]	; (800239c <HAL_UART_MspInit+0x2f4>)
 800224c:	2200      	movs	r2, #0
 800224e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002250:	4b52      	ldr	r3, [pc, #328]	; (800239c <HAL_UART_MspInit+0x2f4>)
 8002252:	2280      	movs	r2, #128	; 0x80
 8002254:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002256:	4b51      	ldr	r3, [pc, #324]	; (800239c <HAL_UART_MspInit+0x2f4>)
 8002258:	2200      	movs	r2, #0
 800225a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800225c:	4b4f      	ldr	r3, [pc, #316]	; (800239c <HAL_UART_MspInit+0x2f4>)
 800225e:	2200      	movs	r2, #0
 8002260:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002262:	4b4e      	ldr	r3, [pc, #312]	; (800239c <HAL_UART_MspInit+0x2f4>)
 8002264:	2200      	movs	r2, #0
 8002266:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002268:	4b4c      	ldr	r3, [pc, #304]	; (800239c <HAL_UART_MspInit+0x2f4>)
 800226a:	2200      	movs	r2, #0
 800226c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800226e:	484b      	ldr	r0, [pc, #300]	; (800239c <HAL_UART_MspInit+0x2f4>)
 8002270:	f002 f8e4 	bl	800443c <HAL_DMA_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 800227a:	f7ff fe0d 	bl	8001e98 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a46      	ldr	r2, [pc, #280]	; (800239c <HAL_UART_MspInit+0x2f4>)
 8002282:	675a      	str	r2, [r3, #116]	; 0x74
 8002284:	4a45      	ldr	r2, [pc, #276]	; (800239c <HAL_UART_MspInit+0x2f4>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	2025      	movs	r0, #37	; 0x25
 8002290:	f002 f89d 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002294:	2025      	movs	r0, #37	; 0x25
 8002296:	f002 f8b6 	bl	8004406 <HAL_NVIC_EnableIRQ>
}
 800229a:	e071      	b.n	8002380 <HAL_UART_MspInit+0x2d8>
  else if(huart->Instance==USART2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a40      	ldr	r2, [pc, #256]	; (80023a4 <HAL_UART_MspInit+0x2fc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d16c      	bne.n	8002380 <HAL_UART_MspInit+0x2d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022a6:	2302      	movs	r3, #2
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022aa:	2300      	movs	r3, #0
 80022ac:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b2:	4618      	mov	r0, r3
 80022b4:	f003 fce4 	bl	8005c80 <HAL_RCCEx_PeriphCLKConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_UART_MspInit+0x21a>
      Error_Handler();
 80022be:	f7ff fdeb 	bl	8001e98 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022c2:	4b32      	ldr	r3, [pc, #200]	; (800238c <HAL_UART_MspInit+0x2e4>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	4a31      	ldr	r2, [pc, #196]	; (800238c <HAL_UART_MspInit+0x2e4>)
 80022c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022cc:	6593      	str	r3, [r2, #88]	; 0x58
 80022ce:	4b2f      	ldr	r3, [pc, #188]	; (800238c <HAL_UART_MspInit+0x2e4>)
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022da:	4b2c      	ldr	r3, [pc, #176]	; (800238c <HAL_UART_MspInit+0x2e4>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	4a2b      	ldr	r2, [pc, #172]	; (800238c <HAL_UART_MspInit+0x2e4>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e6:	4b29      	ldr	r3, [pc, #164]	; (800238c <HAL_UART_MspInit+0x2e4>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022f2:	230c      	movs	r3, #12
 80022f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800230a:	2307      	movs	r3, #7
 800230c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002310:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002314:	4619      	mov	r1, r3
 8002316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800231a:	f002 fb05 	bl	8004928 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800231e:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <HAL_UART_MspInit+0x300>)
 8002320:	4a22      	ldr	r2, [pc, #136]	; (80023ac <HAL_UART_MspInit+0x304>)
 8002322:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002324:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <HAL_UART_MspInit+0x300>)
 8002326:	2202      	movs	r2, #2
 8002328:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800232a:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <HAL_UART_MspInit+0x300>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_UART_MspInit+0x300>)
 8002332:	2200      	movs	r2, #0
 8002334:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002336:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <HAL_UART_MspInit+0x300>)
 8002338:	2280      	movs	r2, #128	; 0x80
 800233a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800233c:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <HAL_UART_MspInit+0x300>)
 800233e:	2200      	movs	r2, #0
 8002340:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002342:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_UART_MspInit+0x300>)
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002348:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <HAL_UART_MspInit+0x300>)
 800234a:	2200      	movs	r2, #0
 800234c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800234e:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <HAL_UART_MspInit+0x300>)
 8002350:	2200      	movs	r2, #0
 8002352:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002354:	4814      	ldr	r0, [pc, #80]	; (80023a8 <HAL_UART_MspInit+0x300>)
 8002356:	f002 f871 	bl	800443c <HAL_DMA_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_UART_MspInit+0x2bc>
      Error_Handler();
 8002360:	f7ff fd9a 	bl	8001e98 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a10      	ldr	r2, [pc, #64]	; (80023a8 <HAL_UART_MspInit+0x300>)
 8002368:	675a      	str	r2, [r3, #116]	; 0x74
 800236a:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <HAL_UART_MspInit+0x300>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002370:	2200      	movs	r2, #0
 8002372:	2100      	movs	r1, #0
 8002374:	2026      	movs	r0, #38	; 0x26
 8002376:	f002 f82a 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800237a:	2026      	movs	r0, #38	; 0x26
 800237c:	f002 f843 	bl	8004406 <HAL_NVIC_EnableIRQ>
}
 8002380:	bf00      	nop
 8002382:	37c0      	adds	r7, #192	; 0xc0
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40004c00 	.word	0x40004c00
 800238c:	40021000 	.word	0x40021000
 8002390:	20000478 	.word	0x20000478
 8002394:	40020458 	.word	0x40020458
 8002398:	40013800 	.word	0x40013800
 800239c:	200004c0 	.word	0x200004c0
 80023a0:	40020058 	.word	0x40020058
 80023a4:	40004400 	.word	0x40004400
 80023a8:	20000508 	.word	0x20000508
 80023ac:	4002006c 	.word	0x4002006c

080023b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023b4:	e7fe      	b.n	80023b4 <NMI_Handler+0x4>

080023b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <HardFault_Handler+0x4>

080023bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <MemManage_Handler+0x4>

080023c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c6:	e7fe      	b.n	80023c6 <BusFault_Handler+0x4>

080023c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <UsageFault_Handler+0x4>

080023ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023fc:	f000 f9b2 	bl	8002764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}

08002404 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <RTC_WKUP_IRQHandler+0x10>)
 800240a:	f004 fb05 	bl	8006a18 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000270 	.word	0x20000270

08002418 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <DMA1_Channel5_IRQHandler+0x10>)
 800241e:	f002 f9a4 	bl	800476a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200004c0 	.word	0x200004c0

0800242c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <DMA1_Channel6_IRQHandler+0x10>)
 8002432:	f002 f99a 	bl	800476a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000508 	.word	0x20000508

08002440 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <USART1_IRQHandler+0x10>)
 8002446:	f004 ff35 	bl	80072b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000368 	.word	0x20000368

08002454 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <USART2_IRQHandler+0x10>)
 800245a:	f004 ff2b 	bl	80072b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	200003f0 	.word	0x200003f0

08002468 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PresPins_Pin);
 800246c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002470:	f002 fd42 	bl	8004ef8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002474:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002478:	f002 fd3e 	bl	8004ef8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}

08002480 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002484:	4802      	ldr	r0, [pc, #8]	; (8002490 <UART4_IRQHandler+0x10>)
 8002486:	f004 ff15 	bl	80072b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200002e0 	.word	0x200002e0

08002494 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <DMA2_Channel5_IRQHandler+0x10>)
 800249a:	f002 f966 	bl	800476a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000478 	.word	0x20000478

080024a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return 1;
 80024ac:	2301      	movs	r3, #1
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_kill>:

int _kill(int pid, int sig)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024c2:	f006 ff23 	bl	800930c <__errno>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2216      	movs	r2, #22
 80024ca:	601a      	str	r2, [r3, #0]
  return -1;
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <_exit>:

void _exit (int status)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024e0:	f04f 31ff 	mov.w	r1, #4294967295
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff ffe7 	bl	80024b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ea:	e7fe      	b.n	80024ea <_exit+0x12>

080024ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	e00a      	b.n	8002514 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024fe:	f3af 8000 	nop.w
 8002502:	4601      	mov	r1, r0
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	60ba      	str	r2, [r7, #8]
 800250a:	b2ca      	uxtb	r2, r1
 800250c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	3301      	adds	r3, #1
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	429a      	cmp	r2, r3
 800251a:	dbf0      	blt.n	80024fe <_read+0x12>
  }

  return len;
 800251c:	687b      	ldr	r3, [r7, #4]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b086      	sub	sp, #24
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	e009      	b.n	800254c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	60ba      	str	r2, [r7, #8]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	3301      	adds	r3, #1
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	429a      	cmp	r2, r3
 8002552:	dbf1      	blt.n	8002538 <_write+0x12>
  }
  return len;
 8002554:	687b      	ldr	r3, [r7, #4]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <_close>:

int _close(int file)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002566:	f04f 33ff 	mov.w	r3, #4294967295
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002586:	605a      	str	r2, [r3, #4]
  return 0;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <_isatty>:

int _isatty(int file)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800259e:	2301      	movs	r3, #1
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d0:	4a14      	ldr	r2, [pc, #80]	; (8002624 <_sbrk+0x5c>)
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <_sbrk+0x60>)
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025dc:	4b13      	ldr	r3, [pc, #76]	; (800262c <_sbrk+0x64>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e4:	4b11      	ldr	r3, [pc, #68]	; (800262c <_sbrk+0x64>)
 80025e6:	4a12      	ldr	r2, [pc, #72]	; (8002630 <_sbrk+0x68>)
 80025e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ea:	4b10      	ldr	r3, [pc, #64]	; (800262c <_sbrk+0x64>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d207      	bcs.n	8002608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f8:	f006 fe88 	bl	800930c <__errno>
 80025fc:	4603      	mov	r3, r0
 80025fe:	220c      	movs	r2, #12
 8002600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
 8002606:	e009      	b.n	800261c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <_sbrk+0x64>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800260e:	4b07      	ldr	r3, [pc, #28]	; (800262c <_sbrk+0x64>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	4a05      	ldr	r2, [pc, #20]	; (800262c <_sbrk+0x64>)
 8002618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800261a:	68fb      	ldr	r3, [r7, #12]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20018000 	.word	0x20018000
 8002628:	00000400 	.word	0x00000400
 800262c:	20000760 	.word	0x20000760
 8002630:	200008b8 	.word	0x200008b8

08002634 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <SystemInit+0x20>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	4a05      	ldr	r2, [pc, #20]	; (8002654 <SystemInit+0x20>)
 8002640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002690 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800265c:	f7ff ffea 	bl	8002634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002660:	480c      	ldr	r0, [pc, #48]	; (8002694 <LoopForever+0x6>)
  ldr r1, =_edata
 8002662:	490d      	ldr	r1, [pc, #52]	; (8002698 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002664:	4a0d      	ldr	r2, [pc, #52]	; (800269c <LoopForever+0xe>)
  movs r3, #0
 8002666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002668:	e002      	b.n	8002670 <LoopCopyDataInit>

0800266a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800266a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800266c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800266e:	3304      	adds	r3, #4

08002670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002674:	d3f9      	bcc.n	800266a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002676:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002678:	4c0a      	ldr	r4, [pc, #40]	; (80026a4 <LoopForever+0x16>)
  movs r3, #0
 800267a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800267c:	e001      	b.n	8002682 <LoopFillZerobss>

0800267e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800267e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002680:	3204      	adds	r2, #4

08002682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002684:	d3fb      	bcc.n	800267e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002686:	f006 fe47 	bl	8009318 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800268a:	f7fe fee9 	bl	8001460 <main>

0800268e <LoopForever>:

LoopForever:
    b LoopForever
 800268e:	e7fe      	b.n	800268e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002690:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002698:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800269c:	0800b974 	.word	0x0800b974
  ldr r2, =_sbss
 80026a0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80026a4:	200008b4 	.word	0x200008b4

080026a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026a8:	e7fe      	b.n	80026a8 <ADC1_2_IRQHandler>
	...

080026ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <HAL_Init+0x3c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a0b      	ldr	r2, [pc, #44]	; (80026e8 <HAL_Init+0x3c>)
 80026bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c2:	2003      	movs	r0, #3
 80026c4:	f001 fe78 	bl	80043b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026c8:	2000      	movs	r0, #0
 80026ca:	f000 f80f 	bl	80026ec <HAL_InitTick>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	71fb      	strb	r3, [r7, #7]
 80026d8:	e001      	b.n	80026de <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026da:	f7ff fbe3 	bl	8001ea4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026de:	79fb      	ldrb	r3, [r7, #7]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40022000 	.word	0x40022000

080026ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026f8:	4b17      	ldr	r3, [pc, #92]	; (8002758 <HAL_InitTick+0x6c>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d023      	beq.n	8002748 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002700:	4b16      	ldr	r3, [pc, #88]	; (800275c <HAL_InitTick+0x70>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b14      	ldr	r3, [pc, #80]	; (8002758 <HAL_InitTick+0x6c>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	4619      	mov	r1, r3
 800270a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800270e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002712:	fbb2 f3f3 	udiv	r3, r2, r3
 8002716:	4618      	mov	r0, r3
 8002718:	f001 fe83 	bl	8004422 <HAL_SYSTICK_Config>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10f      	bne.n	8002742 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b0f      	cmp	r3, #15
 8002726:	d809      	bhi.n	800273c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002728:	2200      	movs	r2, #0
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	f04f 30ff 	mov.w	r0, #4294967295
 8002730:	f001 fe4d 	bl	80043ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002734:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <HAL_InitTick+0x74>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	e007      	b.n	800274c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
 8002740:	e004      	b.n	800274c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
 8002746:	e001      	b.n	800274c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800274c:	7bfb      	ldrb	r3, [r7, #15]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000010 	.word	0x20000010
 800275c:	20000008 	.word	0x20000008
 8002760:	2000000c 	.word	0x2000000c

08002764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_IncTick+0x20>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_IncTick+0x24>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4413      	add	r3, r2
 8002774:	4a04      	ldr	r2, [pc, #16]	; (8002788 <HAL_IncTick+0x24>)
 8002776:	6013      	str	r3, [r2, #0]
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000010 	.word	0x20000010
 8002788:	20000764 	.word	0x20000764

0800278c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return uwTick;
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <HAL_GetTick+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000764 	.word	0x20000764

080027a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027ac:	f7ff ffee 	bl	800278c <HAL_GetTick>
 80027b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d005      	beq.n	80027ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_Delay+0x44>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ca:	bf00      	nop
 80027cc:	f7ff ffde 	bl	800278c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d8f7      	bhi.n	80027cc <HAL_Delay+0x28>
  {
  }
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000010 	.word	0x20000010

080027ec <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_SuspendTick+0x1c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <HAL_SuspendTick+0x1c>)
 80027f6:	f023 0302 	bic.w	r3, r3, #2
 80027fa:	6013      	str	r3, [r2, #0]
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	e000e010 	.word	0xe000e010

0800280c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_ResumeTick+0x1c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a04      	ldr	r2, [pc, #16]	; (8002828 <HAL_ResumeTick+0x1c>)
 8002816:	f043 0302 	orr.w	r3, r3, #2
 800281a:	6013      	str	r3, [r2, #0]
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000e010 	.word	0xe000e010

0800282c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	609a      	str	r2, [r3, #8]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	609a      	str	r2, [r3, #8]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3360      	adds	r3, #96	; 0x60
 80028a6:	461a      	mov	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <LL_ADC_SetOffset+0x44>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028cc:	bf00      	nop
 80028ce:	371c      	adds	r7, #28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	03fff000 	.word	0x03fff000

080028dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3360      	adds	r3, #96	; 0x60
 80028ea:	461a      	mov	r2, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3360      	adds	r3, #96	; 0x60
 8002918:	461a      	mov	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	431a      	orrs	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002932:	bf00      	nop
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	3330      	adds	r3, #48	; 0x30
 8002974:	461a      	mov	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	0a1b      	lsrs	r3, r3, #8
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	4413      	add	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	211f      	movs	r1, #31
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	401a      	ands	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	0e9b      	lsrs	r3, r3, #26
 800299c:	f003 011f 	and.w	r1, r3, #31
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	fa01 f303 	lsl.w	r3, r1, r3
 80029aa:	431a      	orrs	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029b0:	bf00      	nop
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3314      	adds	r3, #20
 80029cc:	461a      	mov	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	0e5b      	lsrs	r3, r3, #25
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	4413      	add	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	0d1b      	lsrs	r3, r3, #20
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	2107      	movs	r1, #7
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	401a      	ands	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	0d1b      	lsrs	r3, r3, #20
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002a00:	431a      	orrs	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	401a      	ands	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f003 0318 	and.w	r3, r3, #24
 8002a36:	4908      	ldr	r1, [pc, #32]	; (8002a58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a38:	40d9      	lsrs	r1, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	400b      	ands	r3, r1
 8002a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a42:	431a      	orrs	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	0007ffff 	.word	0x0007ffff

08002a5c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 031f 	and.w	r3, r3, #31
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002aa4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6093      	str	r3, [r2, #8]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002acc:	d101      	bne.n	8002ad2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002af0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002af4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b1c:	d101      	bne.n	8002b22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b44:	f043 0201 	orr.w	r2, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b6c:	f043 0202 	orr.w	r2, r3, #2
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <LL_ADC_IsEnabled+0x18>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <LL_ADC_IsEnabled+0x1a>
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d101      	bne.n	8002bbe <LL_ADC_IsDisableOngoing+0x18>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <LL_ADC_IsDisableOngoing+0x1a>
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002be0:	f043 0204 	orr.w	r2, r3, #4
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c08:	f043 0210 	orr.w	r2, r3, #16
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d101      	bne.n	8002c34 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c56:	f043 0220 	orr.w	r2, r3, #32
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d101      	bne.n	8002c82 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b089      	sub	sp, #36	; 0x24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e130      	b.n	8002f0c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff f917 	bl	8001eec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fef1 	bl	8002ab8 <LL_ADC_IsDeepPowerDownEnabled>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fed7 	bl	8002a94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff ff0c 	bl	8002b08 <LL_ADC_IsInternalRegulatorEnabled>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d115      	bne.n	8002d22 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fef0 	bl	8002ae0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d00:	4b84      	ldr	r3, [pc, #528]	; (8002f14 <HAL_ADC_Init+0x284>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	099b      	lsrs	r3, r3, #6
 8002d06:	4a84      	ldr	r2, [pc, #528]	; (8002f18 <HAL_ADC_Init+0x288>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	099b      	lsrs	r3, r3, #6
 8002d0e:	3301      	adds	r3, #1
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d14:	e002      	b.n	8002d1c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f9      	bne.n	8002d16 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff feee 	bl	8002b08 <LL_ADC_IsInternalRegulatorEnabled>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10d      	bne.n	8002d4e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d36:	f043 0210 	orr.w	r2, r3, #16
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	f043 0201 	orr.w	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff ff62 	bl	8002c1c <LL_ADC_REG_IsConversionOngoing>
 8002d58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f040 80c9 	bne.w	8002efa <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 80c5 	bne.w	8002efa <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d78:	f043 0202 	orr.w	r2, r3, #2
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fefb 	bl	8002b80 <LL_ADC_IsEnabled>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d115      	bne.n	8002dbc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d90:	4862      	ldr	r0, [pc, #392]	; (8002f1c <HAL_ADC_Init+0x28c>)
 8002d92:	f7ff fef5 	bl	8002b80 <LL_ADC_IsEnabled>
 8002d96:	4604      	mov	r4, r0
 8002d98:	4861      	ldr	r0, [pc, #388]	; (8002f20 <HAL_ADC_Init+0x290>)
 8002d9a:	f7ff fef1 	bl	8002b80 <LL_ADC_IsEnabled>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	431c      	orrs	r4, r3
 8002da2:	4860      	ldr	r0, [pc, #384]	; (8002f24 <HAL_ADC_Init+0x294>)
 8002da4:	f7ff feec 	bl	8002b80 <LL_ADC_IsEnabled>
 8002da8:	4603      	mov	r3, r0
 8002daa:	4323      	orrs	r3, r4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	4619      	mov	r1, r3
 8002db6:	485c      	ldr	r0, [pc, #368]	; (8002f28 <HAL_ADC_Init+0x298>)
 8002db8:	f7ff fd38 	bl	800282c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	7e5b      	ldrb	r3, [r3, #25]
 8002dc0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dc6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002dcc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002dd2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dda:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d106      	bne.n	8002df8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	3b01      	subs	r3, #1
 8002df0:	045b      	lsls	r3, r3, #17
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d009      	beq.n	8002e14 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	4b44      	ldr	r3, [pc, #272]	; (8002f2c <HAL_ADC_Init+0x29c>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	69b9      	ldr	r1, [r7, #24]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff1c 	bl	8002c6a <LL_ADC_INJ_IsConversionOngoing>
 8002e32:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d13d      	bne.n	8002eb6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d13a      	bne.n	8002eb6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e44:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e4c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e5c:	f023 0302 	bic.w	r3, r3, #2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	69b9      	ldr	r1, [r7, #24]
 8002e66:	430b      	orrs	r3, r1
 8002e68:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d118      	bne.n	8002ea6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e7e:	f023 0304 	bic.w	r3, r3, #4
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e8a:	4311      	orrs	r1, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e90:	4311      	orrs	r1, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e96:	430a      	orrs	r2, r1
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	611a      	str	r2, [r3, #16]
 8002ea4:	e007      	b.n	8002eb6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	f023 010f 	bic.w	r1, r3, #15
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	1e5a      	subs	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed6:	e007      	b.n	8002ee8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 020f 	bic.w	r2, r2, #15
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eec:	f023 0303 	bic.w	r3, r3, #3
 8002ef0:	f043 0201 	orr.w	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54
 8002ef8:	e007      	b.n	8002f0a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	f043 0210 	orr.w	r2, r3, #16
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3724      	adds	r7, #36	; 0x24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd90      	pop	{r4, r7, pc}
 8002f14:	20000008 	.word	0x20000008
 8002f18:	053e2d63 	.word	0x053e2d63
 8002f1c:	50040000 	.word	0x50040000
 8002f20:	50040100 	.word	0x50040100
 8002f24:	50040200 	.word	0x50040200
 8002f28:	50040300 	.word	0x50040300
 8002f2c:	fff0c007 	.word	0xfff0c007

08002f30 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e116      	b.n	8003170 <HAL_ADC_DeInit+0x240>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f46:	f043 0202 	orr.w	r2, r3, #2
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002f4e:	2103      	movs	r1, #3
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fee9 	bl	8003d28 <ADC_ConversionStop>
 8002f56:	4603      	mov	r3, r0
 8002f58:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002f68:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f001 f81b 	bl	8003fac <ADC_Disable>
 8002f76:	4603      	mov	r3, r0
 8002f78:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d102      	bne.n	8002f86 <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002f94:	f023 0307 	bic.w	r3, r3, #7
 8002f98:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002fa2:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 42a0 	bic.w	r2, r2, #1342177280	; 0x50000000
 8002fb2:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002fc2:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68d9      	ldr	r1, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <HAL_ADC_DeInit+0x248>)
 8002fd0:	400b      	ands	r3, r1
 8002fd2:	60d3      	str	r3, [r2, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002fe2:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ff2:	f023 0307 	bic.w	r3, r3, #7
 8002ff6:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8003006:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 8003016:	619a      	str	r2, [r3, #24]
            ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
            ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);

  /* Reset register TR1 */
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a1a      	ldr	r2, [r3, #32]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003026:	621a      	str	r2, [r3, #32]

  /* Reset register TR2 */
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8003036:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset register TR3 */
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8003046:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	4b4a      	ldr	r3, [pc, #296]	; (800317c <HAL_ADC_DeInit+0x24c>)
 8003054:	400b      	ands	r3, r1
 8003056:	6313      	str	r3, [r2, #48]	; 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4b47      	ldr	r3, [pc, #284]	; (8003180 <HAL_ADC_DeInit+0x250>)
 8003064:	400b      	ands	r3, r1
 8003066:	6353      	str	r3, [r2, #52]	; 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	4b43      	ldr	r3, [pc, #268]	; (8003180 <HAL_ADC_DeInit+0x250>)
 8003074:	400b      	ands	r3, r1
 8003076:	6393      	str	r3, [r2, #56]	; 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	f423 63fb 	bic.w	r3, r3, #2008	; 0x7d8
 8003086:	f023 0307 	bic.w	r3, r3, #7
 800308a:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <HAL_ADC_DeInit+0x254>)
 8003098:	400b      	ands	r3, r1
 800309a:	6613      	str	r3, [r2, #96]	; 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4b37      	ldr	r3, [pc, #220]	; (8003184 <HAL_ADC_DeInit+0x254>)
 80030a8:	400b      	ands	r3, r1
 80030aa:	6653      	str	r3, [r2, #100]	; 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b33      	ldr	r3, [pc, #204]	; (8003184 <HAL_ADC_DeInit+0x254>)
 80030b8:	400b      	ands	r3, r1
 80030ba:	6693      	str	r3, [r2, #104]	; 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4b2f      	ldr	r3, [pc, #188]	; (8003184 <HAL_ADC_DeInit+0x254>)
 80030c8:	400b      	ands	r3, r1
 80030ca:	66d3      	str	r3, [r2, #108]	; 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	0cdb      	lsrs	r3, r3, #19
 80030da:	04db      	lsls	r3, r3, #19
 80030dc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	0cdb      	lsrs	r3, r3, #19
 80030ee:	04db      	lsls	r3, r3, #19
 80030f0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	0cdb      	lsrs	r3, r3, #19
 8003102:	04db      	lsls	r3, r3, #19
 8003104:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 8003118:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800311c:	481a      	ldr	r0, [pc, #104]	; (8003188 <HAL_ADC_DeInit+0x258>)
 800311e:	f7ff fd2f 	bl	8002b80 <LL_ADC_IsEnabled>
 8003122:	4604      	mov	r4, r0
 8003124:	4819      	ldr	r0, [pc, #100]	; (800318c <HAL_ADC_DeInit+0x25c>)
 8003126:	f7ff fd2b 	bl	8002b80 <LL_ADC_IsEnabled>
 800312a:	4603      	mov	r3, r0
 800312c:	431c      	orrs	r4, r3
 800312e:	4818      	ldr	r0, [pc, #96]	; (8003190 <HAL_ADC_DeInit+0x260>)
 8003130:	f7ff fd26 	bl	8002b80 <LL_ADC_IsEnabled>
 8003134:	4603      	mov	r3, r0
 8003136:	4323      	orrs	r3, r4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d108      	bne.n	800314e <HAL_ADC_DeInit+0x21e>
      - multimode related parameters (when this feature is available): MDMA,
        DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 800313c:	4b15      	ldr	r3, [pc, #84]	; (8003194 <HAL_ADC_DeInit+0x264>)
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	4914      	ldr	r1, [pc, #80]	; (8003194 <HAL_ADC_DeInit+0x264>)
 8003142:	4b15      	ldr	r3, [pc, #84]	; (8003198 <HAL_ADC_DeInit+0x268>)
 8003144:	4013      	ands	r3, r2
 8003146:	608b      	str	r3, [r1, #8]

    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7fe ff37 	bl	8001fbc <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	659a      	str	r2, [r3, #88]	; 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	65da      	str	r2, [r3, #92]	; 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	655a      	str	r2, [r3, #84]	; 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800316e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	bd90      	pop	{r4, r7, pc}
 8003178:	80008004 	.word	0x80008004
 800317c:	e0820830 	.word	0xe0820830
 8003180:	e0820820 	.word	0xe0820820
 8003184:	03fff000 	.word	0x03fff000
 8003188:	50040000 	.word	0x50040000
 800318c:	50040100 	.word	0x50040100
 8003190:	50040200 	.word	0x50040200
 8003194:	50040300 	.word	0x50040300
 8003198:	fe0010e0 	.word	0xfe0010e0

0800319c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031a4:	4857      	ldr	r0, [pc, #348]	; (8003304 <HAL_ADC_Start+0x168>)
 80031a6:	f7ff fc59 	bl	8002a5c <LL_ADC_GetMultimode>
 80031aa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fd33 	bl	8002c1c <LL_ADC_REG_IsConversionOngoing>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f040 809c 	bne.w	80032f6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_ADC_Start+0x30>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e097      	b.n	80032fc <HAL_ADC_Start+0x160>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 fe63 	bl	8003ea0 <ADC_Enable>
 80031da:	4603      	mov	r3, r0
 80031dc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f040 8083 	bne.w	80032ec <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a42      	ldr	r2, [pc, #264]	; (8003308 <HAL_ADC_Start+0x16c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d002      	beq.n	800320a <HAL_ADC_Start+0x6e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	e000      	b.n	800320c <HAL_ADC_Start+0x70>
 800320a:	4b40      	ldr	r3, [pc, #256]	; (800330c <HAL_ADC_Start+0x170>)
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	4293      	cmp	r3, r2
 8003212:	d002      	beq.n	800321a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800322e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003232:	d106      	bne.n	8003242 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003238:	f023 0206 	bic.w	r2, r3, #6
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	659a      	str	r2, [r3, #88]	; 0x58
 8003240:	e002      	b.n	8003248 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	221c      	movs	r2, #28
 800324e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a2a      	ldr	r2, [pc, #168]	; (8003308 <HAL_ADC_Start+0x16c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d002      	beq.n	8003268 <HAL_ADC_Start+0xcc>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	e000      	b.n	800326a <HAL_ADC_Start+0xce>
 8003268:	4b28      	ldr	r3, [pc, #160]	; (800330c <HAL_ADC_Start+0x170>)
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	4293      	cmp	r3, r2
 8003270:	d008      	beq.n	8003284 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b05      	cmp	r3, #5
 800327c:	d002      	beq.n	8003284 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b09      	cmp	r3, #9
 8003282:	d114      	bne.n	80032ae <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003296:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800329a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fc90 	bl	8002bcc <LL_ADC_REG_StartConversion>
 80032ac:	e025      	b.n	80032fa <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a12      	ldr	r2, [pc, #72]	; (8003308 <HAL_ADC_Start+0x16c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d002      	beq.n	80032ca <HAL_ADC_Start+0x12e>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	e000      	b.n	80032cc <HAL_ADC_Start+0x130>
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_ADC_Start+0x170>)
 80032cc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00f      	beq.n	80032fa <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	655a      	str	r2, [r3, #84]	; 0x54
 80032ea:	e006      	b.n	80032fa <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80032f4:	e001      	b.n	80032fa <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
 80032f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	50040300 	.word	0x50040300
 8003308:	50040100 	.word	0x50040100
 800330c:	50040000 	.word	0x50040000

08003310 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_ADC_Stop+0x16>
 8003322:	2302      	movs	r3, #2
 8003324:	e023      	b.n	800336e <HAL_ADC_Stop+0x5e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800332e:	2103      	movs	r1, #3
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fcf9 	bl	8003d28 <ADC_ConversionStop>
 8003336:	4603      	mov	r3, r0
 8003338:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d111      	bne.n	8003364 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fe33 	bl	8003fac <ADC_Disable>
 8003346:	4603      	mov	r3, r0
 8003348:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d109      	bne.n	8003364 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003354:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	f043 0201 	orr.w	r2, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800336c:	7bfb      	ldrb	r3, [r7, #15]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003382:	4866      	ldr	r0, [pc, #408]	; (800351c <HAL_ADC_PollForConversion+0x1a4>)
 8003384:	f7ff fb6a 	bl	8002a5c <LL_ADC_GetMultimode>
 8003388:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	2b08      	cmp	r3, #8
 8003390:	d102      	bne.n	8003398 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003392:	2308      	movs	r3, #8
 8003394:	61fb      	str	r3, [r7, #28]
 8003396:	e02a      	b.n	80033ee <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b05      	cmp	r3, #5
 80033a2:	d002      	beq.n	80033aa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b09      	cmp	r3, #9
 80033a8:	d111      	bne.n	80033ce <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d007      	beq.n	80033c8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f043 0220 	orr.w	r2, r3, #32
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0a4      	b.n	8003512 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80033c8:	2304      	movs	r3, #4
 80033ca:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80033cc:	e00f      	b.n	80033ee <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80033ce:	4853      	ldr	r0, [pc, #332]	; (800351c <HAL_ADC_PollForConversion+0x1a4>)
 80033d0:	f7ff fb52 	bl	8002a78 <LL_ADC_GetMultiDMATransfer>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033de:	f043 0220 	orr.w	r2, r3, #32
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e093      	b.n	8003512 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80033ea:	2304      	movs	r3, #4
 80033ec:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80033ee:	f7ff f9cd 	bl	800278c <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033f4:	e021      	b.n	800343a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d01d      	beq.n	800343a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80033fe:	f7ff f9c5 	bl	800278c <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d302      	bcc.n	8003414 <HAL_ADC_PollForConversion+0x9c>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d112      	bne.n	800343a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4013      	ands	r3, r2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10b      	bne.n	800343a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003426:	f043 0204 	orr.w	r2, r3, #4
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e06b      	b.n	8003512 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0d6      	beq.n	80033f6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fa70 	bl	800293e <LL_ADC_REG_IsTriggerSourceSWStart>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01c      	beq.n	800349e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	7e5b      	ldrb	r3, [r3, #25]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d118      	bne.n	800349e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b08      	cmp	r3, #8
 8003478:	d111      	bne.n	800349e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d105      	bne.n	800349e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003496:	f043 0201 	orr.w	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1f      	ldr	r2, [pc, #124]	; (8003520 <HAL_ADC_PollForConversion+0x1a8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d002      	beq.n	80034ae <HAL_ADC_PollForConversion+0x136>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	e000      	b.n	80034b0 <HAL_ADC_PollForConversion+0x138>
 80034ae:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <HAL_ADC_PollForConversion+0x1ac>)
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d008      	beq.n	80034ca <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2b05      	cmp	r3, #5
 80034c2:	d002      	beq.n	80034ca <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2b09      	cmp	r3, #9
 80034c8:	d104      	bne.n	80034d4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	e00c      	b.n	80034ee <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a11      	ldr	r2, [pc, #68]	; (8003520 <HAL_ADC_PollForConversion+0x1a8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d002      	beq.n	80034e4 <HAL_ADC_PollForConversion+0x16c>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	e000      	b.n	80034e6 <HAL_ADC_PollForConversion+0x16e>
 80034e4:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <HAL_ADC_PollForConversion+0x1ac>)
 80034e6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d104      	bne.n	80034fe <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2208      	movs	r2, #8
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	e008      	b.n	8003510 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d103      	bne.n	8003510 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	220c      	movs	r2, #12
 800350e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	50040300 	.word	0x50040300
 8003520:	50040100 	.word	0x50040100
 8003524:	50040000 	.word	0x50040000

08003528 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
	...

08003544 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b0b6      	sub	sp, #216	; 0xd8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003554:	2300      	movs	r3, #0
 8003556:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x22>
 8003562:	2302      	movs	r3, #2
 8003564:	e3c9      	b.n	8003cfa <HAL_ADC_ConfigChannel+0x7b6>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff fb52 	bl	8002c1c <LL_ADC_REG_IsConversionOngoing>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	f040 83aa 	bne.w	8003cd4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b05      	cmp	r3, #5
 800358e:	d824      	bhi.n	80035da <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	3b02      	subs	r3, #2
 8003596:	2b03      	cmp	r3, #3
 8003598:	d81b      	bhi.n	80035d2 <HAL_ADC_ConfigChannel+0x8e>
 800359a:	a201      	add	r2, pc, #4	; (adr r2, 80035a0 <HAL_ADC_ConfigChannel+0x5c>)
 800359c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a0:	080035b1 	.word	0x080035b1
 80035a4:	080035b9 	.word	0x080035b9
 80035a8:	080035c1 	.word	0x080035c1
 80035ac:	080035c9 	.word	0x080035c9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80035b0:	230c      	movs	r3, #12
 80035b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035b6:	e010      	b.n	80035da <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80035b8:	2312      	movs	r3, #18
 80035ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035be:	e00c      	b.n	80035da <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80035c0:	2318      	movs	r3, #24
 80035c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035c6:	e008      	b.n	80035da <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80035c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035d0:	e003      	b.n	80035da <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80035d2:	2306      	movs	r3, #6
 80035d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035d8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80035e8:	f7ff f9bc 	bl	8002964 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fb13 	bl	8002c1c <LL_ADC_REG_IsConversionOngoing>
 80035f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff fb33 	bl	8002c6a <LL_ADC_INJ_IsConversionOngoing>
 8003604:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003608:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800360c:	2b00      	cmp	r3, #0
 800360e:	f040 81a4 	bne.w	800395a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003612:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 819f 	bne.w	800395a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	461a      	mov	r2, r3
 800362a:	f7ff f9c7 	bl	80029bc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	08db      	lsrs	r3, r3, #3
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b04      	cmp	r3, #4
 800364e:	d00a      	beq.n	8003666 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	6919      	ldr	r1, [r3, #16]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003660:	f7ff f918 	bl	8002894 <LL_ADC_SetOffset>
 8003664:	e179      	b.n	800395a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff f935 	bl	80028dc <LL_ADC_GetOffsetChannel>
 8003672:	4603      	mov	r3, r0
 8003674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x14e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2100      	movs	r1, #0
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff f92a 	bl	80028dc <LL_ADC_GetOffsetChannel>
 8003688:	4603      	mov	r3, r0
 800368a:	0e9b      	lsrs	r3, r3, #26
 800368c:	f003 021f 	and.w	r2, r3, #31
 8003690:	e01e      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x18c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2100      	movs	r1, #0
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff f91f 	bl	80028dc <LL_ADC_GetOffsetChannel>
 800369e:	4603      	mov	r3, r0
 80036a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80036c0:	2320      	movs	r3, #32
 80036c2:	e004      	b.n	80036ce <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80036c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036c8:	fab3 f383 	clz	r3, r3
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x1a4>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	0e9b      	lsrs	r3, r3, #26
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	e018      	b.n	800371a <HAL_ADC_ConfigChannel+0x1d6>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80036fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003704:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800370c:	2320      	movs	r3, #32
 800370e:	e004      	b.n	800371a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003710:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003714:	fab3 f383 	clz	r3, r3
 8003718:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800371a:	429a      	cmp	r2, r3
 800371c:	d106      	bne.n	800372c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2200      	movs	r2, #0
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff f8ee 	bl	8002908 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2101      	movs	r1, #1
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff f8d2 	bl	80028dc <LL_ADC_GetOffsetChannel>
 8003738:	4603      	mov	r3, r0
 800373a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10a      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x214>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2101      	movs	r1, #1
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff f8c7 	bl	80028dc <LL_ADC_GetOffsetChannel>
 800374e:	4603      	mov	r3, r0
 8003750:	0e9b      	lsrs	r3, r3, #26
 8003752:	f003 021f 	and.w	r2, r3, #31
 8003756:	e01e      	b.n	8003796 <HAL_ADC_ConfigChannel+0x252>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2101      	movs	r1, #1
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff f8bc 	bl	80028dc <LL_ADC_GetOffsetChannel>
 8003764:	4603      	mov	r3, r0
 8003766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003776:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800377a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800377e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003786:	2320      	movs	r3, #32
 8003788:	e004      	b.n	8003794 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800378a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d105      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x26a>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	0e9b      	lsrs	r3, r3, #26
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	e018      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x29c>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80037c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80037ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80037d2:	2320      	movs	r3, #32
 80037d4:	e004      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80037d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037da:	fab3 f383 	clz	r3, r3
 80037de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d106      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2200      	movs	r2, #0
 80037ea:	2101      	movs	r1, #1
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff f88b 	bl	8002908 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2102      	movs	r1, #2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff f86f 	bl	80028dc <LL_ADC_GetOffsetChannel>
 80037fe:	4603      	mov	r3, r0
 8003800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <HAL_ADC_ConfigChannel+0x2da>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2102      	movs	r1, #2
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff f864 	bl	80028dc <LL_ADC_GetOffsetChannel>
 8003814:	4603      	mov	r3, r0
 8003816:	0e9b      	lsrs	r3, r3, #26
 8003818:	f003 021f 	and.w	r2, r3, #31
 800381c:	e01e      	b.n	800385c <HAL_ADC_ConfigChannel+0x318>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2102      	movs	r1, #2
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff f859 	bl	80028dc <LL_ADC_GetOffsetChannel>
 800382a:	4603      	mov	r3, r0
 800382c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003834:	fa93 f3a3 	rbit	r3, r3
 8003838:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800383c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003840:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003844:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800384c:	2320      	movs	r3, #32
 800384e:	e004      	b.n	800385a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003850:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003854:	fab3 f383 	clz	r3, r3
 8003858:	b2db      	uxtb	r3, r3
 800385a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003864:	2b00      	cmp	r3, #0
 8003866:	d105      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x330>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	0e9b      	lsrs	r3, r3, #26
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	e014      	b.n	800389e <HAL_ADC_ConfigChannel+0x35a>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800387c:	fa93 f3a3 	rbit	r3, r3
 8003880:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003884:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003888:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003890:	2320      	movs	r3, #32
 8003892:	e004      	b.n	800389e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003894:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003898:	fab3 f383 	clz	r3, r3
 800389c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800389e:	429a      	cmp	r2, r3
 80038a0:	d106      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2200      	movs	r2, #0
 80038a8:	2102      	movs	r1, #2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff f82c 	bl	8002908 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2103      	movs	r1, #3
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff f810 	bl	80028dc <LL_ADC_GetOffsetChannel>
 80038bc:	4603      	mov	r3, r0
 80038be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10a      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x398>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2103      	movs	r1, #3
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff f805 	bl	80028dc <LL_ADC_GetOffsetChannel>
 80038d2:	4603      	mov	r3, r0
 80038d4:	0e9b      	lsrs	r3, r3, #26
 80038d6:	f003 021f 	and.w	r2, r3, #31
 80038da:	e017      	b.n	800390c <HAL_ADC_ConfigChannel+0x3c8>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2103      	movs	r1, #3
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe fffa 	bl	80028dc <LL_ADC_GetOffsetChannel>
 80038e8:	4603      	mov	r3, r0
 80038ea:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80038f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80038f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80038fe:	2320      	movs	r3, #32
 8003900:	e003      	b.n	800390a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003904:	fab3 f383 	clz	r3, r3
 8003908:	b2db      	uxtb	r3, r3
 800390a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003914:	2b00      	cmp	r3, #0
 8003916:	d105      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x3e0>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	0e9b      	lsrs	r3, r3, #26
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	e011      	b.n	8003948 <HAL_ADC_ConfigChannel+0x404>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800392c:	fa93 f3a3 	rbit	r3, r3
 8003930:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003934:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800393c:	2320      	movs	r3, #32
 800393e:	e003      	b.n	8003948 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003940:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003942:	fab3 f383 	clz	r3, r3
 8003946:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003948:	429a      	cmp	r2, r3
 800394a:	d106      	bne.n	800395a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2200      	movs	r2, #0
 8003952:	2103      	movs	r1, #3
 8003954:	4618      	mov	r0, r3
 8003956:	f7fe ffd7 	bl	8002908 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff f90e 	bl	8002b80 <LL_ADC_IsEnabled>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	f040 8140 	bne.w	8003bec <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	461a      	mov	r2, r3
 800397a:	f7ff f84b 	bl	8002a14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	4a8f      	ldr	r2, [pc, #572]	; (8003bc0 <HAL_ADC_ConfigChannel+0x67c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	f040 8131 	bne.w	8003bec <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10b      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x46e>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	0e9b      	lsrs	r3, r3, #26
 80039a0:	3301      	adds	r3, #1
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	2b09      	cmp	r3, #9
 80039a8:	bf94      	ite	ls
 80039aa:	2301      	movls	r3, #1
 80039ac:	2300      	movhi	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	e019      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x4a2>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80039c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80039c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80039ca:	2320      	movs	r3, #32
 80039cc:	e003      	b.n	80039d6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80039ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d0:	fab3 f383 	clz	r3, r3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	2b09      	cmp	r3, #9
 80039de:	bf94      	ite	ls
 80039e0:	2301      	movls	r3, #1
 80039e2:	2300      	movhi	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d079      	beq.n	8003ade <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d107      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x4c2>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	0e9b      	lsrs	r3, r3, #26
 80039fc:	3301      	adds	r3, #1
 80039fe:	069b      	lsls	r3, r3, #26
 8003a00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a04:	e015      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x4ee>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a16:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003a1e:	2320      	movs	r3, #32
 8003a20:	e003      	b.n	8003a2a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a24:	fab3 f383 	clz	r3, r3
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	069b      	lsls	r3, r3, #26
 8003a2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x50e>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	0e9b      	lsrs	r3, r3, #26
 8003a44:	3301      	adds	r3, #1
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a50:	e017      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x53e>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a5a:	fa93 f3a3 	rbit	r3, r3
 8003a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a62:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	e003      	b.n	8003a76 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a70:	fab3 f383 	clz	r3, r3
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	3301      	adds	r3, #1
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a82:	ea42 0103 	orr.w	r1, r2, r3
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x564>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	0e9b      	lsrs	r3, r3, #26
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f003 021f 	and.w	r2, r3, #31
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	4413      	add	r3, r2
 8003aa4:	051b      	lsls	r3, r3, #20
 8003aa6:	e018      	b.n	8003ada <HAL_ADC_ConfigChannel+0x596>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab0:	fa93 f3a3 	rbit	r3, r3
 8003ab4:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003ac0:	2320      	movs	r3, #32
 8003ac2:	e003      	b.n	8003acc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac6:	fab3 f383 	clz	r3, r3
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	3301      	adds	r3, #1
 8003ace:	f003 021f 	and.w	r2, r3, #31
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	4413      	add	r3, r2
 8003ad8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ada:	430b      	orrs	r3, r1
 8003adc:	e081      	b.n	8003be2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d107      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x5b6>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	0e9b      	lsrs	r3, r3, #26
 8003af0:	3301      	adds	r3, #1
 8003af2:	069b      	lsls	r3, r3, #26
 8003af4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003af8:	e015      	b.n	8003b26 <HAL_ADC_ConfigChannel+0x5e2>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	fa93 f3a3 	rbit	r3, r3
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003b12:	2320      	movs	r3, #32
 8003b14:	e003      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b18:	fab3 f383 	clz	r3, r3
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	3301      	adds	r3, #1
 8003b20:	069b      	lsls	r3, r3, #26
 8003b22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d109      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x602>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	0e9b      	lsrs	r3, r3, #26
 8003b38:	3301      	adds	r3, #1
 8003b3a:	f003 031f 	and.w	r3, r3, #31
 8003b3e:	2101      	movs	r1, #1
 8003b40:	fa01 f303 	lsl.w	r3, r1, r3
 8003b44:	e017      	b.n	8003b76 <HAL_ADC_ConfigChannel+0x632>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	fa93 f3a3 	rbit	r3, r3
 8003b52:	61bb      	str	r3, [r7, #24]
  return result;
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003b5e:	2320      	movs	r3, #32
 8003b60:	e003      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	fab3 f383 	clz	r3, r3
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f003 031f 	and.w	r3, r3, #31
 8003b70:	2101      	movs	r1, #1
 8003b72:	fa01 f303 	lsl.w	r3, r1, r3
 8003b76:	ea42 0103 	orr.w	r1, r2, r3
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10d      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x65e>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	0e9b      	lsrs	r3, r3, #26
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	f003 021f 	and.w	r2, r3, #31
 8003b92:	4613      	mov	r3, r2
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	4413      	add	r3, r2
 8003b98:	3b1e      	subs	r3, #30
 8003b9a:	051b      	lsls	r3, r3, #20
 8003b9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ba0:	e01e      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x69c>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	fa93 f3a3 	rbit	r3, r3
 8003bae:	60fb      	str	r3, [r7, #12]
  return result;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d104      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003bba:	2320      	movs	r3, #32
 8003bbc:	e006      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x688>
 8003bbe:	bf00      	nop
 8003bc0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	fab3 f383 	clz	r3, r3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	3301      	adds	r3, #1
 8003bce:	f003 021f 	and.w	r2, r3, #31
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3b1e      	subs	r3, #30
 8003bda:	051b      	lsls	r3, r3, #20
 8003bdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003be0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003be6:	4619      	mov	r1, r3
 8003be8:	f7fe fee8 	bl	80029bc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4b44      	ldr	r3, [pc, #272]	; (8003d04 <HAL_ADC_ConfigChannel+0x7c0>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d07a      	beq.n	8003cee <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bf8:	4843      	ldr	r0, [pc, #268]	; (8003d08 <HAL_ADC_ConfigChannel+0x7c4>)
 8003bfa:	f7fe fe3d 	bl	8002878 <LL_ADC_GetCommonPathInternalCh>
 8003bfe:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a41      	ldr	r2, [pc, #260]	; (8003d0c <HAL_ADC_ConfigChannel+0x7c8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d12c      	bne.n	8003c66 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d126      	bne.n	8003c66 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a3c      	ldr	r2, [pc, #240]	; (8003d10 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d004      	beq.n	8003c2c <HAL_ADC_ConfigChannel+0x6e8>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a3b      	ldr	r2, [pc, #236]	; (8003d14 <HAL_ADC_ConfigChannel+0x7d0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d15d      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c34:	4619      	mov	r1, r3
 8003c36:	4834      	ldr	r0, [pc, #208]	; (8003d08 <HAL_ADC_ConfigChannel+0x7c4>)
 8003c38:	f7fe fe0b 	bl	8002852 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c3c:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <HAL_ADC_ConfigChannel+0x7d4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	099b      	lsrs	r3, r3, #6
 8003c42:	4a36      	ldr	r2, [pc, #216]	; (8003d1c <HAL_ADC_ConfigChannel+0x7d8>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	099b      	lsrs	r3, r3, #6
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c56:	e002      	b.n	8003c5e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f9      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c64:	e040      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a2d      	ldr	r2, [pc, #180]	; (8003d20 <HAL_ADC_ConfigChannel+0x7dc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d118      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d112      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a23      	ldr	r2, [pc, #140]	; (8003d10 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d004      	beq.n	8003c90 <HAL_ADC_ConfigChannel+0x74c>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a22      	ldr	r2, [pc, #136]	; (8003d14 <HAL_ADC_ConfigChannel+0x7d0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d12d      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c98:	4619      	mov	r1, r3
 8003c9a:	481b      	ldr	r0, [pc, #108]	; (8003d08 <HAL_ADC_ConfigChannel+0x7c4>)
 8003c9c:	f7fe fdd9 	bl	8002852 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ca0:	e024      	b.n	8003cec <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1f      	ldr	r2, [pc, #124]	; (8003d24 <HAL_ADC_ConfigChannel+0x7e0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d120      	bne.n	8003cee <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d11a      	bne.n	8003cee <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a14      	ldr	r2, [pc, #80]	; (8003d10 <HAL_ADC_ConfigChannel+0x7cc>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d115      	bne.n	8003cee <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cca:	4619      	mov	r1, r3
 8003ccc:	480e      	ldr	r0, [pc, #56]	; (8003d08 <HAL_ADC_ConfigChannel+0x7c4>)
 8003cce:	f7fe fdc0 	bl	8002852 <LL_ADC_SetCommonPathInternalCh>
 8003cd2:	e00c      	b.n	8003cee <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd8:	f043 0220 	orr.w	r2, r3, #32
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003ce6:	e002      	b.n	8003cee <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ce8:	bf00      	nop
 8003cea:	e000      	b.n	8003cee <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cf6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	37d8      	adds	r7, #216	; 0xd8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	80080000 	.word	0x80080000
 8003d08:	50040300 	.word	0x50040300
 8003d0c:	c7520000 	.word	0xc7520000
 8003d10:	50040000 	.word	0x50040000
 8003d14:	50040200 	.word	0x50040200
 8003d18:	20000008 	.word	0x20000008
 8003d1c:	053e2d63 	.word	0x053e2d63
 8003d20:	cb840000 	.word	0xcb840000
 8003d24:	80000001 	.word	0x80000001

08003d28 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe ff6c 	bl	8002c1c <LL_ADC_REG_IsConversionOngoing>
 8003d44:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fe ff8d 	bl	8002c6a <LL_ADC_INJ_IsConversionOngoing>
 8003d50:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d103      	bne.n	8003d60 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 8098 	beq.w	8003e90 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d02a      	beq.n	8003dc4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	7e5b      	ldrb	r3, [r3, #25]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d126      	bne.n	8003dc4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	7e1b      	ldrb	r3, [r3, #24]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d122      	bne.n	8003dc4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003d82:	e014      	b.n	8003dae <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	4a45      	ldr	r2, [pc, #276]	; (8003e9c <ADC_ConversionStop+0x174>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d90d      	bls.n	8003da8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d90:	f043 0210 	orr.w	r2, r3, #16
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9c:	f043 0201 	orr.w	r2, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e074      	b.n	8003e92 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	3301      	adds	r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db8:	2b40      	cmp	r3, #64	; 0x40
 8003dba:	d1e3      	bne.n	8003d84 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2240      	movs	r2, #64	; 0x40
 8003dc2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d014      	beq.n	8003df4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fe ff24 	bl	8002c1c <LL_ADC_REG_IsConversionOngoing>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00c      	beq.n	8003df4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe fee1 	bl	8002ba6 <LL_ADC_IsDisableOngoing>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d104      	bne.n	8003df4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe ff00 	bl	8002bf4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d014      	beq.n	8003e24 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe ff33 	bl	8002c6a <LL_ADC_INJ_IsConversionOngoing>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00c      	beq.n	8003e24 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe fec9 	bl	8002ba6 <LL_ADC_IsDisableOngoing>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d104      	bne.n	8003e24 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fe ff0f 	bl	8002c42 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d005      	beq.n	8003e36 <ADC_ConversionStop+0x10e>
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d105      	bne.n	8003e3c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003e30:	230c      	movs	r3, #12
 8003e32:	617b      	str	r3, [r7, #20]
        break;
 8003e34:	e005      	b.n	8003e42 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003e36:	2308      	movs	r3, #8
 8003e38:	617b      	str	r3, [r7, #20]
        break;
 8003e3a:	e002      	b.n	8003e42 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003e3c:	2304      	movs	r3, #4
 8003e3e:	617b      	str	r3, [r7, #20]
        break;
 8003e40:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003e42:	f7fe fca3 	bl	800278c <HAL_GetTick>
 8003e46:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e48:	e01b      	b.n	8003e82 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003e4a:	f7fe fc9f 	bl	800278c <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b05      	cmp	r3, #5
 8003e56:	d914      	bls.n	8003e82 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00d      	beq.n	8003e82 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6a:	f043 0210 	orr.w	r2, r3, #16
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e76:	f043 0201 	orr.w	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e007      	b.n	8003e92 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1dc      	bne.n	8003e4a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	a33fffff 	.word	0xa33fffff

08003ea0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fe fe65 	bl	8002b80 <LL_ADC_IsEnabled>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d169      	bne.n	8003f90 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	4b36      	ldr	r3, [pc, #216]	; (8003f9c <ADC_Enable+0xfc>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	f043 0210 	orr.w	r2, r3, #16
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eda:	f043 0201 	orr.w	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e055      	b.n	8003f92 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fe fe20 	bl	8002b30 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003ef0:	482b      	ldr	r0, [pc, #172]	; (8003fa0 <ADC_Enable+0x100>)
 8003ef2:	f7fe fcc1 	bl	8002878 <LL_ADC_GetCommonPathInternalCh>
 8003ef6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003ef8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d013      	beq.n	8003f28 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f00:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <ADC_Enable+0x104>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	099b      	lsrs	r3, r3, #6
 8003f06:	4a28      	ldr	r2, [pc, #160]	; (8003fa8 <ADC_Enable+0x108>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	099b      	lsrs	r3, r3, #6
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	4613      	mov	r3, r2
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003f1a:	e002      	b.n	8003f22 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f9      	bne.n	8003f1c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003f28:	f7fe fc30 	bl	800278c <HAL_GetTick>
 8003f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f2e:	e028      	b.n	8003f82 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fe fe23 	bl	8002b80 <LL_ADC_IsEnabled>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d104      	bne.n	8003f4a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fe fdf3 	bl	8002b30 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f4a:	f7fe fc1f 	bl	800278c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d914      	bls.n	8003f82 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d00d      	beq.n	8003f82 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6a:	f043 0210 	orr.w	r2, r3, #16
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f76:	f043 0201 	orr.w	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e007      	b.n	8003f92 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d1cf      	bne.n	8003f30 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	8000003f 	.word	0x8000003f
 8003fa0:	50040300 	.word	0x50040300
 8003fa4:	20000008 	.word	0x20000008
 8003fa8:	053e2d63 	.word	0x053e2d63

08003fac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe fdf4 	bl	8002ba6 <LL_ADC_IsDisableOngoing>
 8003fbe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fe fddb 	bl	8002b80 <LL_ADC_IsEnabled>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d047      	beq.n	8004060 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d144      	bne.n	8004060 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 030d 	and.w	r3, r3, #13
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d10c      	bne.n	8003ffe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe fdb5 	bl	8002b58 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2203      	movs	r2, #3
 8003ff4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ff6:	f7fe fbc9 	bl	800278c <HAL_GetTick>
 8003ffa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ffc:	e029      	b.n	8004052 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004002:	f043 0210 	orr.w	r2, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400e:	f043 0201 	orr.w	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e023      	b.n	8004062 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800401a:	f7fe fbb7 	bl	800278c <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d914      	bls.n	8004052 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00d      	beq.n	8004052 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403a:	f043 0210 	orr.w	r2, r3, #16
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004046:	f043 0201 	orr.w	r2, r3, #1
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e007      	b.n	8004062 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1dc      	bne.n	800401a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <LL_ADC_IsEnabled>:
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <LL_ADC_IsEnabled+0x18>
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <LL_ADC_IsEnabled+0x1a>
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <LL_ADC_REG_IsConversionOngoing>:
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d101      	bne.n	80040a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80040b8:	b590      	push	{r4, r7, lr}
 80040ba:	b09f      	sub	sp, #124	; 0x7c
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e093      	b.n	80041fe <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80040de:	2300      	movs	r3, #0
 80040e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80040e2:	2300      	movs	r3, #0
 80040e4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a47      	ldr	r2, [pc, #284]	; (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d102      	bne.n	80040f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80040f0:	4b46      	ldr	r3, [pc, #280]	; (800420c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	e001      	b.n	80040fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80040f6:	2300      	movs	r3, #0
 80040f8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10b      	bne.n	8004118 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004104:	f043 0220 	orr.w	r2, r3, #32
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e072      	b.n	80041fe <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff ffb8 	bl	8004090 <LL_ADC_REG_IsConversionOngoing>
 8004120:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff ffb2 	bl	8004090 <LL_ADC_REG_IsConversionOngoing>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d154      	bne.n	80041dc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004134:	2b00      	cmp	r3, #0
 8004136:	d151      	bne.n	80041dc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004138:	4b35      	ldr	r3, [pc, #212]	; (8004210 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800413a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d02c      	beq.n	800419e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004156:	035b      	lsls	r3, r3, #13
 8004158:	430b      	orrs	r3, r1
 800415a:	431a      	orrs	r2, r3
 800415c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004160:	4829      	ldr	r0, [pc, #164]	; (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004162:	f7ff ff82 	bl	800406a <LL_ADC_IsEnabled>
 8004166:	4604      	mov	r4, r0
 8004168:	4828      	ldr	r0, [pc, #160]	; (800420c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800416a:	f7ff ff7e 	bl	800406a <LL_ADC_IsEnabled>
 800416e:	4603      	mov	r3, r0
 8004170:	431c      	orrs	r4, r3
 8004172:	4828      	ldr	r0, [pc, #160]	; (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004174:	f7ff ff79 	bl	800406a <LL_ADC_IsEnabled>
 8004178:	4603      	mov	r3, r0
 800417a:	4323      	orrs	r3, r4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d137      	bne.n	80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004188:	f023 030f 	bic.w	r3, r3, #15
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	6811      	ldr	r1, [r2, #0]
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	6892      	ldr	r2, [r2, #8]
 8004194:	430a      	orrs	r2, r1
 8004196:	431a      	orrs	r2, r3
 8004198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800419c:	e028      	b.n	80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800419e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041aa:	4817      	ldr	r0, [pc, #92]	; (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80041ac:	f7ff ff5d 	bl	800406a <LL_ADC_IsEnabled>
 80041b0:	4604      	mov	r4, r0
 80041b2:	4816      	ldr	r0, [pc, #88]	; (800420c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80041b4:	f7ff ff59 	bl	800406a <LL_ADC_IsEnabled>
 80041b8:	4603      	mov	r3, r0
 80041ba:	431c      	orrs	r4, r3
 80041bc:	4815      	ldr	r0, [pc, #84]	; (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80041be:	f7ff ff54 	bl	800406a <LL_ADC_IsEnabled>
 80041c2:	4603      	mov	r3, r0
 80041c4:	4323      	orrs	r3, r4
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d112      	bne.n	80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80041d2:	f023 030f 	bic.w	r3, r3, #15
 80041d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041d8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80041da:	e009      	b.n	80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e0:	f043 0220 	orr.w	r2, r3, #32
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80041ee:	e000      	b.n	80041f2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80041f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80041fe:	4618      	mov	r0, r3
 8004200:	377c      	adds	r7, #124	; 0x7c
 8004202:	46bd      	mov	sp, r7
 8004204:	bd90      	pop	{r4, r7, pc}
 8004206:	bf00      	nop
 8004208:	50040000 	.word	0x50040000
 800420c:	50040100 	.word	0x50040100
 8004210:	50040300 	.word	0x50040300
 8004214:	50040200 	.word	0x50040200

08004218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004228:	4b0c      	ldr	r3, [pc, #48]	; (800425c <__NVIC_SetPriorityGrouping+0x44>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004234:	4013      	ands	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800424a:	4a04      	ldr	r2, [pc, #16]	; (800425c <__NVIC_SetPriorityGrouping+0x44>)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	60d3      	str	r3, [r2, #12]
}
 8004250:	bf00      	nop
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	e000ed00 	.word	0xe000ed00

08004260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <__NVIC_GetPriorityGrouping+0x18>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	0a1b      	lsrs	r3, r3, #8
 800426a:	f003 0307 	and.w	r3, r3, #7
}
 800426e:	4618      	mov	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	e000ed00 	.word	0xe000ed00

0800427c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428a:	2b00      	cmp	r3, #0
 800428c:	db0b      	blt.n	80042a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	f003 021f 	and.w	r2, r3, #31
 8004294:	4907      	ldr	r1, [pc, #28]	; (80042b4 <__NVIC_EnableIRQ+0x38>)
 8004296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	2001      	movs	r0, #1
 800429e:	fa00 f202 	lsl.w	r2, r0, r2
 80042a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	e000e100 	.word	0xe000e100

080042b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	6039      	str	r1, [r7, #0]
 80042c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	db0a      	blt.n	80042e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	490c      	ldr	r1, [pc, #48]	; (8004304 <__NVIC_SetPriority+0x4c>)
 80042d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d6:	0112      	lsls	r2, r2, #4
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	440b      	add	r3, r1
 80042dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042e0:	e00a      	b.n	80042f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	4908      	ldr	r1, [pc, #32]	; (8004308 <__NVIC_SetPriority+0x50>)
 80042e8:	79fb      	ldrb	r3, [r7, #7]
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	3b04      	subs	r3, #4
 80042f0:	0112      	lsls	r2, r2, #4
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	440b      	add	r3, r1
 80042f6:	761a      	strb	r2, [r3, #24]
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	e000e100 	.word	0xe000e100
 8004308:	e000ed00 	.word	0xe000ed00

0800430c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800430c:	b480      	push	{r7}
 800430e:	b089      	sub	sp, #36	; 0x24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f1c3 0307 	rsb	r3, r3, #7
 8004326:	2b04      	cmp	r3, #4
 8004328:	bf28      	it	cs
 800432a:	2304      	movcs	r3, #4
 800432c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	3304      	adds	r3, #4
 8004332:	2b06      	cmp	r3, #6
 8004334:	d902      	bls.n	800433c <NVIC_EncodePriority+0x30>
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	3b03      	subs	r3, #3
 800433a:	e000      	b.n	800433e <NVIC_EncodePriority+0x32>
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004340:	f04f 32ff 	mov.w	r2, #4294967295
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	43da      	mvns	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	401a      	ands	r2, r3
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004354:	f04f 31ff 	mov.w	r1, #4294967295
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	fa01 f303 	lsl.w	r3, r1, r3
 800435e:	43d9      	mvns	r1, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004364:	4313      	orrs	r3, r2
         );
}
 8004366:	4618      	mov	r0, r3
 8004368:	3724      	adds	r7, #36	; 0x24
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
	...

08004374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3b01      	subs	r3, #1
 8004380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004384:	d301      	bcc.n	800438a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004386:	2301      	movs	r3, #1
 8004388:	e00f      	b.n	80043aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800438a:	4a0a      	ldr	r2, [pc, #40]	; (80043b4 <SysTick_Config+0x40>)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3b01      	subs	r3, #1
 8004390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004392:	210f      	movs	r1, #15
 8004394:	f04f 30ff 	mov.w	r0, #4294967295
 8004398:	f7ff ff8e 	bl	80042b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <SysTick_Config+0x40>)
 800439e:	2200      	movs	r2, #0
 80043a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043a2:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <SysTick_Config+0x40>)
 80043a4:	2207      	movs	r2, #7
 80043a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	e000e010 	.word	0xe000e010

080043b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff ff29 	bl	8004218 <__NVIC_SetPriorityGrouping>
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b086      	sub	sp, #24
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	4603      	mov	r3, r0
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	607a      	str	r2, [r7, #4]
 80043da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043e0:	f7ff ff3e 	bl	8004260 <__NVIC_GetPriorityGrouping>
 80043e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	6978      	ldr	r0, [r7, #20]
 80043ec:	f7ff ff8e 	bl	800430c <NVIC_EncodePriority>
 80043f0:	4602      	mov	r2, r0
 80043f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f6:	4611      	mov	r1, r2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff ff5d 	bl	80042b8 <__NVIC_SetPriority>
}
 80043fe:	bf00      	nop
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	4603      	mov	r3, r0
 800440e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff ff31 	bl	800427c <__NVIC_EnableIRQ>
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff ffa2 	bl	8004374 <SysTick_Config>
 8004430:	4603      	mov	r3, r0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e098      	b.n	8004580 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	4b4d      	ldr	r3, [pc, #308]	; (800458c <HAL_DMA_Init+0x150>)
 8004456:	429a      	cmp	r2, r3
 8004458:	d80f      	bhi.n	800447a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	4b4b      	ldr	r3, [pc, #300]	; (8004590 <HAL_DMA_Init+0x154>)
 8004462:	4413      	add	r3, r2
 8004464:	4a4b      	ldr	r2, [pc, #300]	; (8004594 <HAL_DMA_Init+0x158>)
 8004466:	fba2 2303 	umull	r2, r3, r2, r3
 800446a:	091b      	lsrs	r3, r3, #4
 800446c:	009a      	lsls	r2, r3, #2
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a48      	ldr	r2, [pc, #288]	; (8004598 <HAL_DMA_Init+0x15c>)
 8004476:	641a      	str	r2, [r3, #64]	; 0x40
 8004478:	e00e      	b.n	8004498 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	4b46      	ldr	r3, [pc, #280]	; (800459c <HAL_DMA_Init+0x160>)
 8004482:	4413      	add	r3, r2
 8004484:	4a43      	ldr	r2, [pc, #268]	; (8004594 <HAL_DMA_Init+0x158>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	091b      	lsrs	r3, r3, #4
 800448c:	009a      	lsls	r2, r3, #2
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a42      	ldr	r2, [pc, #264]	; (80045a0 <HAL_DMA_Init+0x164>)
 8004496:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80044bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044f2:	d039      	beq.n	8004568 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	4a27      	ldr	r2, [pc, #156]	; (8004598 <HAL_DMA_Init+0x15c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d11a      	bne.n	8004534 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80044fe:	4b29      	ldr	r3, [pc, #164]	; (80045a4 <HAL_DMA_Init+0x168>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004506:	f003 031c 	and.w	r3, r3, #28
 800450a:	210f      	movs	r1, #15
 800450c:	fa01 f303 	lsl.w	r3, r1, r3
 8004510:	43db      	mvns	r3, r3
 8004512:	4924      	ldr	r1, [pc, #144]	; (80045a4 <HAL_DMA_Init+0x168>)
 8004514:	4013      	ands	r3, r2
 8004516:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004518:	4b22      	ldr	r3, [pc, #136]	; (80045a4 <HAL_DMA_Init+0x168>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6859      	ldr	r1, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004524:	f003 031c 	and.w	r3, r3, #28
 8004528:	fa01 f303 	lsl.w	r3, r1, r3
 800452c:	491d      	ldr	r1, [pc, #116]	; (80045a4 <HAL_DMA_Init+0x168>)
 800452e:	4313      	orrs	r3, r2
 8004530:	600b      	str	r3, [r1, #0]
 8004532:	e019      	b.n	8004568 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004534:	4b1c      	ldr	r3, [pc, #112]	; (80045a8 <HAL_DMA_Init+0x16c>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	f003 031c 	and.w	r3, r3, #28
 8004540:	210f      	movs	r1, #15
 8004542:	fa01 f303 	lsl.w	r3, r1, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	4917      	ldr	r1, [pc, #92]	; (80045a8 <HAL_DMA_Init+0x16c>)
 800454a:	4013      	ands	r3, r2
 800454c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800454e:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <HAL_DMA_Init+0x16c>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6859      	ldr	r1, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455a:	f003 031c 	and.w	r3, r3, #28
 800455e:	fa01 f303 	lsl.w	r3, r1, r3
 8004562:	4911      	ldr	r1, [pc, #68]	; (80045a8 <HAL_DMA_Init+0x16c>)
 8004564:	4313      	orrs	r3, r2
 8004566:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	40020407 	.word	0x40020407
 8004590:	bffdfff8 	.word	0xbffdfff8
 8004594:	cccccccd 	.word	0xcccccccd
 8004598:	40020000 	.word	0x40020000
 800459c:	bffdfbf8 	.word	0xbffdfbf8
 80045a0:	40020400 	.word	0x40020400
 80045a4:	400200a8 	.word	0x400200a8
 80045a8:	400204a8 	.word	0x400204a8

080045ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_DMA_Start_IT+0x20>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e04b      	b.n	8004664 <HAL_DMA_Start_IT+0xb8>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d13a      	bne.n	8004656 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f95f 	bl	80048c8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	2b00      	cmp	r3, #0
 8004610:	d008      	beq.n	8004624 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 020e 	orr.w	r2, r2, #14
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	e00f      	b.n	8004644 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0204 	bic.w	r2, r2, #4
 8004632:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 020a 	orr.w	r2, r2, #10
 8004642:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	e005      	b.n	8004662 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800465e:	2302      	movs	r3, #2
 8004660:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004662:	7dfb      	ldrb	r3, [r7, #23]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d008      	beq.n	8004696 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2204      	movs	r2, #4
 8004688:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e022      	b.n	80046dc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 020e 	bic.w	r2, r2, #14
 80046a4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ba:	f003 021c 	and.w	r2, r3, #28
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	2101      	movs	r1, #1
 80046c4:	fa01 f202 	lsl.w	r2, r1, r2
 80046c8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80046da:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d005      	beq.n	800470c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2204      	movs	r2, #4
 8004704:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
 800470a:	e029      	b.n	8004760 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 020e 	bic.w	r2, r2, #14
 800471a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004730:	f003 021c 	and.w	r2, r3, #28
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	2101      	movs	r1, #1
 800473a:	fa01 f202 	lsl.w	r2, r1, r2
 800473e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	4798      	blx	r3
    }
  }
  return status;
 8004760:	7bfb      	ldrb	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	f003 031c 	and.w	r3, r3, #28
 800478a:	2204      	movs	r2, #4
 800478c:	409a      	lsls	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4013      	ands	r3, r2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d026      	beq.n	80047e4 <HAL_DMA_IRQHandler+0x7a>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d021      	beq.n	80047e4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d107      	bne.n	80047be <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0204 	bic.w	r2, r2, #4
 80047bc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	f003 021c 	and.w	r2, r3, #28
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	2104      	movs	r1, #4
 80047cc:	fa01 f202 	lsl.w	r2, r1, r2
 80047d0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d071      	beq.n	80048be <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80047e2:	e06c      	b.n	80048be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e8:	f003 031c 	and.w	r3, r3, #28
 80047ec:	2202      	movs	r2, #2
 80047ee:	409a      	lsls	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d02e      	beq.n	8004856 <HAL_DMA_IRQHandler+0xec>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d029      	beq.n	8004856 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 020a 	bic.w	r2, r2, #10
 800481e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482c:	f003 021c 	and.w	r2, r3, #28
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	2102      	movs	r1, #2
 8004836:	fa01 f202 	lsl.w	r2, r1, r2
 800483a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	2b00      	cmp	r3, #0
 800484a:	d038      	beq.n	80048be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004854:	e033      	b.n	80048be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485a:	f003 031c 	and.w	r3, r3, #28
 800485e:	2208      	movs	r2, #8
 8004860:	409a      	lsls	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4013      	ands	r3, r2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d02a      	beq.n	80048c0 <HAL_DMA_IRQHandler+0x156>
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b00      	cmp	r3, #0
 8004872:	d025      	beq.n	80048c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 020e 	bic.w	r2, r2, #14
 8004882:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004888:	f003 021c 	and.w	r2, r3, #28
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	2101      	movs	r1, #1
 8004892:	fa01 f202 	lsl.w	r2, r1, r2
 8004896:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d004      	beq.n	80048c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80048be:	bf00      	nop
 80048c0:	bf00      	nop
}
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048da:	f003 021c 	and.w	r2, r3, #28
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	2101      	movs	r1, #1
 80048e4:	fa01 f202 	lsl.w	r2, r1, r2
 80048e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2b10      	cmp	r3, #16
 80048f8:	d108      	bne.n	800490c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800490a:	e007      	b.n	800491c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	60da      	str	r2, [r3, #12]
}
 800491c:	bf00      	nop
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004936:	e17f      	b.n	8004c38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	2101      	movs	r1, #1
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	fa01 f303 	lsl.w	r3, r1, r3
 8004944:	4013      	ands	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 8171 	beq.w	8004c32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 0303 	and.w	r3, r3, #3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d005      	beq.n	8004968 <HAL_GPIO_Init+0x40>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d130      	bne.n	80049ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	2203      	movs	r2, #3
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	43db      	mvns	r3, r3
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4013      	ands	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800499e:	2201      	movs	r2, #1
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	43db      	mvns	r3, r3
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4013      	ands	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	091b      	lsrs	r3, r3, #4
 80049b4:	f003 0201 	and.w	r2, r3, #1
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d118      	bne.n	8004a08 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80049dc:	2201      	movs	r2, #1
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	43db      	mvns	r3, r3
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4013      	ands	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	08db      	lsrs	r3, r3, #3
 80049f2:	f003 0201 	and.w	r2, r3, #1
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d017      	beq.n	8004a44 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	2203      	movs	r2, #3
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	43db      	mvns	r3, r3
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d123      	bne.n	8004a98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	08da      	lsrs	r2, r3, #3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3208      	adds	r2, #8
 8004a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	220f      	movs	r2, #15
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4013      	ands	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	08da      	lsrs	r2, r3, #3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3208      	adds	r2, #8
 8004a92:	6939      	ldr	r1, [r7, #16]
 8004a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	2203      	movs	r2, #3
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4013      	ands	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f003 0203 	and.w	r2, r3, #3
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80ac 	beq.w	8004c32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ada:	4b5f      	ldr	r3, [pc, #380]	; (8004c58 <HAL_GPIO_Init+0x330>)
 8004adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ade:	4a5e      	ldr	r2, [pc, #376]	; (8004c58 <HAL_GPIO_Init+0x330>)
 8004ae0:	f043 0301 	orr.w	r3, r3, #1
 8004ae4:	6613      	str	r3, [r2, #96]	; 0x60
 8004ae6:	4b5c      	ldr	r3, [pc, #368]	; (8004c58 <HAL_GPIO_Init+0x330>)
 8004ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	60bb      	str	r3, [r7, #8]
 8004af0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004af2:	4a5a      	ldr	r2, [pc, #360]	; (8004c5c <HAL_GPIO_Init+0x334>)
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	089b      	lsrs	r3, r3, #2
 8004af8:	3302      	adds	r3, #2
 8004afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	220f      	movs	r2, #15
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4013      	ands	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b1c:	d025      	beq.n	8004b6a <HAL_GPIO_Init+0x242>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a4f      	ldr	r2, [pc, #316]	; (8004c60 <HAL_GPIO_Init+0x338>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d01f      	beq.n	8004b66 <HAL_GPIO_Init+0x23e>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a4e      	ldr	r2, [pc, #312]	; (8004c64 <HAL_GPIO_Init+0x33c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d019      	beq.n	8004b62 <HAL_GPIO_Init+0x23a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a4d      	ldr	r2, [pc, #308]	; (8004c68 <HAL_GPIO_Init+0x340>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d013      	beq.n	8004b5e <HAL_GPIO_Init+0x236>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a4c      	ldr	r2, [pc, #304]	; (8004c6c <HAL_GPIO_Init+0x344>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00d      	beq.n	8004b5a <HAL_GPIO_Init+0x232>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a4b      	ldr	r2, [pc, #300]	; (8004c70 <HAL_GPIO_Init+0x348>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d007      	beq.n	8004b56 <HAL_GPIO_Init+0x22e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a4a      	ldr	r2, [pc, #296]	; (8004c74 <HAL_GPIO_Init+0x34c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d101      	bne.n	8004b52 <HAL_GPIO_Init+0x22a>
 8004b4e:	2306      	movs	r3, #6
 8004b50:	e00c      	b.n	8004b6c <HAL_GPIO_Init+0x244>
 8004b52:	2307      	movs	r3, #7
 8004b54:	e00a      	b.n	8004b6c <HAL_GPIO_Init+0x244>
 8004b56:	2305      	movs	r3, #5
 8004b58:	e008      	b.n	8004b6c <HAL_GPIO_Init+0x244>
 8004b5a:	2304      	movs	r3, #4
 8004b5c:	e006      	b.n	8004b6c <HAL_GPIO_Init+0x244>
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e004      	b.n	8004b6c <HAL_GPIO_Init+0x244>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e002      	b.n	8004b6c <HAL_GPIO_Init+0x244>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <HAL_GPIO_Init+0x244>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	f002 0203 	and.w	r2, r2, #3
 8004b72:	0092      	lsls	r2, r2, #2
 8004b74:	4093      	lsls	r3, r2
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b7c:	4937      	ldr	r1, [pc, #220]	; (8004c5c <HAL_GPIO_Init+0x334>)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	089b      	lsrs	r3, r3, #2
 8004b82:	3302      	adds	r3, #2
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b8a:	4b3b      	ldr	r3, [pc, #236]	; (8004c78 <HAL_GPIO_Init+0x350>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	43db      	mvns	r3, r3
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4013      	ands	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004bae:	4a32      	ldr	r2, [pc, #200]	; (8004c78 <HAL_GPIO_Init+0x350>)
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004bb4:	4b30      	ldr	r3, [pc, #192]	; (8004c78 <HAL_GPIO_Init+0x350>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004bd8:	4a27      	ldr	r2, [pc, #156]	; (8004c78 <HAL_GPIO_Init+0x350>)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004bde:	4b26      	ldr	r3, [pc, #152]	; (8004c78 <HAL_GPIO_Init+0x350>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	43db      	mvns	r3, r3
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4013      	ands	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c02:	4a1d      	ldr	r2, [pc, #116]	; (8004c78 <HAL_GPIO_Init+0x350>)
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004c08:	4b1b      	ldr	r3, [pc, #108]	; (8004c78 <HAL_GPIO_Init+0x350>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4013      	ands	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c2c:	4a12      	ldr	r2, [pc, #72]	; (8004c78 <HAL_GPIO_Init+0x350>)
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	3301      	adds	r3, #1
 8004c36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f47f ae78 	bne.w	8004938 <HAL_GPIO_Init+0x10>
  }
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	48000400 	.word	0x48000400
 8004c64:	48000800 	.word	0x48000800
 8004c68:	48000c00 	.word	0x48000c00
 8004c6c:	48001000 	.word	0x48001000
 8004c70:	48001400 	.word	0x48001400
 8004c74:	48001800 	.word	0x48001800
 8004c78:	40010400 	.word	0x40010400

08004c7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004c8a:	e0cd      	b.n	8004e28 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	fa02 f303 	lsl.w	r3, r2, r3
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	4013      	ands	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80c0 	beq.w	8004e22 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004ca2:	4a68      	ldr	r2, [pc, #416]	; (8004e44 <HAL_GPIO_DeInit+0x1c8>)
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	089b      	lsrs	r3, r3, #2
 8004ca8:	3302      	adds	r3, #2
 8004caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cae:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	220f      	movs	r2, #15
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004cca:	d025      	beq.n	8004d18 <HAL_GPIO_DeInit+0x9c>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a5e      	ldr	r2, [pc, #376]	; (8004e48 <HAL_GPIO_DeInit+0x1cc>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d01f      	beq.n	8004d14 <HAL_GPIO_DeInit+0x98>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a5d      	ldr	r2, [pc, #372]	; (8004e4c <HAL_GPIO_DeInit+0x1d0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d019      	beq.n	8004d10 <HAL_GPIO_DeInit+0x94>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a5c      	ldr	r2, [pc, #368]	; (8004e50 <HAL_GPIO_DeInit+0x1d4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <HAL_GPIO_DeInit+0x90>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a5b      	ldr	r2, [pc, #364]	; (8004e54 <HAL_GPIO_DeInit+0x1d8>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00d      	beq.n	8004d08 <HAL_GPIO_DeInit+0x8c>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a5a      	ldr	r2, [pc, #360]	; (8004e58 <HAL_GPIO_DeInit+0x1dc>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d007      	beq.n	8004d04 <HAL_GPIO_DeInit+0x88>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a59      	ldr	r2, [pc, #356]	; (8004e5c <HAL_GPIO_DeInit+0x1e0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d101      	bne.n	8004d00 <HAL_GPIO_DeInit+0x84>
 8004cfc:	2306      	movs	r3, #6
 8004cfe:	e00c      	b.n	8004d1a <HAL_GPIO_DeInit+0x9e>
 8004d00:	2307      	movs	r3, #7
 8004d02:	e00a      	b.n	8004d1a <HAL_GPIO_DeInit+0x9e>
 8004d04:	2305      	movs	r3, #5
 8004d06:	e008      	b.n	8004d1a <HAL_GPIO_DeInit+0x9e>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	e006      	b.n	8004d1a <HAL_GPIO_DeInit+0x9e>
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e004      	b.n	8004d1a <HAL_GPIO_DeInit+0x9e>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e002      	b.n	8004d1a <HAL_GPIO_DeInit+0x9e>
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <HAL_GPIO_DeInit+0x9e>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	f002 0203 	and.w	r2, r2, #3
 8004d20:	0092      	lsls	r2, r2, #2
 8004d22:	4093      	lsls	r3, r2
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d132      	bne.n	8004d90 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004d2a:	4b4d      	ldr	r3, [pc, #308]	; (8004e60 <HAL_GPIO_DeInit+0x1e4>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	494b      	ldr	r1, [pc, #300]	; (8004e60 <HAL_GPIO_DeInit+0x1e4>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004d38:	4b49      	ldr	r3, [pc, #292]	; (8004e60 <HAL_GPIO_DeInit+0x1e4>)
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	4947      	ldr	r1, [pc, #284]	; (8004e60 <HAL_GPIO_DeInit+0x1e4>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004d46:	4b46      	ldr	r3, [pc, #280]	; (8004e60 <HAL_GPIO_DeInit+0x1e4>)
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	4944      	ldr	r1, [pc, #272]	; (8004e60 <HAL_GPIO_DeInit+0x1e4>)
 8004d50:	4013      	ands	r3, r2
 8004d52:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004d54:	4b42      	ldr	r3, [pc, #264]	; (8004e60 <HAL_GPIO_DeInit+0x1e4>)
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	4940      	ldr	r1, [pc, #256]	; (8004e60 <HAL_GPIO_DeInit+0x1e4>)
 8004d5e:	4013      	ands	r3, r2
 8004d60:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f003 0303 	and.w	r3, r3, #3
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	220f      	movs	r2, #15
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004d72:	4a34      	ldr	r2, [pc, #208]	; (8004e44 <HAL_GPIO_DeInit+0x1c8>)
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	089b      	lsrs	r3, r3, #2
 8004d78:	3302      	adds	r3, #2
 8004d7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	43da      	mvns	r2, r3
 8004d82:	4830      	ldr	r0, [pc, #192]	; (8004e44 <HAL_GPIO_DeInit+0x1c8>)
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	089b      	lsrs	r3, r3, #2
 8004d88:	400a      	ands	r2, r1
 8004d8a:	3302      	adds	r3, #2
 8004d8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	2103      	movs	r1, #3
 8004d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	08da      	lsrs	r2, r3, #3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3208      	adds	r2, #8
 8004dac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	220f      	movs	r2, #15
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	08d2      	lsrs	r2, r2, #3
 8004dc4:	4019      	ands	r1, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3208      	adds	r2, #8
 8004dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	2103      	movs	r1, #3
 8004dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	401a      	ands	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	2101      	movs	r1, #1
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	fa01 f303 	lsl.w	r3, r1, r3
 8004df0:	43db      	mvns	r3, r3
 8004df2:	401a      	ands	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	2103      	movs	r1, #3
 8004e02:	fa01 f303 	lsl.w	r3, r1, r3
 8004e06:	43db      	mvns	r3, r3
 8004e08:	401a      	ands	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e12:	2101      	movs	r1, #1
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	401a      	ands	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	3301      	adds	r3, #1
 8004e26:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f47f af2b 	bne.w	8004c8c <HAL_GPIO_DeInit+0x10>
  }
}
 8004e36:	bf00      	nop
 8004e38:	bf00      	nop
 8004e3a:	371c      	adds	r7, #28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	40010000 	.word	0x40010000
 8004e48:	48000400 	.word	0x48000400
 8004e4c:	48000800 	.word	0x48000800
 8004e50:	48000c00 	.word	0x48000c00
 8004e54:	48001000 	.word	0x48001000
 8004e58:	48001400 	.word	0x48001400
 8004e5c:	48001800 	.word	0x48001800
 8004e60:	40010400 	.word	0x40010400

08004e64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	887b      	ldrh	r3, [r7, #2]
 8004e76:	4013      	ands	r3, r2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	73fb      	strb	r3, [r7, #15]
 8004e80:	e001      	b.n	8004e86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e82:	2300      	movs	r3, #0
 8004e84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	807b      	strh	r3, [r7, #2]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ea4:	787b      	ldrb	r3, [r7, #1]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004eaa:	887a      	ldrh	r2, [r7, #2]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004eb0:	e002      	b.n	8004eb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004eb2:	887a      	ldrh	r2, [r7, #2]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ed6:	887a      	ldrh	r2, [r7, #2]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4013      	ands	r3, r2
 8004edc:	041a      	lsls	r2, r3, #16
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	43d9      	mvns	r1, r3
 8004ee2:	887b      	ldrh	r3, [r7, #2]
 8004ee4:	400b      	ands	r3, r1
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	619a      	str	r2, [r3, #24]
}
 8004eec:	bf00      	nop
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f02:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	88fb      	ldrh	r3, [r7, #6]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d006      	beq.n	8004f1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f0e:	4a05      	ldr	r2, [pc, #20]	; (8004f24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f10:	88fb      	ldrh	r3, [r7, #6]
 8004f12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f14:	88fb      	ldrh	r3, [r7, #6]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 f806 	bl	8004f28 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40010400 	.word	0x40010400

08004f28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
	...

08004f40 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a04      	ldr	r2, [pc, #16]	; (8004f5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4e:	6013      	str	r3, [r2, #0]
}
 8004f50:	bf00      	nop
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40007000 	.word	0x40007000

08004f60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004f64:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <HAL_PWREx_GetVoltageRange+0x18>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40007000 	.word	0x40007000

08004f7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f8a:	d130      	bne.n	8004fee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f8c:	4b23      	ldr	r3, [pc, #140]	; (800501c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f98:	d038      	beq.n	800500c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f9a:	4b20      	ldr	r3, [pc, #128]	; (800501c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fa2:	4a1e      	ldr	r2, [pc, #120]	; (800501c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004faa:	4b1d      	ldr	r3, [pc, #116]	; (8005020 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2232      	movs	r2, #50	; 0x32
 8004fb0:	fb02 f303 	mul.w	r3, r2, r3
 8004fb4:	4a1b      	ldr	r2, [pc, #108]	; (8005024 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fba:	0c9b      	lsrs	r3, r3, #18
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fc0:	e002      	b.n	8004fc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fc8:	4b14      	ldr	r3, [pc, #80]	; (800501c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd4:	d102      	bne.n	8004fdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1f2      	bne.n	8004fc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fdc:	4b0f      	ldr	r3, [pc, #60]	; (800501c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe8:	d110      	bne.n	800500c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e00f      	b.n	800500e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fee:	4b0b      	ldr	r3, [pc, #44]	; (800501c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffa:	d007      	beq.n	800500c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ffc:	4b07      	ldr	r3, [pc, #28]	; (800501c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005004:	4a05      	ldr	r2, [pc, #20]	; (800501c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800500a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40007000 	.word	0x40007000
 8005020:	20000008 	.word	0x20000008
 8005024:	431bde83 	.word	0x431bde83

08005028 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	4603      	mov	r3, r0
 8005030:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8005032:	4b11      	ldr	r3, [pc, #68]	; (8005078 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 0307 	bic.w	r3, r3, #7
 800503a:	4a0f      	ldr	r2, [pc, #60]	; (8005078 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800503c:	f043 0302 	orr.w	r3, r3, #2
 8005040:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005042:	4b0e      	ldr	r3, [pc, #56]	; (800507c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	4a0d      	ldr	r2, [pc, #52]	; (800507c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8005048:	f043 0304 	orr.w	r3, r3, #4
 800504c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005054:	bf30      	wfi
 8005056:	e002      	b.n	800505e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005058:	bf40      	sev
    __WFE();
 800505a:	bf20      	wfe
    __WFE();
 800505c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800505e:	4b07      	ldr	r3, [pc, #28]	; (800507c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	4a06      	ldr	r2, [pc, #24]	; (800507c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8005064:	f023 0304 	bic.w	r3, r3, #4
 8005068:	6113      	str	r3, [r2, #16]
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40007000 	.word	0x40007000
 800507c:	e000ed00 	.word	0xe000ed00

08005080 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e3ca      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005092:	4b97      	ldr	r3, [pc, #604]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 030c 	and.w	r3, r3, #12
 800509a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800509c:	4b94      	ldr	r3, [pc, #592]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f003 0303 	and.w	r3, r3, #3
 80050a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0310 	and.w	r3, r3, #16
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 80e4 	beq.w	800527c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d007      	beq.n	80050ca <HAL_RCC_OscConfig+0x4a>
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	2b0c      	cmp	r3, #12
 80050be:	f040 808b 	bne.w	80051d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	f040 8087 	bne.w	80051d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050ca:	4b89      	ldr	r3, [pc, #548]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d005      	beq.n	80050e2 <HAL_RCC_OscConfig+0x62>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e3a2      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1a      	ldr	r2, [r3, #32]
 80050e6:	4b82      	ldr	r3, [pc, #520]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d004      	beq.n	80050fc <HAL_RCC_OscConfig+0x7c>
 80050f2:	4b7f      	ldr	r3, [pc, #508]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050fa:	e005      	b.n	8005108 <HAL_RCC_OscConfig+0x88>
 80050fc:	4b7c      	ldr	r3, [pc, #496]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 80050fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005102:	091b      	lsrs	r3, r3, #4
 8005104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005108:	4293      	cmp	r3, r2
 800510a:	d223      	bcs.n	8005154 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fd55 	bl	8005bc0 <RCC_SetFlashLatencyFromMSIRange>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e383      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005120:	4b73      	ldr	r3, [pc, #460]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a72      	ldr	r2, [pc, #456]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 8005126:	f043 0308 	orr.w	r3, r3, #8
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	4b70      	ldr	r3, [pc, #448]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	496d      	ldr	r1, [pc, #436]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 800513a:	4313      	orrs	r3, r2
 800513c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800513e:	4b6c      	ldr	r3, [pc, #432]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	021b      	lsls	r3, r3, #8
 800514c:	4968      	ldr	r1, [pc, #416]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 800514e:	4313      	orrs	r3, r2
 8005150:	604b      	str	r3, [r1, #4]
 8005152:	e025      	b.n	80051a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005154:	4b66      	ldr	r3, [pc, #408]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a65      	ldr	r2, [pc, #404]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 800515a:	f043 0308 	orr.w	r3, r3, #8
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	4b63      	ldr	r3, [pc, #396]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	4960      	ldr	r1, [pc, #384]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 800516e:	4313      	orrs	r3, r2
 8005170:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005172:	4b5f      	ldr	r3, [pc, #380]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	021b      	lsls	r3, r3, #8
 8005180:	495b      	ldr	r1, [pc, #364]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 8005182:	4313      	orrs	r3, r2
 8005184:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d109      	bne.n	80051a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fd15 	bl	8005bc0 <RCC_SetFlashLatencyFromMSIRange>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e343      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051a0:	f000 fc4a 	bl	8005a38 <HAL_RCC_GetSysClockFreq>
 80051a4:	4602      	mov	r2, r0
 80051a6:	4b52      	ldr	r3, [pc, #328]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	091b      	lsrs	r3, r3, #4
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	4950      	ldr	r1, [pc, #320]	; (80052f4 <HAL_RCC_OscConfig+0x274>)
 80051b2:	5ccb      	ldrb	r3, [r1, r3]
 80051b4:	f003 031f 	and.w	r3, r3, #31
 80051b8:	fa22 f303 	lsr.w	r3, r2, r3
 80051bc:	4a4e      	ldr	r2, [pc, #312]	; (80052f8 <HAL_RCC_OscConfig+0x278>)
 80051be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80051c0:	4b4e      	ldr	r3, [pc, #312]	; (80052fc <HAL_RCC_OscConfig+0x27c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fd fa91 	bl	80026ec <HAL_InitTick>
 80051ca:	4603      	mov	r3, r0
 80051cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d052      	beq.n	800527a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	e327      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d032      	beq.n	8005246 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80051e0:	4b43      	ldr	r3, [pc, #268]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a42      	ldr	r2, [pc, #264]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 80051e6:	f043 0301 	orr.w	r3, r3, #1
 80051ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051ec:	f7fd face 	bl	800278c <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051f4:	f7fd faca 	bl	800278c <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e310      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005206:	4b3a      	ldr	r3, [pc, #232]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0f0      	beq.n	80051f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005212:	4b37      	ldr	r3, [pc, #220]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a36      	ldr	r2, [pc, #216]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 8005218:	f043 0308 	orr.w	r3, r3, #8
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	4b34      	ldr	r3, [pc, #208]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	4931      	ldr	r1, [pc, #196]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 800522c:	4313      	orrs	r3, r2
 800522e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005230:	4b2f      	ldr	r3, [pc, #188]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	021b      	lsls	r3, r3, #8
 800523e:	492c      	ldr	r1, [pc, #176]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 8005240:	4313      	orrs	r3, r2
 8005242:	604b      	str	r3, [r1, #4]
 8005244:	e01a      	b.n	800527c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005246:	4b2a      	ldr	r3, [pc, #168]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a29      	ldr	r2, [pc, #164]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005252:	f7fd fa9b 	bl	800278c <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800525a:	f7fd fa97 	bl	800278c <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e2dd      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800526c:	4b20      	ldr	r3, [pc, #128]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f0      	bne.n	800525a <HAL_RCC_OscConfig+0x1da>
 8005278:	e000      	b.n	800527c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800527a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d074      	beq.n	8005372 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	2b08      	cmp	r3, #8
 800528c:	d005      	beq.n	800529a <HAL_RCC_OscConfig+0x21a>
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b0c      	cmp	r3, #12
 8005292:	d10e      	bne.n	80052b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2b03      	cmp	r3, #3
 8005298:	d10b      	bne.n	80052b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800529a:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d064      	beq.n	8005370 <HAL_RCC_OscConfig+0x2f0>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d160      	bne.n	8005370 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e2ba      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ba:	d106      	bne.n	80052ca <HAL_RCC_OscConfig+0x24a>
 80052bc:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0b      	ldr	r2, [pc, #44]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 80052c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	e026      	b.n	8005318 <HAL_RCC_OscConfig+0x298>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052d2:	d115      	bne.n	8005300 <HAL_RCC_OscConfig+0x280>
 80052d4:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a05      	ldr	r2, [pc, #20]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 80052da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052de:	6013      	str	r3, [r2, #0]
 80052e0:	4b03      	ldr	r3, [pc, #12]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a02      	ldr	r2, [pc, #8]	; (80052f0 <HAL_RCC_OscConfig+0x270>)
 80052e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	e014      	b.n	8005318 <HAL_RCC_OscConfig+0x298>
 80052ee:	bf00      	nop
 80052f0:	40021000 	.word	0x40021000
 80052f4:	0800b5a8 	.word	0x0800b5a8
 80052f8:	20000008 	.word	0x20000008
 80052fc:	2000000c 	.word	0x2000000c
 8005300:	4ba0      	ldr	r3, [pc, #640]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a9f      	ldr	r2, [pc, #636]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 8005306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	4b9d      	ldr	r3, [pc, #628]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a9c      	ldr	r2, [pc, #624]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 8005312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d013      	beq.n	8005348 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005320:	f7fd fa34 	bl	800278c <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005328:	f7fd fa30 	bl	800278c <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b64      	cmp	r3, #100	; 0x64
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e276      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800533a:	4b92      	ldr	r3, [pc, #584]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0f0      	beq.n	8005328 <HAL_RCC_OscConfig+0x2a8>
 8005346:	e014      	b.n	8005372 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005348:	f7fd fa20 	bl	800278c <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005350:	f7fd fa1c 	bl	800278c <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e262      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005362:	4b88      	ldr	r3, [pc, #544]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f0      	bne.n	8005350 <HAL_RCC_OscConfig+0x2d0>
 800536e:	e000      	b.n	8005372 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d060      	beq.n	8005440 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	2b04      	cmp	r3, #4
 8005382:	d005      	beq.n	8005390 <HAL_RCC_OscConfig+0x310>
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b0c      	cmp	r3, #12
 8005388:	d119      	bne.n	80053be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d116      	bne.n	80053be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005390:	4b7c      	ldr	r3, [pc, #496]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <HAL_RCC_OscConfig+0x328>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e23f      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a8:	4b76      	ldr	r3, [pc, #472]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	061b      	lsls	r3, r3, #24
 80053b6:	4973      	ldr	r1, [pc, #460]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053bc:	e040      	b.n	8005440 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d023      	beq.n	800540e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053c6:	4b6f      	ldr	r3, [pc, #444]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a6e      	ldr	r2, [pc, #440]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 80053cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d2:	f7fd f9db 	bl	800278c <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053d8:	e008      	b.n	80053ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053da:	f7fd f9d7 	bl	800278c <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e21d      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053ec:	4b65      	ldr	r3, [pc, #404]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0f0      	beq.n	80053da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f8:	4b62      	ldr	r3, [pc, #392]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	061b      	lsls	r3, r3, #24
 8005406:	495f      	ldr	r1, [pc, #380]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 8005408:	4313      	orrs	r3, r2
 800540a:	604b      	str	r3, [r1, #4]
 800540c:	e018      	b.n	8005440 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800540e:	4b5d      	ldr	r3, [pc, #372]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a5c      	ldr	r2, [pc, #368]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 8005414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541a:	f7fd f9b7 	bl	800278c <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005422:	f7fd f9b3 	bl	800278c <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e1f9      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005434:	4b53      	ldr	r3, [pc, #332]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1f0      	bne.n	8005422 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b00      	cmp	r3, #0
 800544a:	d03c      	beq.n	80054c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01c      	beq.n	800548e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005454:	4b4b      	ldr	r3, [pc, #300]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 8005456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800545a:	4a4a      	ldr	r2, [pc, #296]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 800545c:	f043 0301 	orr.w	r3, r3, #1
 8005460:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005464:	f7fd f992 	bl	800278c <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800546c:	f7fd f98e 	bl	800278c <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e1d4      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800547e:	4b41      	ldr	r3, [pc, #260]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 8005480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0ef      	beq.n	800546c <HAL_RCC_OscConfig+0x3ec>
 800548c:	e01b      	b.n	80054c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800548e:	4b3d      	ldr	r3, [pc, #244]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 8005490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005494:	4a3b      	ldr	r2, [pc, #236]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 8005496:	f023 0301 	bic.w	r3, r3, #1
 800549a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800549e:	f7fd f975 	bl	800278c <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054a6:	f7fd f971 	bl	800278c <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e1b7      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054b8:	4b32      	ldr	r3, [pc, #200]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 80054ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1ef      	bne.n	80054a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0304 	and.w	r3, r3, #4
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 80a6 	beq.w	8005620 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054d4:	2300      	movs	r3, #0
 80054d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80054d8:	4b2a      	ldr	r3, [pc, #168]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 80054da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10d      	bne.n	8005500 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054e4:	4b27      	ldr	r3, [pc, #156]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 80054e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e8:	4a26      	ldr	r2, [pc, #152]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 80054ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ee:	6593      	str	r3, [r2, #88]	; 0x58
 80054f0:	4b24      	ldr	r3, [pc, #144]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 80054f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054fc:	2301      	movs	r3, #1
 80054fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005500:	4b21      	ldr	r3, [pc, #132]	; (8005588 <HAL_RCC_OscConfig+0x508>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005508:	2b00      	cmp	r3, #0
 800550a:	d118      	bne.n	800553e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800550c:	4b1e      	ldr	r3, [pc, #120]	; (8005588 <HAL_RCC_OscConfig+0x508>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a1d      	ldr	r2, [pc, #116]	; (8005588 <HAL_RCC_OscConfig+0x508>)
 8005512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005516:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005518:	f7fd f938 	bl	800278c <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005520:	f7fd f934 	bl	800278c <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e17a      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005532:	4b15      	ldr	r3, [pc, #84]	; (8005588 <HAL_RCC_OscConfig+0x508>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d108      	bne.n	8005558 <HAL_RCC_OscConfig+0x4d8>
 8005546:	4b0f      	ldr	r3, [pc, #60]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 8005548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554c:	4a0d      	ldr	r2, [pc, #52]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 800554e:	f043 0301 	orr.w	r3, r3, #1
 8005552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005556:	e029      	b.n	80055ac <HAL_RCC_OscConfig+0x52c>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	2b05      	cmp	r3, #5
 800555e:	d115      	bne.n	800558c <HAL_RCC_OscConfig+0x50c>
 8005560:	4b08      	ldr	r3, [pc, #32]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 8005562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005566:	4a07      	ldr	r2, [pc, #28]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 8005568:	f043 0304 	orr.w	r3, r3, #4
 800556c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005570:	4b04      	ldr	r3, [pc, #16]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 8005572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005576:	4a03      	ldr	r2, [pc, #12]	; (8005584 <HAL_RCC_OscConfig+0x504>)
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005580:	e014      	b.n	80055ac <HAL_RCC_OscConfig+0x52c>
 8005582:	bf00      	nop
 8005584:	40021000 	.word	0x40021000
 8005588:	40007000 	.word	0x40007000
 800558c:	4b9c      	ldr	r3, [pc, #624]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 800558e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005592:	4a9b      	ldr	r2, [pc, #620]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 8005594:	f023 0301 	bic.w	r3, r3, #1
 8005598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800559c:	4b98      	ldr	r3, [pc, #608]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 800559e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a2:	4a97      	ldr	r2, [pc, #604]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 80055a4:	f023 0304 	bic.w	r3, r3, #4
 80055a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d016      	beq.n	80055e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b4:	f7fd f8ea 	bl	800278c <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ba:	e00a      	b.n	80055d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055bc:	f7fd f8e6 	bl	800278c <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e12a      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055d2:	4b8b      	ldr	r3, [pc, #556]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 80055d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0ed      	beq.n	80055bc <HAL_RCC_OscConfig+0x53c>
 80055e0:	e015      	b.n	800560e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e2:	f7fd f8d3 	bl	800278c <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055e8:	e00a      	b.n	8005600 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ea:	f7fd f8cf 	bl	800278c <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e113      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005600:	4b7f      	ldr	r3, [pc, #508]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1ed      	bne.n	80055ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800560e:	7ffb      	ldrb	r3, [r7, #31]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d105      	bne.n	8005620 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005614:	4b7a      	ldr	r3, [pc, #488]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 8005616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005618:	4a79      	ldr	r2, [pc, #484]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 800561a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800561e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80fe 	beq.w	8005826 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	2b02      	cmp	r3, #2
 8005630:	f040 80d0 	bne.w	80057d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005634:	4b72      	ldr	r3, [pc, #456]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f003 0203 	and.w	r2, r3, #3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	429a      	cmp	r2, r3
 8005646:	d130      	bne.n	80056aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	3b01      	subs	r3, #1
 8005654:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005656:	429a      	cmp	r2, r3
 8005658:	d127      	bne.n	80056aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005664:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005666:	429a      	cmp	r2, r3
 8005668:	d11f      	bne.n	80056aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005674:	2a07      	cmp	r2, #7
 8005676:	bf14      	ite	ne
 8005678:	2201      	movne	r2, #1
 800567a:	2200      	moveq	r2, #0
 800567c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800567e:	4293      	cmp	r3, r2
 8005680:	d113      	bne.n	80056aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568c:	085b      	lsrs	r3, r3, #1
 800568e:	3b01      	subs	r3, #1
 8005690:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005692:	429a      	cmp	r2, r3
 8005694:	d109      	bne.n	80056aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a0:	085b      	lsrs	r3, r3, #1
 80056a2:	3b01      	subs	r3, #1
 80056a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d06e      	beq.n	8005788 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	2b0c      	cmp	r3, #12
 80056ae:	d069      	beq.n	8005784 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80056b0:	4b53      	ldr	r3, [pc, #332]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d105      	bne.n	80056c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80056bc:	4b50      	ldr	r3, [pc, #320]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e0ad      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80056cc:	4b4c      	ldr	r3, [pc, #304]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a4b      	ldr	r2, [pc, #300]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 80056d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056d8:	f7fd f858 	bl	800278c <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e0:	f7fd f854 	bl	800278c <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e09a      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056f2:	4b43      	ldr	r3, [pc, #268]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056fe:	4b40      	ldr	r3, [pc, #256]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	4b40      	ldr	r3, [pc, #256]	; (8005804 <HAL_RCC_OscConfig+0x784>)
 8005704:	4013      	ands	r3, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800570e:	3a01      	subs	r2, #1
 8005710:	0112      	lsls	r2, r2, #4
 8005712:	4311      	orrs	r1, r2
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005718:	0212      	lsls	r2, r2, #8
 800571a:	4311      	orrs	r1, r2
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005720:	0852      	lsrs	r2, r2, #1
 8005722:	3a01      	subs	r2, #1
 8005724:	0552      	lsls	r2, r2, #21
 8005726:	4311      	orrs	r1, r2
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800572c:	0852      	lsrs	r2, r2, #1
 800572e:	3a01      	subs	r2, #1
 8005730:	0652      	lsls	r2, r2, #25
 8005732:	4311      	orrs	r1, r2
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005738:	0912      	lsrs	r2, r2, #4
 800573a:	0452      	lsls	r2, r2, #17
 800573c:	430a      	orrs	r2, r1
 800573e:	4930      	ldr	r1, [pc, #192]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 8005740:	4313      	orrs	r3, r2
 8005742:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005744:	4b2e      	ldr	r3, [pc, #184]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a2d      	ldr	r2, [pc, #180]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 800574a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800574e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005750:	4b2b      	ldr	r3, [pc, #172]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a2a      	ldr	r2, [pc, #168]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 8005756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800575a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800575c:	f7fd f816 	bl	800278c <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005764:	f7fd f812 	bl	800278c <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e058      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005776:	4b22      	ldr	r3, [pc, #136]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0f0      	beq.n	8005764 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005782:	e050      	b.n	8005826 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e04f      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005788:	4b1d      	ldr	r3, [pc, #116]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d148      	bne.n	8005826 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005794:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a19      	ldr	r2, [pc, #100]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 800579a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800579e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057a0:	4b17      	ldr	r3, [pc, #92]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	4a16      	ldr	r2, [pc, #88]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 80057a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057ac:	f7fc ffee 	bl	800278c <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b4:	f7fc ffea 	bl	800278c <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e030      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057c6:	4b0e      	ldr	r3, [pc, #56]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0f0      	beq.n	80057b4 <HAL_RCC_OscConfig+0x734>
 80057d2:	e028      	b.n	8005826 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	2b0c      	cmp	r3, #12
 80057d8:	d023      	beq.n	8005822 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057da:	4b09      	ldr	r3, [pc, #36]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a08      	ldr	r2, [pc, #32]	; (8005800 <HAL_RCC_OscConfig+0x780>)
 80057e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e6:	f7fc ffd1 	bl	800278c <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057ec:	e00c      	b.n	8005808 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ee:	f7fc ffcd 	bl	800278c <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d905      	bls.n	8005808 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e013      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
 8005800:	40021000 	.word	0x40021000
 8005804:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005808:	4b09      	ldr	r3, [pc, #36]	; (8005830 <HAL_RCC_OscConfig+0x7b0>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1ec      	bne.n	80057ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005814:	4b06      	ldr	r3, [pc, #24]	; (8005830 <HAL_RCC_OscConfig+0x7b0>)
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	4905      	ldr	r1, [pc, #20]	; (8005830 <HAL_RCC_OscConfig+0x7b0>)
 800581a:	4b06      	ldr	r3, [pc, #24]	; (8005834 <HAL_RCC_OscConfig+0x7b4>)
 800581c:	4013      	ands	r3, r2
 800581e:	60cb      	str	r3, [r1, #12]
 8005820:	e001      	b.n	8005826 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3720      	adds	r7, #32
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40021000 	.word	0x40021000
 8005834:	feeefffc 	.word	0xfeeefffc

08005838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e0e7      	b.n	8005a1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800584c:	4b75      	ldr	r3, [pc, #468]	; (8005a24 <HAL_RCC_ClockConfig+0x1ec>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	429a      	cmp	r2, r3
 8005858:	d910      	bls.n	800587c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800585a:	4b72      	ldr	r3, [pc, #456]	; (8005a24 <HAL_RCC_ClockConfig+0x1ec>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f023 0207 	bic.w	r2, r3, #7
 8005862:	4970      	ldr	r1, [pc, #448]	; (8005a24 <HAL_RCC_ClockConfig+0x1ec>)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	4313      	orrs	r3, r2
 8005868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800586a:	4b6e      	ldr	r3, [pc, #440]	; (8005a24 <HAL_RCC_ClockConfig+0x1ec>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d001      	beq.n	800587c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e0cf      	b.n	8005a1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d010      	beq.n	80058aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	4b66      	ldr	r3, [pc, #408]	; (8005a28 <HAL_RCC_ClockConfig+0x1f0>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005894:	429a      	cmp	r2, r3
 8005896:	d908      	bls.n	80058aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005898:	4b63      	ldr	r3, [pc, #396]	; (8005a28 <HAL_RCC_ClockConfig+0x1f0>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	4960      	ldr	r1, [pc, #384]	; (8005a28 <HAL_RCC_ClockConfig+0x1f0>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d04c      	beq.n	8005950 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d107      	bne.n	80058ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058be:	4b5a      	ldr	r3, [pc, #360]	; (8005a28 <HAL_RCC_ClockConfig+0x1f0>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d121      	bne.n	800590e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e0a6      	b.n	8005a1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d107      	bne.n	80058e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058d6:	4b54      	ldr	r3, [pc, #336]	; (8005a28 <HAL_RCC_ClockConfig+0x1f0>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d115      	bne.n	800590e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e09a      	b.n	8005a1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d107      	bne.n	80058fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058ee:	4b4e      	ldr	r3, [pc, #312]	; (8005a28 <HAL_RCC_ClockConfig+0x1f0>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d109      	bne.n	800590e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e08e      	b.n	8005a1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058fe:	4b4a      	ldr	r3, [pc, #296]	; (8005a28 <HAL_RCC_ClockConfig+0x1f0>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e086      	b.n	8005a1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800590e:	4b46      	ldr	r3, [pc, #280]	; (8005a28 <HAL_RCC_ClockConfig+0x1f0>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f023 0203 	bic.w	r2, r3, #3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	4943      	ldr	r1, [pc, #268]	; (8005a28 <HAL_RCC_ClockConfig+0x1f0>)
 800591c:	4313      	orrs	r3, r2
 800591e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005920:	f7fc ff34 	bl	800278c <HAL_GetTick>
 8005924:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005926:	e00a      	b.n	800593e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005928:	f7fc ff30 	bl	800278c <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	f241 3288 	movw	r2, #5000	; 0x1388
 8005936:	4293      	cmp	r3, r2
 8005938:	d901      	bls.n	800593e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e06e      	b.n	8005a1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800593e:	4b3a      	ldr	r3, [pc, #232]	; (8005a28 <HAL_RCC_ClockConfig+0x1f0>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 020c 	and.w	r2, r3, #12
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	429a      	cmp	r2, r3
 800594e:	d1eb      	bne.n	8005928 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d010      	beq.n	800597e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	4b31      	ldr	r3, [pc, #196]	; (8005a28 <HAL_RCC_ClockConfig+0x1f0>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005968:	429a      	cmp	r2, r3
 800596a:	d208      	bcs.n	800597e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800596c:	4b2e      	ldr	r3, [pc, #184]	; (8005a28 <HAL_RCC_ClockConfig+0x1f0>)
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	492b      	ldr	r1, [pc, #172]	; (8005a28 <HAL_RCC_ClockConfig+0x1f0>)
 800597a:	4313      	orrs	r3, r2
 800597c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800597e:	4b29      	ldr	r3, [pc, #164]	; (8005a24 <HAL_RCC_ClockConfig+0x1ec>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	429a      	cmp	r2, r3
 800598a:	d210      	bcs.n	80059ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598c:	4b25      	ldr	r3, [pc, #148]	; (8005a24 <HAL_RCC_ClockConfig+0x1ec>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f023 0207 	bic.w	r2, r3, #7
 8005994:	4923      	ldr	r1, [pc, #140]	; (8005a24 <HAL_RCC_ClockConfig+0x1ec>)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	4313      	orrs	r3, r2
 800599a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800599c:	4b21      	ldr	r3, [pc, #132]	; (8005a24 <HAL_RCC_ClockConfig+0x1ec>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d001      	beq.n	80059ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e036      	b.n	8005a1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0304 	and.w	r3, r3, #4
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d008      	beq.n	80059cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059ba:	4b1b      	ldr	r3, [pc, #108]	; (8005a28 <HAL_RCC_ClockConfig+0x1f0>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	4918      	ldr	r1, [pc, #96]	; (8005a28 <HAL_RCC_ClockConfig+0x1f0>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d009      	beq.n	80059ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059d8:	4b13      	ldr	r3, [pc, #76]	; (8005a28 <HAL_RCC_ClockConfig+0x1f0>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	4910      	ldr	r1, [pc, #64]	; (8005a28 <HAL_RCC_ClockConfig+0x1f0>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059ec:	f000 f824 	bl	8005a38 <HAL_RCC_GetSysClockFreq>
 80059f0:	4602      	mov	r2, r0
 80059f2:	4b0d      	ldr	r3, [pc, #52]	; (8005a28 <HAL_RCC_ClockConfig+0x1f0>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	091b      	lsrs	r3, r3, #4
 80059f8:	f003 030f 	and.w	r3, r3, #15
 80059fc:	490b      	ldr	r1, [pc, #44]	; (8005a2c <HAL_RCC_ClockConfig+0x1f4>)
 80059fe:	5ccb      	ldrb	r3, [r1, r3]
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	fa22 f303 	lsr.w	r3, r2, r3
 8005a08:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <HAL_RCC_ClockConfig+0x1f8>)
 8005a0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a0c:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <HAL_RCC_ClockConfig+0x1fc>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fc fe6b 	bl	80026ec <HAL_InitTick>
 8005a16:	4603      	mov	r3, r0
 8005a18:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a1a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	40022000 	.word	0x40022000
 8005a28:	40021000 	.word	0x40021000
 8005a2c:	0800b5a8 	.word	0x0800b5a8
 8005a30:	20000008 	.word	0x20000008
 8005a34:	2000000c 	.word	0x2000000c

08005a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b089      	sub	sp, #36	; 0x24
 8005a3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	61fb      	str	r3, [r7, #28]
 8005a42:	2300      	movs	r3, #0
 8005a44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a46:	4b3e      	ldr	r3, [pc, #248]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 030c 	and.w	r3, r3, #12
 8005a4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a50:	4b3b      	ldr	r3, [pc, #236]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <HAL_RCC_GetSysClockFreq+0x34>
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	2b0c      	cmp	r3, #12
 8005a64:	d121      	bne.n	8005aaa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d11e      	bne.n	8005aaa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a6c:	4b34      	ldr	r3, [pc, #208]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d107      	bne.n	8005a88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a78:	4b31      	ldr	r3, [pc, #196]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a7e:	0a1b      	lsrs	r3, r3, #8
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	61fb      	str	r3, [r7, #28]
 8005a86:	e005      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a88:	4b2d      	ldr	r3, [pc, #180]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	091b      	lsrs	r3, r3, #4
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a94:	4a2b      	ldr	r2, [pc, #172]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10d      	bne.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005aa8:	e00a      	b.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d102      	bne.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ab0:	4b25      	ldr	r3, [pc, #148]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ab2:	61bb      	str	r3, [r7, #24]
 8005ab4:	e004      	b.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d101      	bne.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005abc:	4b23      	ldr	r3, [pc, #140]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x114>)
 8005abe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	2b0c      	cmp	r3, #12
 8005ac4:	d134      	bne.n	8005b30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ac6:	4b1e      	ldr	r3, [pc, #120]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d003      	beq.n	8005ade <HAL_RCC_GetSysClockFreq+0xa6>
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d003      	beq.n	8005ae4 <HAL_RCC_GetSysClockFreq+0xac>
 8005adc:	e005      	b.n	8005aea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005ade:	4b1a      	ldr	r3, [pc, #104]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ae0:	617b      	str	r3, [r7, #20]
      break;
 8005ae2:	e005      	b.n	8005af0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ae4:	4b19      	ldr	r3, [pc, #100]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x114>)
 8005ae6:	617b      	str	r3, [r7, #20]
      break;
 8005ae8:	e002      	b.n	8005af0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	617b      	str	r3, [r7, #20]
      break;
 8005aee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005af0:	4b13      	ldr	r3, [pc, #76]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	091b      	lsrs	r3, r3, #4
 8005af6:	f003 0307 	and.w	r3, r3, #7
 8005afa:	3301      	adds	r3, #1
 8005afc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005afe:	4b10      	ldr	r3, [pc, #64]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	0a1b      	lsrs	r3, r3, #8
 8005b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	fb03 f202 	mul.w	r2, r3, r2
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b16:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	0e5b      	lsrs	r3, r3, #25
 8005b1c:	f003 0303 	and.w	r3, r3, #3
 8005b20:	3301      	adds	r3, #1
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b30:	69bb      	ldr	r3, [r7, #24]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3724      	adds	r7, #36	; 0x24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40021000 	.word	0x40021000
 8005b44:	0800b5c0 	.word	0x0800b5c0
 8005b48:	00f42400 	.word	0x00f42400
 8005b4c:	007a1200 	.word	0x007a1200

08005b50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b54:	4b03      	ldr	r3, [pc, #12]	; (8005b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b56:	681b      	ldr	r3, [r3, #0]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	20000008 	.word	0x20000008

08005b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b6c:	f7ff fff0 	bl	8005b50 <HAL_RCC_GetHCLKFreq>
 8005b70:	4602      	mov	r2, r0
 8005b72:	4b06      	ldr	r3, [pc, #24]	; (8005b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	0a1b      	lsrs	r3, r3, #8
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	4904      	ldr	r1, [pc, #16]	; (8005b90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b7e:	5ccb      	ldrb	r3, [r1, r3]
 8005b80:	f003 031f 	and.w	r3, r3, #31
 8005b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	0800b5b8 	.word	0x0800b5b8

08005b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b98:	f7ff ffda 	bl	8005b50 <HAL_RCC_GetHCLKFreq>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	4b06      	ldr	r3, [pc, #24]	; (8005bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	0adb      	lsrs	r3, r3, #11
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	4904      	ldr	r1, [pc, #16]	; (8005bbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005baa:	5ccb      	ldrb	r3, [r1, r3]
 8005bac:	f003 031f 	and.w	r3, r3, #31
 8005bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	0800b5b8 	.word	0x0800b5b8

08005bc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005bc8:	2300      	movs	r3, #0
 8005bca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005bcc:	4b2a      	ldr	r3, [pc, #168]	; (8005c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005bd8:	f7ff f9c2 	bl	8004f60 <HAL_PWREx_GetVoltageRange>
 8005bdc:	6178      	str	r0, [r7, #20]
 8005bde:	e014      	b.n	8005c0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005be0:	4b25      	ldr	r3, [pc, #148]	; (8005c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be4:	4a24      	ldr	r2, [pc, #144]	; (8005c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bea:	6593      	str	r3, [r2, #88]	; 0x58
 8005bec:	4b22      	ldr	r3, [pc, #136]	; (8005c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005bf8:	f7ff f9b2 	bl	8004f60 <HAL_PWREx_GetVoltageRange>
 8005bfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005bfe:	4b1e      	ldr	r3, [pc, #120]	; (8005c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c02:	4a1d      	ldr	r2, [pc, #116]	; (8005c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c10:	d10b      	bne.n	8005c2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b80      	cmp	r3, #128	; 0x80
 8005c16:	d919      	bls.n	8005c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2ba0      	cmp	r3, #160	; 0xa0
 8005c1c:	d902      	bls.n	8005c24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c1e:	2302      	movs	r3, #2
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	e013      	b.n	8005c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c24:	2301      	movs	r3, #1
 8005c26:	613b      	str	r3, [r7, #16]
 8005c28:	e010      	b.n	8005c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b80      	cmp	r3, #128	; 0x80
 8005c2e:	d902      	bls.n	8005c36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c30:	2303      	movs	r3, #3
 8005c32:	613b      	str	r3, [r7, #16]
 8005c34:	e00a      	b.n	8005c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b80      	cmp	r3, #128	; 0x80
 8005c3a:	d102      	bne.n	8005c42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	e004      	b.n	8005c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b70      	cmp	r3, #112	; 0x70
 8005c46:	d101      	bne.n	8005c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c48:	2301      	movs	r3, #1
 8005c4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f023 0207 	bic.w	r2, r3, #7
 8005c54:	4909      	ldr	r1, [pc, #36]	; (8005c7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c5c:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d001      	beq.n	8005c6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	40022000 	.word	0x40022000

08005c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c88:	2300      	movs	r3, #0
 8005c8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d041      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ca0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ca4:	d02a      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005ca6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005caa:	d824      	bhi.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005cac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cb0:	d008      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005cb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cb6:	d81e      	bhi.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00a      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cc0:	d010      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cc2:	e018      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005cc4:	4b86      	ldr	r3, [pc, #536]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	4a85      	ldr	r2, [pc, #532]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cd0:	e015      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fabb 	bl	8006254 <RCCEx_PLLSAI1_Config>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ce2:	e00c      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3320      	adds	r3, #32
 8005ce8:	2100      	movs	r1, #0
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fba6 	bl	800643c <RCCEx_PLLSAI2_Config>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cf4:	e003      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	74fb      	strb	r3, [r7, #19]
      break;
 8005cfa:	e000      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cfe:	7cfb      	ldrb	r3, [r7, #19]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10b      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d04:	4b76      	ldr	r3, [pc, #472]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d12:	4973      	ldr	r1, [pc, #460]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d1a:	e001      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1c:	7cfb      	ldrb	r3, [r7, #19]
 8005d1e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d041      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d34:	d02a      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005d36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d3a:	d824      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d40:	d008      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d46:	d81e      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d50:	d010      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d52:	e018      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d54:	4b62      	ldr	r3, [pc, #392]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	4a61      	ldr	r2, [pc, #388]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d60:	e015      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	3304      	adds	r3, #4
 8005d66:	2100      	movs	r1, #0
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 fa73 	bl	8006254 <RCCEx_PLLSAI1_Config>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d72:	e00c      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3320      	adds	r3, #32
 8005d78:	2100      	movs	r1, #0
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fb5e 	bl	800643c <RCCEx_PLLSAI2_Config>
 8005d80:	4603      	mov	r3, r0
 8005d82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d84:	e003      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	74fb      	strb	r3, [r7, #19]
      break;
 8005d8a:	e000      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d8e:	7cfb      	ldrb	r3, [r7, #19]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10b      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d94:	4b52      	ldr	r3, [pc, #328]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005da2:	494f      	ldr	r1, [pc, #316]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005daa:	e001      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dac:	7cfb      	ldrb	r3, [r7, #19]
 8005dae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80a0 	beq.w	8005efe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005dc2:	4b47      	ldr	r3, [pc, #284]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e000      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00d      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dd8:	4b41      	ldr	r3, [pc, #260]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ddc:	4a40      	ldr	r2, [pc, #256]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005de2:	6593      	str	r3, [r2, #88]	; 0x58
 8005de4:	4b3e      	ldr	r3, [pc, #248]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dec:	60bb      	str	r3, [r7, #8]
 8005dee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005df0:	2301      	movs	r3, #1
 8005df2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005df4:	4b3b      	ldr	r3, [pc, #236]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a3a      	ldr	r2, [pc, #232]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e00:	f7fc fcc4 	bl	800278c <HAL_GetTick>
 8005e04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e06:	e009      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e08:	f7fc fcc0 	bl	800278c <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d902      	bls.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	74fb      	strb	r3, [r7, #19]
        break;
 8005e1a:	e005      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e1c:	4b31      	ldr	r3, [pc, #196]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d0ef      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005e28:	7cfb      	ldrb	r3, [r7, #19]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d15c      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e2e:	4b2c      	ldr	r3, [pc, #176]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01f      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d019      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e4c:	4b24      	ldr	r3, [pc, #144]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e58:	4b21      	ldr	r3, [pc, #132]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5e:	4a20      	ldr	r2, [pc, #128]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e68:	4b1d      	ldr	r3, [pc, #116]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6e:	4a1c      	ldr	r2, [pc, #112]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e78:	4a19      	ldr	r2, [pc, #100]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d016      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8a:	f7fc fc7f 	bl	800278c <HAL_GetTick>
 8005e8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e90:	e00b      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e92:	f7fc fc7b 	bl	800278c <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d902      	bls.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	74fb      	strb	r3, [r7, #19]
            break;
 8005ea8:	e006      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eaa:	4b0d      	ldr	r3, [pc, #52]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0ec      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005eb8:	7cfb      	ldrb	r3, [r7, #19]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10c      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ebe:	4b08      	ldr	r3, [pc, #32]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ece:	4904      	ldr	r1, [pc, #16]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ed6:	e009      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ed8:	7cfb      	ldrb	r3, [r7, #19]
 8005eda:	74bb      	strb	r3, [r7, #18]
 8005edc:	e006      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005ede:	bf00      	nop
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee8:	7cfb      	ldrb	r3, [r7, #19]
 8005eea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005eec:	7c7b      	ldrb	r3, [r7, #17]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d105      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ef2:	4b9e      	ldr	r3, [pc, #632]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef6:	4a9d      	ldr	r2, [pc, #628]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005efc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f0a:	4b98      	ldr	r3, [pc, #608]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f10:	f023 0203 	bic.w	r2, r3, #3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	4994      	ldr	r1, [pc, #592]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f2c:	4b8f      	ldr	r3, [pc, #572]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f32:	f023 020c 	bic.w	r2, r3, #12
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3a:	498c      	ldr	r1, [pc, #560]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f4e:	4b87      	ldr	r3, [pc, #540]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	4983      	ldr	r1, [pc, #524]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0308 	and.w	r3, r3, #8
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00a      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f70:	4b7e      	ldr	r3, [pc, #504]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7e:	497b      	ldr	r1, [pc, #492]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0310 	and.w	r3, r3, #16
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f92:	4b76      	ldr	r3, [pc, #472]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa0:	4972      	ldr	r1, [pc, #456]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00a      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fb4:	4b6d      	ldr	r3, [pc, #436]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc2:	496a      	ldr	r1, [pc, #424]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fd6:	4b65      	ldr	r3, [pc, #404]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe4:	4961      	ldr	r1, [pc, #388]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00a      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ff8:	4b5c      	ldr	r3, [pc, #368]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006006:	4959      	ldr	r1, [pc, #356]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006008:	4313      	orrs	r3, r2
 800600a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800601a:	4b54      	ldr	r3, [pc, #336]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800601c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006020:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006028:	4950      	ldr	r1, [pc, #320]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800602a:	4313      	orrs	r3, r2
 800602c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800603c:	4b4b      	ldr	r3, [pc, #300]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800603e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006042:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604a:	4948      	ldr	r1, [pc, #288]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800604c:	4313      	orrs	r3, r2
 800604e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800605e:	4b43      	ldr	r3, [pc, #268]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006064:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606c:	493f      	ldr	r1, [pc, #252]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800606e:	4313      	orrs	r3, r2
 8006070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d028      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006080:	4b3a      	ldr	r3, [pc, #232]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006086:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800608e:	4937      	ldr	r1, [pc, #220]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006090:	4313      	orrs	r3, r2
 8006092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800609a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800609e:	d106      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060a0:	4b32      	ldr	r3, [pc, #200]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	4a31      	ldr	r2, [pc, #196]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060aa:	60d3      	str	r3, [r2, #12]
 80060ac:	e011      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060b6:	d10c      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	3304      	adds	r3, #4
 80060bc:	2101      	movs	r1, #1
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 f8c8 	bl	8006254 <RCCEx_PLLSAI1_Config>
 80060c4:	4603      	mov	r3, r0
 80060c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80060c8:	7cfb      	ldrb	r3, [r7, #19]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80060ce:	7cfb      	ldrb	r3, [r7, #19]
 80060d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d028      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060de:	4b23      	ldr	r3, [pc, #140]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	491f      	ldr	r1, [pc, #124]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060fc:	d106      	bne.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060fe:	4b1b      	ldr	r3, [pc, #108]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	4a1a      	ldr	r2, [pc, #104]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006104:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006108:	60d3      	str	r3, [r2, #12]
 800610a:	e011      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006110:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006114:	d10c      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	3304      	adds	r3, #4
 800611a:	2101      	movs	r1, #1
 800611c:	4618      	mov	r0, r3
 800611e:	f000 f899 	bl	8006254 <RCCEx_PLLSAI1_Config>
 8006122:	4603      	mov	r3, r0
 8006124:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006126:	7cfb      	ldrb	r3, [r7, #19]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800612c:	7cfb      	ldrb	r3, [r7, #19]
 800612e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d02b      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800613c:	4b0b      	ldr	r3, [pc, #44]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800613e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006142:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800614a:	4908      	ldr	r1, [pc, #32]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800614c:	4313      	orrs	r3, r2
 800614e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800615a:	d109      	bne.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800615c:	4b03      	ldr	r3, [pc, #12]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	4a02      	ldr	r2, [pc, #8]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006166:	60d3      	str	r3, [r2, #12]
 8006168:	e014      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800616a:	bf00      	nop
 800616c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006178:	d10c      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3304      	adds	r3, #4
 800617e:	2101      	movs	r1, #1
 8006180:	4618      	mov	r0, r3
 8006182:	f000 f867 	bl	8006254 <RCCEx_PLLSAI1_Config>
 8006186:	4603      	mov	r3, r0
 8006188:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800618a:	7cfb      	ldrb	r3, [r7, #19]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006190:	7cfb      	ldrb	r3, [r7, #19]
 8006192:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d02f      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061a0:	4b2b      	ldr	r3, [pc, #172]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ae:	4928      	ldr	r1, [pc, #160]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061be:	d10d      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3304      	adds	r3, #4
 80061c4:	2102      	movs	r1, #2
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 f844 	bl	8006254 <RCCEx_PLLSAI1_Config>
 80061cc:	4603      	mov	r3, r0
 80061ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061d0:	7cfb      	ldrb	r3, [r7, #19]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d014      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80061d6:	7cfb      	ldrb	r3, [r7, #19]
 80061d8:	74bb      	strb	r3, [r7, #18]
 80061da:	e011      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061e4:	d10c      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3320      	adds	r3, #32
 80061ea:	2102      	movs	r1, #2
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 f925 	bl	800643c <RCCEx_PLLSAI2_Config>
 80061f2:	4603      	mov	r3, r0
 80061f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061f6:	7cfb      	ldrb	r3, [r7, #19]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80061fc:	7cfb      	ldrb	r3, [r7, #19]
 80061fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00a      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800620c:	4b10      	ldr	r3, [pc, #64]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800620e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006212:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800621a:	490d      	ldr	r1, [pc, #52]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800621c:	4313      	orrs	r3, r2
 800621e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800622e:	4b08      	ldr	r3, [pc, #32]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006234:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800623e:	4904      	ldr	r1, [pc, #16]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006246:	7cbb      	ldrb	r3, [r7, #18]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	40021000 	.word	0x40021000

08006254 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006262:	4b75      	ldr	r3, [pc, #468]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d018      	beq.n	80062a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800626e:	4b72      	ldr	r3, [pc, #456]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f003 0203 	and.w	r2, r3, #3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	429a      	cmp	r2, r3
 800627c:	d10d      	bne.n	800629a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
       ||
 8006282:	2b00      	cmp	r3, #0
 8006284:	d009      	beq.n	800629a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006286:	4b6c      	ldr	r3, [pc, #432]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	091b      	lsrs	r3, r3, #4
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
       ||
 8006296:	429a      	cmp	r2, r3
 8006298:	d047      	beq.n	800632a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	73fb      	strb	r3, [r7, #15]
 800629e:	e044      	b.n	800632a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b03      	cmp	r3, #3
 80062a6:	d018      	beq.n	80062da <RCCEx_PLLSAI1_Config+0x86>
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d825      	bhi.n	80062f8 <RCCEx_PLLSAI1_Config+0xa4>
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d002      	beq.n	80062b6 <RCCEx_PLLSAI1_Config+0x62>
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d009      	beq.n	80062c8 <RCCEx_PLLSAI1_Config+0x74>
 80062b4:	e020      	b.n	80062f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062b6:	4b60      	ldr	r3, [pc, #384]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d11d      	bne.n	80062fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062c6:	e01a      	b.n	80062fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062c8:	4b5b      	ldr	r3, [pc, #364]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d116      	bne.n	8006302 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062d8:	e013      	b.n	8006302 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062da:	4b57      	ldr	r3, [pc, #348]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10f      	bne.n	8006306 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062e6:	4b54      	ldr	r3, [pc, #336]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d109      	bne.n	8006306 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062f6:	e006      	b.n	8006306 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	73fb      	strb	r3, [r7, #15]
      break;
 80062fc:	e004      	b.n	8006308 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062fe:	bf00      	nop
 8006300:	e002      	b.n	8006308 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006302:	bf00      	nop
 8006304:	e000      	b.n	8006308 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006306:	bf00      	nop
    }

    if(status == HAL_OK)
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10d      	bne.n	800632a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800630e:	4b4a      	ldr	r3, [pc, #296]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6819      	ldr	r1, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	3b01      	subs	r3, #1
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	430b      	orrs	r3, r1
 8006324:	4944      	ldr	r1, [pc, #272]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006326:	4313      	orrs	r3, r2
 8006328:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d17d      	bne.n	800642c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006330:	4b41      	ldr	r3, [pc, #260]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a40      	ldr	r2, [pc, #256]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006336:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800633a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800633c:	f7fc fa26 	bl	800278c <HAL_GetTick>
 8006340:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006342:	e009      	b.n	8006358 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006344:	f7fc fa22 	bl	800278c <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d902      	bls.n	8006358 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	73fb      	strb	r3, [r7, #15]
        break;
 8006356:	e005      	b.n	8006364 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006358:	4b37      	ldr	r3, [pc, #220]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1ef      	bne.n	8006344 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d160      	bne.n	800642c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d111      	bne.n	8006394 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006370:	4b31      	ldr	r3, [pc, #196]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6892      	ldr	r2, [r2, #8]
 8006380:	0211      	lsls	r1, r2, #8
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	68d2      	ldr	r2, [r2, #12]
 8006386:	0912      	lsrs	r2, r2, #4
 8006388:	0452      	lsls	r2, r2, #17
 800638a:	430a      	orrs	r2, r1
 800638c:	492a      	ldr	r1, [pc, #168]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800638e:	4313      	orrs	r3, r2
 8006390:	610b      	str	r3, [r1, #16]
 8006392:	e027      	b.n	80063e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d112      	bne.n	80063c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800639a:	4b27      	ldr	r3, [pc, #156]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80063a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6892      	ldr	r2, [r2, #8]
 80063aa:	0211      	lsls	r1, r2, #8
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	6912      	ldr	r2, [r2, #16]
 80063b0:	0852      	lsrs	r2, r2, #1
 80063b2:	3a01      	subs	r2, #1
 80063b4:	0552      	lsls	r2, r2, #21
 80063b6:	430a      	orrs	r2, r1
 80063b8:	491f      	ldr	r1, [pc, #124]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	610b      	str	r3, [r1, #16]
 80063be:	e011      	b.n	80063e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063c0:	4b1d      	ldr	r3, [pc, #116]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80063c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6892      	ldr	r2, [r2, #8]
 80063d0:	0211      	lsls	r1, r2, #8
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6952      	ldr	r2, [r2, #20]
 80063d6:	0852      	lsrs	r2, r2, #1
 80063d8:	3a01      	subs	r2, #1
 80063da:	0652      	lsls	r2, r2, #25
 80063dc:	430a      	orrs	r2, r1
 80063de:	4916      	ldr	r1, [pc, #88]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80063e4:	4b14      	ldr	r3, [pc, #80]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a13      	ldr	r2, [pc, #76]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f0:	f7fc f9cc 	bl	800278c <HAL_GetTick>
 80063f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063f6:	e009      	b.n	800640c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063f8:	f7fc f9c8 	bl	800278c <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d902      	bls.n	800640c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	73fb      	strb	r3, [r7, #15]
          break;
 800640a:	e005      	b.n	8006418 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800640c:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0ef      	beq.n	80063f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d106      	bne.n	800642c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800641e:	4b06      	ldr	r3, [pc, #24]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006420:	691a      	ldr	r2, [r3, #16]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	4904      	ldr	r1, [pc, #16]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006428:	4313      	orrs	r3, r2
 800642a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800642c:	7bfb      	ldrb	r3, [r7, #15]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40021000 	.word	0x40021000

0800643c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800644a:	4b6a      	ldr	r3, [pc, #424]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d018      	beq.n	8006488 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006456:	4b67      	ldr	r3, [pc, #412]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f003 0203 	and.w	r2, r3, #3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d10d      	bne.n	8006482 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
       ||
 800646a:	2b00      	cmp	r3, #0
 800646c:	d009      	beq.n	8006482 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800646e:	4b61      	ldr	r3, [pc, #388]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	091b      	lsrs	r3, r3, #4
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	1c5a      	adds	r2, r3, #1
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
       ||
 800647e:	429a      	cmp	r2, r3
 8006480:	d047      	beq.n	8006512 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	73fb      	strb	r3, [r7, #15]
 8006486:	e044      	b.n	8006512 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b03      	cmp	r3, #3
 800648e:	d018      	beq.n	80064c2 <RCCEx_PLLSAI2_Config+0x86>
 8006490:	2b03      	cmp	r3, #3
 8006492:	d825      	bhi.n	80064e0 <RCCEx_PLLSAI2_Config+0xa4>
 8006494:	2b01      	cmp	r3, #1
 8006496:	d002      	beq.n	800649e <RCCEx_PLLSAI2_Config+0x62>
 8006498:	2b02      	cmp	r3, #2
 800649a:	d009      	beq.n	80064b0 <RCCEx_PLLSAI2_Config+0x74>
 800649c:	e020      	b.n	80064e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800649e:	4b55      	ldr	r3, [pc, #340]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d11d      	bne.n	80064e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064ae:	e01a      	b.n	80064e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064b0:	4b50      	ldr	r3, [pc, #320]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d116      	bne.n	80064ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064c0:	e013      	b.n	80064ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064c2:	4b4c      	ldr	r3, [pc, #304]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10f      	bne.n	80064ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064ce:	4b49      	ldr	r3, [pc, #292]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d109      	bne.n	80064ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064de:	e006      	b.n	80064ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	73fb      	strb	r3, [r7, #15]
      break;
 80064e4:	e004      	b.n	80064f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064e6:	bf00      	nop
 80064e8:	e002      	b.n	80064f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064ea:	bf00      	nop
 80064ec:	e000      	b.n	80064f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10d      	bne.n	8006512 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80064f6:	4b3f      	ldr	r3, [pc, #252]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6819      	ldr	r1, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	3b01      	subs	r3, #1
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	430b      	orrs	r3, r1
 800650c:	4939      	ldr	r1, [pc, #228]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800650e:	4313      	orrs	r3, r2
 8006510:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006512:	7bfb      	ldrb	r3, [r7, #15]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d167      	bne.n	80065e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006518:	4b36      	ldr	r3, [pc, #216]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a35      	ldr	r2, [pc, #212]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800651e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006524:	f7fc f932 	bl	800278c <HAL_GetTick>
 8006528:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800652a:	e009      	b.n	8006540 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800652c:	f7fc f92e 	bl	800278c <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d902      	bls.n	8006540 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	73fb      	strb	r3, [r7, #15]
        break;
 800653e:	e005      	b.n	800654c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006540:	4b2c      	ldr	r3, [pc, #176]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1ef      	bne.n	800652c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800654c:	7bfb      	ldrb	r3, [r7, #15]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d14a      	bne.n	80065e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d111      	bne.n	800657c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006558:	4b26      	ldr	r3, [pc, #152]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6892      	ldr	r2, [r2, #8]
 8006568:	0211      	lsls	r1, r2, #8
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	68d2      	ldr	r2, [r2, #12]
 800656e:	0912      	lsrs	r2, r2, #4
 8006570:	0452      	lsls	r2, r2, #17
 8006572:	430a      	orrs	r2, r1
 8006574:	491f      	ldr	r1, [pc, #124]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006576:	4313      	orrs	r3, r2
 8006578:	614b      	str	r3, [r1, #20]
 800657a:	e011      	b.n	80065a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800657c:	4b1d      	ldr	r3, [pc, #116]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006584:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6892      	ldr	r2, [r2, #8]
 800658c:	0211      	lsls	r1, r2, #8
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6912      	ldr	r2, [r2, #16]
 8006592:	0852      	lsrs	r2, r2, #1
 8006594:	3a01      	subs	r2, #1
 8006596:	0652      	lsls	r2, r2, #25
 8006598:	430a      	orrs	r2, r1
 800659a:	4916      	ldr	r1, [pc, #88]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800659c:	4313      	orrs	r3, r2
 800659e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80065a0:	4b14      	ldr	r3, [pc, #80]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a13      	ldr	r2, [pc, #76]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ac:	f7fc f8ee 	bl	800278c <HAL_GetTick>
 80065b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065b2:	e009      	b.n	80065c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80065b4:	f7fc f8ea 	bl	800278c <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d902      	bls.n	80065c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	73fb      	strb	r3, [r7, #15]
          break;
 80065c6:	e005      	b.n	80065d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065c8:	4b0a      	ldr	r3, [pc, #40]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0ef      	beq.n	80065b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d106      	bne.n	80065e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80065da:	4b06      	ldr	r3, [pc, #24]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065dc:	695a      	ldr	r2, [r3, #20]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	4904      	ldr	r1, [pc, #16]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	40021000 	.word	0x40021000

080065f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d079      	beq.n	80066fe <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d106      	bne.n	8006624 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7fb fce8 	bl	8001ff4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f003 0310 	and.w	r3, r3, #16
 8006636:	2b10      	cmp	r3, #16
 8006638:	d058      	beq.n	80066ec <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	22ca      	movs	r2, #202	; 0xca
 8006640:	625a      	str	r2, [r3, #36]	; 0x24
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2253      	movs	r2, #83	; 0x53
 8006648:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f880 	bl	8006750 <RTC_EnterInitMode>
 8006650:	4603      	mov	r3, r0
 8006652:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d127      	bne.n	80066aa <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6812      	ldr	r2, [r2, #0]
 8006664:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800666c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6899      	ldr	r1, [r3, #8]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	431a      	orrs	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	431a      	orrs	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	68d2      	ldr	r2, [r2, #12]
 8006694:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6919      	ldr	r1, [r3, #16]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	041a      	lsls	r2, r3, #16
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f884 	bl	80067b8 <RTC_ExitInitMode>
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d113      	bne.n	80066e2 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0203 	bic.w	r2, r2, #3
 80066c8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	69da      	ldr	r2, [r3, #28]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	431a      	orrs	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	22ff      	movs	r2, #255	; 0xff
 80066e8:	625a      	str	r2, [r3, #36]	; 0x24
 80066ea:	e001      	b.n	80066f0 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d103      	bne.n	80066fe <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a0d      	ldr	r2, [pc, #52]	; (800674c <HAL_RTC_WaitForSynchro+0x44>)
 8006716:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006718:	f7fc f838 	bl	800278c <HAL_GetTick>
 800671c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800671e:	e009      	b.n	8006734 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006720:	f7fc f834 	bl	800278c <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800672e:	d901      	bls.n	8006734 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e007      	b.n	8006744 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f003 0320 	and.w	r3, r3, #32
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0ee      	beq.n	8006720 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	0003ff5f 	.word	0x0003ff5f

08006750 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	d120      	bne.n	80067ac <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f04f 32ff 	mov.w	r2, #4294967295
 8006772:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006774:	f7fc f80a 	bl	800278c <HAL_GetTick>
 8006778:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800677a:	e00d      	b.n	8006798 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800677c:	f7fc f806 	bl	800278c <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800678a:	d905      	bls.n	8006798 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2203      	movs	r2, #3
 8006794:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d102      	bne.n	80067ac <RTC_EnterInitMode+0x5c>
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d1e7      	bne.n	800677c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
	...

080067b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80067c4:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <RTC_ExitInitMode+0x78>)
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	4a19      	ldr	r2, [pc, #100]	; (8006830 <RTC_ExitInitMode+0x78>)
 80067ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ce:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80067d0:	4b17      	ldr	r3, [pc, #92]	; (8006830 <RTC_ExitInitMode+0x78>)
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f003 0320 	and.w	r3, r3, #32
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10c      	bne.n	80067f6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7ff ff93 	bl	8006708 <HAL_RTC_WaitForSynchro>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01e      	beq.n	8006826 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2203      	movs	r2, #3
 80067ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	73fb      	strb	r3, [r7, #15]
 80067f4:	e017      	b.n	8006826 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80067f6:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <RTC_ExitInitMode+0x78>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	4a0d      	ldr	r2, [pc, #52]	; (8006830 <RTC_ExitInitMode+0x78>)
 80067fc:	f023 0320 	bic.w	r3, r3, #32
 8006800:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7ff ff80 	bl	8006708 <HAL_RTC_WaitForSynchro>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d005      	beq.n	800681a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2203      	movs	r2, #3
 8006812:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800681a:	4b05      	ldr	r3, [pc, #20]	; (8006830 <RTC_ExitInitMode+0x78>)
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	4a04      	ldr	r2, [pc, #16]	; (8006830 <RTC_ExitInitMode+0x78>)
 8006820:	f043 0320 	orr.w	r3, r3, #32
 8006824:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006826:	7bfb      	ldrb	r3, [r7, #15]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40002800 	.word	0x40002800

08006834 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800684a:	2302      	movs	r3, #2
 800684c:	e07f      	b.n	800694e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	22ca      	movs	r2, #202	; 0xca
 8006864:	625a      	str	r2, [r3, #36]	; 0x24
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2253      	movs	r2, #83	; 0x53
 800686c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800687c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	b2da      	uxtb	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800688e:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	d120      	bne.n	80068e0 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 800689e:	f7fb ff75 	bl	800278c <HAL_GetTick>
 80068a2:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80068a4:	e015      	b.n	80068d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068a6:	f7fb ff71 	bl	800278c <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068b4:	d90d      	bls.n	80068d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	22ff      	movs	r2, #255	; 0xff
 80068bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2203      	movs	r2, #3
 80068c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e03d      	b.n	800694e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f003 0304 	and.w	r3, r3, #4
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0e2      	beq.n	80068a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f023 0107 	bic.w	r1, r3, #7
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80068fc:	4b16      	ldr	r3, [pc, #88]	; (8006958 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a15      	ldr	r2, [pc, #84]	; (8006958 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8006902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006906:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006908:	4b13      	ldr	r3, [pc, #76]	; (8006958 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	4a12      	ldr	r2, [pc, #72]	; (8006958 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800690e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006912:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689a      	ldr	r2, [r3, #8]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006922:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689a      	ldr	r2, [r3, #8]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006932:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	22ff      	movs	r2, #255	; 0xff
 800693a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	40010400 	.word	0x40010400

0800695c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 3020 	ldrb.w	r3, [r3, #32]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d101      	bne.n	8006972 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800696e:	2302      	movs	r3, #2
 8006970:	e04d      	b.n	8006a0e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2202      	movs	r2, #2
 800697e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	22ca      	movs	r2, #202	; 0xca
 8006988:	625a      	str	r2, [r3, #36]	; 0x24
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2253      	movs	r2, #83	; 0x53
 8006990:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069a0:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069b0:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80069b2:	f7fb feeb 	bl	800278c <HAL_GetTick>
 80069b6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80069b8:	e015      	b.n	80069e6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069ba:	f7fb fee7 	bl	800278c <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069c8:	d90d      	bls.n	80069e6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	22ff      	movs	r2, #255	; 0xff
 80069d0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2203      	movs	r2, #3
 80069d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e013      	b.n	8006a0e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0e2      	beq.n	80069ba <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	22ff      	movs	r2, #255	; 0xff
 80069fa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
	...

08006a18 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006a20:	4b0f      	ldr	r3, [pc, #60]	; (8006a60 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8006a22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a26:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00b      	beq.n	8006a4e <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006a46:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f80b 	bl	8006a64 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8006a56:	bf00      	nop
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	40010400 	.word	0x40010400

08006a64 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e049      	b.n	8006b1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fb fae2 	bl	8002068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	f000 f968 	bl	8006d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d001      	beq.n	8006b40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e047      	b.n	8006bd0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a23      	ldr	r2, [pc, #140]	; (8006bdc <HAL_TIM_Base_Start+0xb4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d01d      	beq.n	8006b8e <HAL_TIM_Base_Start+0x66>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5a:	d018      	beq.n	8006b8e <HAL_TIM_Base_Start+0x66>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a1f      	ldr	r2, [pc, #124]	; (8006be0 <HAL_TIM_Base_Start+0xb8>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d013      	beq.n	8006b8e <HAL_TIM_Base_Start+0x66>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a1e      	ldr	r2, [pc, #120]	; (8006be4 <HAL_TIM_Base_Start+0xbc>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d00e      	beq.n	8006b8e <HAL_TIM_Base_Start+0x66>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a1c      	ldr	r2, [pc, #112]	; (8006be8 <HAL_TIM_Base_Start+0xc0>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d009      	beq.n	8006b8e <HAL_TIM_Base_Start+0x66>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a1b      	ldr	r2, [pc, #108]	; (8006bec <HAL_TIM_Base_Start+0xc4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d004      	beq.n	8006b8e <HAL_TIM_Base_Start+0x66>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a19      	ldr	r2, [pc, #100]	; (8006bf0 <HAL_TIM_Base_Start+0xc8>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d115      	bne.n	8006bba <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	4b17      	ldr	r3, [pc, #92]	; (8006bf4 <HAL_TIM_Base_Start+0xcc>)
 8006b96:	4013      	ands	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2b06      	cmp	r3, #6
 8006b9e:	d015      	beq.n	8006bcc <HAL_TIM_Base_Start+0xa4>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ba6:	d011      	beq.n	8006bcc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f042 0201 	orr.w	r2, r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bb8:	e008      	b.n	8006bcc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f042 0201 	orr.w	r2, r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]
 8006bca:	e000      	b.n	8006bce <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bcc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	40012c00 	.word	0x40012c00
 8006be0:	40000400 	.word	0x40000400
 8006be4:	40000800 	.word	0x40000800
 8006be8:	40000c00 	.word	0x40000c00
 8006bec:	40013400 	.word	0x40013400
 8006bf0:	40014000 	.word	0x40014000
 8006bf4:	00010007 	.word	0x00010007

08006bf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d101      	bne.n	8006c14 <HAL_TIM_ConfigClockSource+0x1c>
 8006c10:	2302      	movs	r3, #2
 8006c12:	e0b6      	b.n	8006d82 <HAL_TIM_ConfigClockSource+0x18a>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c50:	d03e      	beq.n	8006cd0 <HAL_TIM_ConfigClockSource+0xd8>
 8006c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c56:	f200 8087 	bhi.w	8006d68 <HAL_TIM_ConfigClockSource+0x170>
 8006c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5e:	f000 8086 	beq.w	8006d6e <HAL_TIM_ConfigClockSource+0x176>
 8006c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c66:	d87f      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x170>
 8006c68:	2b70      	cmp	r3, #112	; 0x70
 8006c6a:	d01a      	beq.n	8006ca2 <HAL_TIM_ConfigClockSource+0xaa>
 8006c6c:	2b70      	cmp	r3, #112	; 0x70
 8006c6e:	d87b      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x170>
 8006c70:	2b60      	cmp	r3, #96	; 0x60
 8006c72:	d050      	beq.n	8006d16 <HAL_TIM_ConfigClockSource+0x11e>
 8006c74:	2b60      	cmp	r3, #96	; 0x60
 8006c76:	d877      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x170>
 8006c78:	2b50      	cmp	r3, #80	; 0x50
 8006c7a:	d03c      	beq.n	8006cf6 <HAL_TIM_ConfigClockSource+0xfe>
 8006c7c:	2b50      	cmp	r3, #80	; 0x50
 8006c7e:	d873      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x170>
 8006c80:	2b40      	cmp	r3, #64	; 0x40
 8006c82:	d058      	beq.n	8006d36 <HAL_TIM_ConfigClockSource+0x13e>
 8006c84:	2b40      	cmp	r3, #64	; 0x40
 8006c86:	d86f      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x170>
 8006c88:	2b30      	cmp	r3, #48	; 0x30
 8006c8a:	d064      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x15e>
 8006c8c:	2b30      	cmp	r3, #48	; 0x30
 8006c8e:	d86b      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x170>
 8006c90:	2b20      	cmp	r3, #32
 8006c92:	d060      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x15e>
 8006c94:	2b20      	cmp	r3, #32
 8006c96:	d867      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x170>
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d05c      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x15e>
 8006c9c:	2b10      	cmp	r3, #16
 8006c9e:	d05a      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x15e>
 8006ca0:	e062      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cb2:	f000 f97f 	bl	8006fb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	609a      	str	r2, [r3, #8]
      break;
 8006cce:	e04f      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ce0:	f000 f968 	bl	8006fb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cf2:	609a      	str	r2, [r3, #8]
      break;
 8006cf4:	e03c      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d02:	461a      	mov	r2, r3
 8006d04:	f000 f8dc 	bl	8006ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2150      	movs	r1, #80	; 0x50
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 f935 	bl	8006f7e <TIM_ITRx_SetConfig>
      break;
 8006d14:	e02c      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d22:	461a      	mov	r2, r3
 8006d24:	f000 f8fb 	bl	8006f1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2160      	movs	r1, #96	; 0x60
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 f925 	bl	8006f7e <TIM_ITRx_SetConfig>
      break;
 8006d34:	e01c      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d42:	461a      	mov	r2, r3
 8006d44:	f000 f8bc 	bl	8006ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2140      	movs	r1, #64	; 0x40
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 f915 	bl	8006f7e <TIM_ITRx_SetConfig>
      break;
 8006d54:	e00c      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4610      	mov	r0, r2
 8006d62:	f000 f90c 	bl	8006f7e <TIM_ITRx_SetConfig>
      break;
 8006d66:	e003      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d6c:	e000      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006d6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a40      	ldr	r2, [pc, #256]	; (8006ea0 <TIM_Base_SetConfig+0x114>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d013      	beq.n	8006dcc <TIM_Base_SetConfig+0x40>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006daa:	d00f      	beq.n	8006dcc <TIM_Base_SetConfig+0x40>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a3d      	ldr	r2, [pc, #244]	; (8006ea4 <TIM_Base_SetConfig+0x118>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d00b      	beq.n	8006dcc <TIM_Base_SetConfig+0x40>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a3c      	ldr	r2, [pc, #240]	; (8006ea8 <TIM_Base_SetConfig+0x11c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d007      	beq.n	8006dcc <TIM_Base_SetConfig+0x40>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a3b      	ldr	r2, [pc, #236]	; (8006eac <TIM_Base_SetConfig+0x120>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d003      	beq.n	8006dcc <TIM_Base_SetConfig+0x40>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a3a      	ldr	r2, [pc, #232]	; (8006eb0 <TIM_Base_SetConfig+0x124>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d108      	bne.n	8006dde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a2f      	ldr	r2, [pc, #188]	; (8006ea0 <TIM_Base_SetConfig+0x114>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d01f      	beq.n	8006e26 <TIM_Base_SetConfig+0x9a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dec:	d01b      	beq.n	8006e26 <TIM_Base_SetConfig+0x9a>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a2c      	ldr	r2, [pc, #176]	; (8006ea4 <TIM_Base_SetConfig+0x118>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d017      	beq.n	8006e26 <TIM_Base_SetConfig+0x9a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a2b      	ldr	r2, [pc, #172]	; (8006ea8 <TIM_Base_SetConfig+0x11c>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d013      	beq.n	8006e26 <TIM_Base_SetConfig+0x9a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a2a      	ldr	r2, [pc, #168]	; (8006eac <TIM_Base_SetConfig+0x120>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d00f      	beq.n	8006e26 <TIM_Base_SetConfig+0x9a>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a29      	ldr	r2, [pc, #164]	; (8006eb0 <TIM_Base_SetConfig+0x124>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d00b      	beq.n	8006e26 <TIM_Base_SetConfig+0x9a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a28      	ldr	r2, [pc, #160]	; (8006eb4 <TIM_Base_SetConfig+0x128>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d007      	beq.n	8006e26 <TIM_Base_SetConfig+0x9a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a27      	ldr	r2, [pc, #156]	; (8006eb8 <TIM_Base_SetConfig+0x12c>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d003      	beq.n	8006e26 <TIM_Base_SetConfig+0x9a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a26      	ldr	r2, [pc, #152]	; (8006ebc <TIM_Base_SetConfig+0x130>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d108      	bne.n	8006e38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a10      	ldr	r2, [pc, #64]	; (8006ea0 <TIM_Base_SetConfig+0x114>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00f      	beq.n	8006e84 <TIM_Base_SetConfig+0xf8>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a12      	ldr	r2, [pc, #72]	; (8006eb0 <TIM_Base_SetConfig+0x124>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00b      	beq.n	8006e84 <TIM_Base_SetConfig+0xf8>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a11      	ldr	r2, [pc, #68]	; (8006eb4 <TIM_Base_SetConfig+0x128>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d007      	beq.n	8006e84 <TIM_Base_SetConfig+0xf8>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a10      	ldr	r2, [pc, #64]	; (8006eb8 <TIM_Base_SetConfig+0x12c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d003      	beq.n	8006e84 <TIM_Base_SetConfig+0xf8>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a0f      	ldr	r2, [pc, #60]	; (8006ebc <TIM_Base_SetConfig+0x130>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d103      	bne.n	8006e8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	691a      	ldr	r2, [r3, #16]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	615a      	str	r2, [r3, #20]
}
 8006e92:	bf00      	nop
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	40012c00 	.word	0x40012c00
 8006ea4:	40000400 	.word	0x40000400
 8006ea8:	40000800 	.word	0x40000800
 8006eac:	40000c00 	.word	0x40000c00
 8006eb0:	40013400 	.word	0x40013400
 8006eb4:	40014000 	.word	0x40014000
 8006eb8:	40014400 	.word	0x40014400
 8006ebc:	40014800 	.word	0x40014800

08006ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	f023 0201 	bic.w	r2, r3, #1
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	011b      	lsls	r3, r3, #4
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f023 030a 	bic.w	r3, r3, #10
 8006efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	621a      	str	r2, [r3, #32]
}
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b087      	sub	sp, #28
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	f023 0210 	bic.w	r2, r3, #16
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	031b      	lsls	r3, r3, #12
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	011b      	lsls	r3, r3, #4
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	621a      	str	r2, [r3, #32]
}
 8006f72:	bf00      	nop
 8006f74:	371c      	adds	r7, #28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b085      	sub	sp, #20
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	f043 0307 	orr.w	r3, r3, #7
 8006fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	609a      	str	r2, [r3, #8]
}
 8006fa8:	bf00      	nop
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	021a      	lsls	r2, r3, #8
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	609a      	str	r2, [r3, #8]
}
 8006fe8:	bf00      	nop
 8006fea:	371c      	adds	r7, #28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007004:	2b01      	cmp	r3, #1
 8007006:	d101      	bne.n	800700c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007008:	2302      	movs	r3, #2
 800700a:	e068      	b.n	80070de <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a2e      	ldr	r2, [pc, #184]	; (80070ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d004      	beq.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a2d      	ldr	r2, [pc, #180]	; (80070f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d108      	bne.n	8007052 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007046:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007058:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a1e      	ldr	r2, [pc, #120]	; (80070ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d01d      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800707e:	d018      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a1b      	ldr	r2, [pc, #108]	; (80070f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d013      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a1a      	ldr	r2, [pc, #104]	; (80070f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d00e      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a18      	ldr	r2, [pc, #96]	; (80070fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d009      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a13      	ldr	r2, [pc, #76]	; (80070f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d004      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a14      	ldr	r2, [pc, #80]	; (8007100 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d10c      	bne.n	80070cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	40012c00 	.word	0x40012c00
 80070f0:	40013400 	.word	0x40013400
 80070f4:	40000400 	.word	0x40000400
 80070f8:	40000800 	.word	0x40000800
 80070fc:	40000c00 	.word	0x40000c00
 8007100:	40014000 	.word	0x40014000

08007104 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e040      	b.n	8007198 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d106      	bne.n	800712c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7fa ffbe 	bl	80020a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2224      	movs	r2, #36	; 0x24
 8007130:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0201 	bic.w	r2, r2, #1
 8007140:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	2b00      	cmp	r3, #0
 8007148:	d002      	beq.n	8007150 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fe7c 	bl	8007e48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fbc1 	bl	80078d8 <UART_SetConfig>
 8007156:	4603      	mov	r3, r0
 8007158:	2b01      	cmp	r3, #1
 800715a:	d101      	bne.n	8007160 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e01b      	b.n	8007198 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800716e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689a      	ldr	r2, [r3, #8]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800717e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f042 0201 	orr.w	r2, r2, #1
 800718e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fefb 	bl	8007f8c <UART_CheckIdleState>
 8007196:	4603      	mov	r3, r0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08a      	sub	sp, #40	; 0x28
 80071a4:	af02      	add	r7, sp, #8
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	603b      	str	r3, [r7, #0]
 80071ac:	4613      	mov	r3, r2
 80071ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	d178      	bne.n	80072aa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <HAL_UART_Transmit+0x24>
 80071be:	88fb      	ldrh	r3, [r7, #6]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e071      	b.n	80072ac <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2221      	movs	r2, #33	; 0x21
 80071d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071d6:	f7fb fad9 	bl	800278c <HAL_GetTick>
 80071da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	88fa      	ldrh	r2, [r7, #6]
 80071e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	88fa      	ldrh	r2, [r7, #6]
 80071e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f4:	d108      	bne.n	8007208 <HAL_UART_Transmit+0x68>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d104      	bne.n	8007208 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80071fe:	2300      	movs	r3, #0
 8007200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	61bb      	str	r3, [r7, #24]
 8007206:	e003      	b.n	8007210 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800720c:	2300      	movs	r3, #0
 800720e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007210:	e030      	b.n	8007274 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2200      	movs	r2, #0
 800721a:	2180      	movs	r1, #128	; 0x80
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 ff5d 	bl	80080dc <UART_WaitOnFlagUntilTimeout>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d004      	beq.n	8007232 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2220      	movs	r2, #32
 800722c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e03c      	b.n	80072ac <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10b      	bne.n	8007250 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	881a      	ldrh	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007244:	b292      	uxth	r2, r2
 8007246:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	3302      	adds	r3, #2
 800724c:	61bb      	str	r3, [r7, #24]
 800724e:	e008      	b.n	8007262 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	781a      	ldrb	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	b292      	uxth	r2, r2
 800725a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	3301      	adds	r3, #1
 8007260:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007268:	b29b      	uxth	r3, r3
 800726a:	3b01      	subs	r3, #1
 800726c:	b29a      	uxth	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800727a:	b29b      	uxth	r3, r3
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1c8      	bne.n	8007212 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	2200      	movs	r2, #0
 8007288:	2140      	movs	r1, #64	; 0x40
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 ff26 	bl	80080dc <UART_WaitOnFlagUntilTimeout>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d004      	beq.n	80072a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2220      	movs	r2, #32
 800729a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e005      	b.n	80072ac <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2220      	movs	r2, #32
 80072a4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	e000      	b.n	80072ac <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80072aa:	2302      	movs	r3, #2
  }
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3720      	adds	r7, #32
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b0ba      	sub	sp, #232	; 0xe8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80072de:	f640 030f 	movw	r3, #2063	; 0x80f
 80072e2:	4013      	ands	r3, r2
 80072e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80072e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d115      	bne.n	800731c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80072f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072f4:	f003 0320 	and.w	r3, r3, #32
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00f      	beq.n	800731c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007300:	f003 0320 	and.w	r3, r3, #32
 8007304:	2b00      	cmp	r3, #0
 8007306:	d009      	beq.n	800731c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 82ae 	beq.w	800786e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	4798      	blx	r3
      }
      return;
 800731a:	e2a8      	b.n	800786e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800731c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 8117 	beq.w	8007554 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d106      	bne.n	8007340 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007332:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007336:	4b85      	ldr	r3, [pc, #532]	; (800754c <HAL_UART_IRQHandler+0x298>)
 8007338:	4013      	ands	r3, r2
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 810a 	beq.w	8007554 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b00      	cmp	r3, #0
 800734a:	d011      	beq.n	8007370 <HAL_UART_IRQHandler+0xbc>
 800734c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00b      	beq.n	8007370 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2201      	movs	r2, #1
 800735e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007366:	f043 0201 	orr.w	r2, r3, #1
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d011      	beq.n	80073a0 <HAL_UART_IRQHandler+0xec>
 800737c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00b      	beq.n	80073a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2202      	movs	r2, #2
 800738e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007396:	f043 0204 	orr.w	r2, r3, #4
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a4:	f003 0304 	and.w	r3, r3, #4
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d011      	beq.n	80073d0 <HAL_UART_IRQHandler+0x11c>
 80073ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00b      	beq.n	80073d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2204      	movs	r2, #4
 80073be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073c6:	f043 0202 	orr.w	r2, r3, #2
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d4:	f003 0308 	and.w	r3, r3, #8
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d017      	beq.n	800740c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e0:	f003 0320 	and.w	r3, r3, #32
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d105      	bne.n	80073f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80073e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00b      	beq.n	800740c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2208      	movs	r2, #8
 80073fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007402:	f043 0208 	orr.w	r2, r3, #8
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800740c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007414:	2b00      	cmp	r3, #0
 8007416:	d012      	beq.n	800743e <HAL_UART_IRQHandler+0x18a>
 8007418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800741c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00c      	beq.n	800743e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800742c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007434:	f043 0220 	orr.w	r2, r3, #32
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 8214 	beq.w	8007872 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800744a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800744e:	f003 0320 	and.w	r3, r3, #32
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00d      	beq.n	8007472 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b00      	cmp	r3, #0
 8007460:	d007      	beq.n	8007472 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007478:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007486:	2b40      	cmp	r3, #64	; 0x40
 8007488:	d005      	beq.n	8007496 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800748a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800748e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007492:	2b00      	cmp	r3, #0
 8007494:	d04f      	beq.n	8007536 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 ff4e 	bl	8008338 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a6:	2b40      	cmp	r3, #64	; 0x40
 80074a8:	d141      	bne.n	800752e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3308      	adds	r3, #8
 80074b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3308      	adds	r3, #8
 80074d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1d9      	bne.n	80074aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d013      	beq.n	8007526 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007502:	4a13      	ldr	r2, [pc, #76]	; (8007550 <HAL_UART_IRQHandler+0x29c>)
 8007504:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800750a:	4618      	mov	r0, r3
 800750c:	f7fd f8ec 	bl	80046e8 <HAL_DMA_Abort_IT>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d017      	beq.n	8007546 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800751a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007520:	4610      	mov	r0, r2
 8007522:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007524:	e00f      	b.n	8007546 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f9cc 	bl	80078c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752c:	e00b      	b.n	8007546 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f9c8 	bl	80078c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007534:	e007      	b.n	8007546 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f9c4 	bl	80078c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007544:	e195      	b.n	8007872 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007546:	bf00      	nop
    return;
 8007548:	e193      	b.n	8007872 <HAL_UART_IRQHandler+0x5be>
 800754a:	bf00      	nop
 800754c:	04000120 	.word	0x04000120
 8007550:	080085e9 	.word	0x080085e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007558:	2b01      	cmp	r3, #1
 800755a:	f040 814e 	bne.w	80077fa <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800755e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007562:	f003 0310 	and.w	r3, r3, #16
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 8147 	beq.w	80077fa <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800756c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007570:	f003 0310 	and.w	r3, r3, #16
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 8140 	beq.w	80077fa <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2210      	movs	r2, #16
 8007580:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758c:	2b40      	cmp	r3, #64	; 0x40
 800758e:	f040 80b8 	bne.w	8007702 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800759e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 8167 	beq.w	8007876 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80075ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075b2:	429a      	cmp	r2, r3
 80075b4:	f080 815f 	bcs.w	8007876 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f040 8086 	bne.w	80076e0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	461a      	mov	r2, r3
 80075fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007602:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007606:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800760a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007616:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1da      	bne.n	80075d4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3308      	adds	r3, #8
 8007624:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800762e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007630:	f023 0301 	bic.w	r3, r3, #1
 8007634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3308      	adds	r3, #8
 800763e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007642:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007646:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007648:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800764a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800764e:	e841 2300 	strex	r3, r2, [r1]
 8007652:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1e1      	bne.n	800761e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3308      	adds	r3, #8
 8007660:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800766a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800766c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3308      	adds	r3, #8
 800767a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800767e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007680:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007682:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007684:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800768c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1e3      	bne.n	800765a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2220      	movs	r2, #32
 8007696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076b0:	f023 0310 	bic.w	r3, r3, #16
 80076b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	461a      	mov	r2, r3
 80076be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80076c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e4      	bne.n	80076a0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076da:	4618      	mov	r0, r3
 80076dc:	f7fc ffc6 	bl	800466c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7f9 fd7c 	bl	80011f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007700:	e0b9      	b.n	8007876 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800770e:	b29b      	uxth	r3, r3
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	f000 80ab 	beq.w	800787a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 80a6 	beq.w	800787a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800773c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007742:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	461a      	mov	r2, r3
 800774c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007750:	647b      	str	r3, [r7, #68]	; 0x44
 8007752:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800775e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e4      	bne.n	800772e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3308      	adds	r3, #8
 800776a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	e853 3f00 	ldrex	r3, [r3]
 8007772:	623b      	str	r3, [r7, #32]
   return(result);
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	f023 0301 	bic.w	r3, r3, #1
 800777a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	3308      	adds	r3, #8
 8007784:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007788:	633a      	str	r2, [r7, #48]	; 0x30
 800778a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800778e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007790:	e841 2300 	strex	r3, r2, [r1]
 8007794:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e3      	bne.n	8007764 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2220      	movs	r2, #32
 80077a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f023 0310 	bic.w	r3, r3, #16
 80077c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	461a      	mov	r2, r3
 80077ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077d2:	61fb      	str	r3, [r7, #28]
 80077d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d6:	69b9      	ldr	r1, [r7, #24]
 80077d8:	69fa      	ldr	r2, [r7, #28]
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	617b      	str	r3, [r7, #20]
   return(result);
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1e4      	bne.n	80077b0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2202      	movs	r2, #2
 80077ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7f9 fd00 	bl	80011f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077f8:	e03f      	b.n	800787a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80077fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00e      	beq.n	8007824 <HAL_UART_IRQHandler+0x570>
 8007806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800780a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d008      	beq.n	8007824 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800781a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 ff23 	bl	8008668 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007822:	e02d      	b.n	8007880 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00e      	beq.n	800784e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007838:	2b00      	cmp	r3, #0
 800783a:	d008      	beq.n	800784e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d01c      	beq.n	800787e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	4798      	blx	r3
    }
    return;
 800784c:	e017      	b.n	800787e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800784e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007856:	2b00      	cmp	r3, #0
 8007858:	d012      	beq.n	8007880 <HAL_UART_IRQHandler+0x5cc>
 800785a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800785e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00c      	beq.n	8007880 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fed4 	bl	8008614 <UART_EndTransmit_IT>
    return;
 800786c:	e008      	b.n	8007880 <HAL_UART_IRQHandler+0x5cc>
      return;
 800786e:	bf00      	nop
 8007870:	e006      	b.n	8007880 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007872:	bf00      	nop
 8007874:	e004      	b.n	8007880 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007876:	bf00      	nop
 8007878:	e002      	b.n	8007880 <HAL_UART_IRQHandler+0x5cc>
      return;
 800787a:	bf00      	nop
 800787c:	e000      	b.n	8007880 <HAL_UART_IRQHandler+0x5cc>
    return;
 800787e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007880:	37e8      	adds	r7, #232	; 0xe8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop

08007888 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078dc:	b08a      	sub	sp, #40	; 0x28
 80078de:	af00      	add	r7, sp, #0
 80078e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	689a      	ldr	r2, [r3, #8]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	431a      	orrs	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	431a      	orrs	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	4ba4      	ldr	r3, [pc, #656]	; (8007b98 <UART_SetConfig+0x2c0>)
 8007908:	4013      	ands	r3, r2
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	6812      	ldr	r2, [r2, #0]
 800790e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007910:	430b      	orrs	r3, r1
 8007912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	430a      	orrs	r2, r1
 8007928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a99      	ldr	r2, [pc, #612]	; (8007b9c <UART_SetConfig+0x2c4>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d004      	beq.n	8007944 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007940:	4313      	orrs	r3, r2
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007954:	430a      	orrs	r2, r1
 8007956:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a90      	ldr	r2, [pc, #576]	; (8007ba0 <UART_SetConfig+0x2c8>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d126      	bne.n	80079b0 <UART_SetConfig+0xd8>
 8007962:	4b90      	ldr	r3, [pc, #576]	; (8007ba4 <UART_SetConfig+0x2cc>)
 8007964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007968:	f003 0303 	and.w	r3, r3, #3
 800796c:	2b03      	cmp	r3, #3
 800796e:	d81b      	bhi.n	80079a8 <UART_SetConfig+0xd0>
 8007970:	a201      	add	r2, pc, #4	; (adr r2, 8007978 <UART_SetConfig+0xa0>)
 8007972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007976:	bf00      	nop
 8007978:	08007989 	.word	0x08007989
 800797c:	08007999 	.word	0x08007999
 8007980:	08007991 	.word	0x08007991
 8007984:	080079a1 	.word	0x080079a1
 8007988:	2301      	movs	r3, #1
 800798a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800798e:	e116      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007990:	2302      	movs	r3, #2
 8007992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007996:	e112      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007998:	2304      	movs	r3, #4
 800799a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800799e:	e10e      	b.n	8007bbe <UART_SetConfig+0x2e6>
 80079a0:	2308      	movs	r3, #8
 80079a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079a6:	e10a      	b.n	8007bbe <UART_SetConfig+0x2e6>
 80079a8:	2310      	movs	r3, #16
 80079aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079ae:	e106      	b.n	8007bbe <UART_SetConfig+0x2e6>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a7c      	ldr	r2, [pc, #496]	; (8007ba8 <UART_SetConfig+0x2d0>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d138      	bne.n	8007a2c <UART_SetConfig+0x154>
 80079ba:	4b7a      	ldr	r3, [pc, #488]	; (8007ba4 <UART_SetConfig+0x2cc>)
 80079bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c0:	f003 030c 	and.w	r3, r3, #12
 80079c4:	2b0c      	cmp	r3, #12
 80079c6:	d82d      	bhi.n	8007a24 <UART_SetConfig+0x14c>
 80079c8:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <UART_SetConfig+0xf8>)
 80079ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ce:	bf00      	nop
 80079d0:	08007a05 	.word	0x08007a05
 80079d4:	08007a25 	.word	0x08007a25
 80079d8:	08007a25 	.word	0x08007a25
 80079dc:	08007a25 	.word	0x08007a25
 80079e0:	08007a15 	.word	0x08007a15
 80079e4:	08007a25 	.word	0x08007a25
 80079e8:	08007a25 	.word	0x08007a25
 80079ec:	08007a25 	.word	0x08007a25
 80079f0:	08007a0d 	.word	0x08007a0d
 80079f4:	08007a25 	.word	0x08007a25
 80079f8:	08007a25 	.word	0x08007a25
 80079fc:	08007a25 	.word	0x08007a25
 8007a00:	08007a1d 	.word	0x08007a1d
 8007a04:	2300      	movs	r3, #0
 8007a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a0a:	e0d8      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a12:	e0d4      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007a14:	2304      	movs	r3, #4
 8007a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a1a:	e0d0      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007a1c:	2308      	movs	r3, #8
 8007a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a22:	e0cc      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007a24:	2310      	movs	r3, #16
 8007a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a2a:	e0c8      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a5e      	ldr	r2, [pc, #376]	; (8007bac <UART_SetConfig+0x2d4>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d125      	bne.n	8007a82 <UART_SetConfig+0x1aa>
 8007a36:	4b5b      	ldr	r3, [pc, #364]	; (8007ba4 <UART_SetConfig+0x2cc>)
 8007a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a40:	2b30      	cmp	r3, #48	; 0x30
 8007a42:	d016      	beq.n	8007a72 <UART_SetConfig+0x19a>
 8007a44:	2b30      	cmp	r3, #48	; 0x30
 8007a46:	d818      	bhi.n	8007a7a <UART_SetConfig+0x1a2>
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	d00a      	beq.n	8007a62 <UART_SetConfig+0x18a>
 8007a4c:	2b20      	cmp	r3, #32
 8007a4e:	d814      	bhi.n	8007a7a <UART_SetConfig+0x1a2>
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <UART_SetConfig+0x182>
 8007a54:	2b10      	cmp	r3, #16
 8007a56:	d008      	beq.n	8007a6a <UART_SetConfig+0x192>
 8007a58:	e00f      	b.n	8007a7a <UART_SetConfig+0x1a2>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a60:	e0ad      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007a62:	2302      	movs	r3, #2
 8007a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a68:	e0a9      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007a6a:	2304      	movs	r3, #4
 8007a6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a70:	e0a5      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007a72:	2308      	movs	r3, #8
 8007a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a78:	e0a1      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007a7a:	2310      	movs	r3, #16
 8007a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a80:	e09d      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a4a      	ldr	r2, [pc, #296]	; (8007bb0 <UART_SetConfig+0x2d8>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d125      	bne.n	8007ad8 <UART_SetConfig+0x200>
 8007a8c:	4b45      	ldr	r3, [pc, #276]	; (8007ba4 <UART_SetConfig+0x2cc>)
 8007a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a96:	2bc0      	cmp	r3, #192	; 0xc0
 8007a98:	d016      	beq.n	8007ac8 <UART_SetConfig+0x1f0>
 8007a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a9c:	d818      	bhi.n	8007ad0 <UART_SetConfig+0x1f8>
 8007a9e:	2b80      	cmp	r3, #128	; 0x80
 8007aa0:	d00a      	beq.n	8007ab8 <UART_SetConfig+0x1e0>
 8007aa2:	2b80      	cmp	r3, #128	; 0x80
 8007aa4:	d814      	bhi.n	8007ad0 <UART_SetConfig+0x1f8>
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <UART_SetConfig+0x1d8>
 8007aaa:	2b40      	cmp	r3, #64	; 0x40
 8007aac:	d008      	beq.n	8007ac0 <UART_SetConfig+0x1e8>
 8007aae:	e00f      	b.n	8007ad0 <UART_SetConfig+0x1f8>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ab6:	e082      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007abe:	e07e      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007ac0:	2304      	movs	r3, #4
 8007ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ac6:	e07a      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007ac8:	2308      	movs	r3, #8
 8007aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ace:	e076      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007ad0:	2310      	movs	r3, #16
 8007ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ad6:	e072      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a35      	ldr	r2, [pc, #212]	; (8007bb4 <UART_SetConfig+0x2dc>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d12a      	bne.n	8007b38 <UART_SetConfig+0x260>
 8007ae2:	4b30      	ldr	r3, [pc, #192]	; (8007ba4 <UART_SetConfig+0x2cc>)
 8007ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007af0:	d01a      	beq.n	8007b28 <UART_SetConfig+0x250>
 8007af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007af6:	d81b      	bhi.n	8007b30 <UART_SetConfig+0x258>
 8007af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007afc:	d00c      	beq.n	8007b18 <UART_SetConfig+0x240>
 8007afe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b02:	d815      	bhi.n	8007b30 <UART_SetConfig+0x258>
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d003      	beq.n	8007b10 <UART_SetConfig+0x238>
 8007b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b0c:	d008      	beq.n	8007b20 <UART_SetConfig+0x248>
 8007b0e:	e00f      	b.n	8007b30 <UART_SetConfig+0x258>
 8007b10:	2300      	movs	r3, #0
 8007b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b16:	e052      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007b18:	2302      	movs	r3, #2
 8007b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b1e:	e04e      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007b20:	2304      	movs	r3, #4
 8007b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b26:	e04a      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007b28:	2308      	movs	r3, #8
 8007b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b2e:	e046      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007b30:	2310      	movs	r3, #16
 8007b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b36:	e042      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a17      	ldr	r2, [pc, #92]	; (8007b9c <UART_SetConfig+0x2c4>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d13a      	bne.n	8007bb8 <UART_SetConfig+0x2e0>
 8007b42:	4b18      	ldr	r3, [pc, #96]	; (8007ba4 <UART_SetConfig+0x2cc>)
 8007b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b50:	d01a      	beq.n	8007b88 <UART_SetConfig+0x2b0>
 8007b52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b56:	d81b      	bhi.n	8007b90 <UART_SetConfig+0x2b8>
 8007b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b5c:	d00c      	beq.n	8007b78 <UART_SetConfig+0x2a0>
 8007b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b62:	d815      	bhi.n	8007b90 <UART_SetConfig+0x2b8>
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d003      	beq.n	8007b70 <UART_SetConfig+0x298>
 8007b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b6c:	d008      	beq.n	8007b80 <UART_SetConfig+0x2a8>
 8007b6e:	e00f      	b.n	8007b90 <UART_SetConfig+0x2b8>
 8007b70:	2300      	movs	r3, #0
 8007b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b76:	e022      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007b78:	2302      	movs	r3, #2
 8007b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b7e:	e01e      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007b80:	2304      	movs	r3, #4
 8007b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b86:	e01a      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007b88:	2308      	movs	r3, #8
 8007b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b8e:	e016      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007b90:	2310      	movs	r3, #16
 8007b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b96:	e012      	b.n	8007bbe <UART_SetConfig+0x2e6>
 8007b98:	efff69f3 	.word	0xefff69f3
 8007b9c:	40008000 	.word	0x40008000
 8007ba0:	40013800 	.word	0x40013800
 8007ba4:	40021000 	.word	0x40021000
 8007ba8:	40004400 	.word	0x40004400
 8007bac:	40004800 	.word	0x40004800
 8007bb0:	40004c00 	.word	0x40004c00
 8007bb4:	40005000 	.word	0x40005000
 8007bb8:	2310      	movs	r3, #16
 8007bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a9f      	ldr	r2, [pc, #636]	; (8007e40 <UART_SetConfig+0x568>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d17a      	bne.n	8007cbe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bcc:	2b08      	cmp	r3, #8
 8007bce:	d824      	bhi.n	8007c1a <UART_SetConfig+0x342>
 8007bd0:	a201      	add	r2, pc, #4	; (adr r2, 8007bd8 <UART_SetConfig+0x300>)
 8007bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd6:	bf00      	nop
 8007bd8:	08007bfd 	.word	0x08007bfd
 8007bdc:	08007c1b 	.word	0x08007c1b
 8007be0:	08007c05 	.word	0x08007c05
 8007be4:	08007c1b 	.word	0x08007c1b
 8007be8:	08007c0b 	.word	0x08007c0b
 8007bec:	08007c1b 	.word	0x08007c1b
 8007bf0:	08007c1b 	.word	0x08007c1b
 8007bf4:	08007c1b 	.word	0x08007c1b
 8007bf8:	08007c13 	.word	0x08007c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bfc:	f7fd ffb4 	bl	8005b68 <HAL_RCC_GetPCLK1Freq>
 8007c00:	61f8      	str	r0, [r7, #28]
        break;
 8007c02:	e010      	b.n	8007c26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c04:	4b8f      	ldr	r3, [pc, #572]	; (8007e44 <UART_SetConfig+0x56c>)
 8007c06:	61fb      	str	r3, [r7, #28]
        break;
 8007c08:	e00d      	b.n	8007c26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c0a:	f7fd ff15 	bl	8005a38 <HAL_RCC_GetSysClockFreq>
 8007c0e:	61f8      	str	r0, [r7, #28]
        break;
 8007c10:	e009      	b.n	8007c26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c16:	61fb      	str	r3, [r7, #28]
        break;
 8007c18:	e005      	b.n	8007c26 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007c24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 80fb 	beq.w	8007e24 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	4613      	mov	r3, r2
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	4413      	add	r3, r2
 8007c38:	69fa      	ldr	r2, [r7, #28]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d305      	bcc.n	8007c4a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c44:	69fa      	ldr	r2, [r7, #28]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d903      	bls.n	8007c52 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007c50:	e0e8      	b.n	8007e24 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	2200      	movs	r2, #0
 8007c56:	461c      	mov	r4, r3
 8007c58:	4615      	mov	r5, r2
 8007c5a:	f04f 0200 	mov.w	r2, #0
 8007c5e:	f04f 0300 	mov.w	r3, #0
 8007c62:	022b      	lsls	r3, r5, #8
 8007c64:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007c68:	0222      	lsls	r2, r4, #8
 8007c6a:	68f9      	ldr	r1, [r7, #12]
 8007c6c:	6849      	ldr	r1, [r1, #4]
 8007c6e:	0849      	lsrs	r1, r1, #1
 8007c70:	2000      	movs	r0, #0
 8007c72:	4688      	mov	r8, r1
 8007c74:	4681      	mov	r9, r0
 8007c76:	eb12 0a08 	adds.w	sl, r2, r8
 8007c7a:	eb43 0b09 	adc.w	fp, r3, r9
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	603b      	str	r3, [r7, #0]
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c8c:	4650      	mov	r0, sl
 8007c8e:	4659      	mov	r1, fp
 8007c90:	f7f8 ffda 	bl	8000c48 <__aeabi_uldivmod>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4613      	mov	r3, r2
 8007c9a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ca2:	d308      	bcc.n	8007cb6 <UART_SetConfig+0x3de>
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007caa:	d204      	bcs.n	8007cb6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	60da      	str	r2, [r3, #12]
 8007cb4:	e0b6      	b.n	8007e24 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007cbc:	e0b2      	b.n	8007e24 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	69db      	ldr	r3, [r3, #28]
 8007cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc6:	d15e      	bne.n	8007d86 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007cc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	d828      	bhi.n	8007d22 <UART_SetConfig+0x44a>
 8007cd0:	a201      	add	r2, pc, #4	; (adr r2, 8007cd8 <UART_SetConfig+0x400>)
 8007cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd6:	bf00      	nop
 8007cd8:	08007cfd 	.word	0x08007cfd
 8007cdc:	08007d05 	.word	0x08007d05
 8007ce0:	08007d0d 	.word	0x08007d0d
 8007ce4:	08007d23 	.word	0x08007d23
 8007ce8:	08007d13 	.word	0x08007d13
 8007cec:	08007d23 	.word	0x08007d23
 8007cf0:	08007d23 	.word	0x08007d23
 8007cf4:	08007d23 	.word	0x08007d23
 8007cf8:	08007d1b 	.word	0x08007d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cfc:	f7fd ff34 	bl	8005b68 <HAL_RCC_GetPCLK1Freq>
 8007d00:	61f8      	str	r0, [r7, #28]
        break;
 8007d02:	e014      	b.n	8007d2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d04:	f7fd ff46 	bl	8005b94 <HAL_RCC_GetPCLK2Freq>
 8007d08:	61f8      	str	r0, [r7, #28]
        break;
 8007d0a:	e010      	b.n	8007d2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d0c:	4b4d      	ldr	r3, [pc, #308]	; (8007e44 <UART_SetConfig+0x56c>)
 8007d0e:	61fb      	str	r3, [r7, #28]
        break;
 8007d10:	e00d      	b.n	8007d2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d12:	f7fd fe91 	bl	8005a38 <HAL_RCC_GetSysClockFreq>
 8007d16:	61f8      	str	r0, [r7, #28]
        break;
 8007d18:	e009      	b.n	8007d2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d1e:	61fb      	str	r3, [r7, #28]
        break;
 8007d20:	e005      	b.n	8007d2e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007d22:	2300      	movs	r3, #0
 8007d24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007d2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d077      	beq.n	8007e24 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	005a      	lsls	r2, r3, #1
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	085b      	lsrs	r3, r3, #1
 8007d3e:	441a      	add	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	2b0f      	cmp	r3, #15
 8007d4e:	d916      	bls.n	8007d7e <UART_SetConfig+0x4a6>
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d56:	d212      	bcs.n	8007d7e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	f023 030f 	bic.w	r3, r3, #15
 8007d60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	085b      	lsrs	r3, r3, #1
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	f003 0307 	and.w	r3, r3, #7
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	8afb      	ldrh	r3, [r7, #22]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	8afa      	ldrh	r2, [r7, #22]
 8007d7a:	60da      	str	r2, [r3, #12]
 8007d7c:	e052      	b.n	8007e24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007d84:	e04e      	b.n	8007e24 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d8a:	2b08      	cmp	r3, #8
 8007d8c:	d827      	bhi.n	8007dde <UART_SetConfig+0x506>
 8007d8e:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <UART_SetConfig+0x4bc>)
 8007d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d94:	08007db9 	.word	0x08007db9
 8007d98:	08007dc1 	.word	0x08007dc1
 8007d9c:	08007dc9 	.word	0x08007dc9
 8007da0:	08007ddf 	.word	0x08007ddf
 8007da4:	08007dcf 	.word	0x08007dcf
 8007da8:	08007ddf 	.word	0x08007ddf
 8007dac:	08007ddf 	.word	0x08007ddf
 8007db0:	08007ddf 	.word	0x08007ddf
 8007db4:	08007dd7 	.word	0x08007dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007db8:	f7fd fed6 	bl	8005b68 <HAL_RCC_GetPCLK1Freq>
 8007dbc:	61f8      	str	r0, [r7, #28]
        break;
 8007dbe:	e014      	b.n	8007dea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dc0:	f7fd fee8 	bl	8005b94 <HAL_RCC_GetPCLK2Freq>
 8007dc4:	61f8      	str	r0, [r7, #28]
        break;
 8007dc6:	e010      	b.n	8007dea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dc8:	4b1e      	ldr	r3, [pc, #120]	; (8007e44 <UART_SetConfig+0x56c>)
 8007dca:	61fb      	str	r3, [r7, #28]
        break;
 8007dcc:	e00d      	b.n	8007dea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dce:	f7fd fe33 	bl	8005a38 <HAL_RCC_GetSysClockFreq>
 8007dd2:	61f8      	str	r0, [r7, #28]
        break;
 8007dd4:	e009      	b.n	8007dea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dda:	61fb      	str	r3, [r7, #28]
        break;
 8007ddc:	e005      	b.n	8007dea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007de8:	bf00      	nop
    }

    if (pclk != 0U)
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d019      	beq.n	8007e24 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	085a      	lsrs	r2, r3, #1
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	441a      	add	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	2b0f      	cmp	r3, #15
 8007e08:	d909      	bls.n	8007e1e <UART_SetConfig+0x546>
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e10:	d205      	bcs.n	8007e1e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60da      	str	r2, [r3, #12]
 8007e1c:	e002      	b.n	8007e24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007e30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3728      	adds	r7, #40	; 0x28
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e3e:	bf00      	nop
 8007e40:	40008000 	.word	0x40008000
 8007e44:	00f42400 	.word	0x00f42400

08007e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e54:	f003 0308 	and.w	r3, r3, #8
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	f003 0302 	and.w	r3, r3, #2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00a      	beq.n	8007eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eba:	f003 0304 	and.w	r3, r3, #4
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00a      	beq.n	8007ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007edc:	f003 0310 	and.w	r3, r3, #16
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00a      	beq.n	8007efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00a      	beq.n	8007f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01a      	beq.n	8007f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f46:	d10a      	bne.n	8007f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00a      	beq.n	8007f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	430a      	orrs	r2, r1
 8007f7e:	605a      	str	r2, [r3, #4]
  }
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b098      	sub	sp, #96	; 0x60
 8007f90:	af02      	add	r7, sp, #8
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f9c:	f7fa fbf6 	bl	800278c <HAL_GetTick>
 8007fa0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0308 	and.w	r3, r3, #8
 8007fac:	2b08      	cmp	r3, #8
 8007fae:	d12e      	bne.n	800800e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f88c 	bl	80080dc <UART_WaitOnFlagUntilTimeout>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d021      	beq.n	800800e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd2:	e853 3f00 	ldrex	r3, [r3]
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fde:	653b      	str	r3, [r7, #80]	; 0x50
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8007fea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ff0:	e841 2300 	strex	r3, r2, [r1]
 8007ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e6      	bne.n	8007fca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2220      	movs	r2, #32
 8008000:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e062      	b.n	80080d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b04      	cmp	r3, #4
 800801a:	d149      	bne.n	80080b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800801c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008024:	2200      	movs	r2, #0
 8008026:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f856 	bl	80080dc <UART_WaitOnFlagUntilTimeout>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d03c      	beq.n	80080b0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	e853 3f00 	ldrex	r3, [r3]
 8008042:	623b      	str	r3, [r7, #32]
   return(result);
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800804a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	461a      	mov	r2, r3
 8008052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008054:	633b      	str	r3, [r7, #48]	; 0x30
 8008056:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008058:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800805a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800805c:	e841 2300 	strex	r3, r2, [r1]
 8008060:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1e6      	bne.n	8008036 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3308      	adds	r3, #8
 800806e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	e853 3f00 	ldrex	r3, [r3]
 8008076:	60fb      	str	r3, [r7, #12]
   return(result);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f023 0301 	bic.w	r3, r3, #1
 800807e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	3308      	adds	r3, #8
 8008086:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008088:	61fa      	str	r2, [r7, #28]
 800808a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808c:	69b9      	ldr	r1, [r7, #24]
 800808e:	69fa      	ldr	r2, [r7, #28]
 8008090:	e841 2300 	strex	r3, r2, [r1]
 8008094:	617b      	str	r3, [r7, #20]
   return(result);
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1e5      	bne.n	8008068 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2220      	movs	r2, #32
 80080a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e011      	b.n	80080d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2220      	movs	r2, #32
 80080b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2220      	movs	r2, #32
 80080ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3758      	adds	r7, #88	; 0x58
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	603b      	str	r3, [r7, #0]
 80080e8:	4613      	mov	r3, r2
 80080ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080ec:	e049      	b.n	8008182 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f4:	d045      	beq.n	8008182 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080f6:	f7fa fb49 	bl	800278c <HAL_GetTick>
 80080fa:	4602      	mov	r2, r0
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	429a      	cmp	r2, r3
 8008104:	d302      	bcc.n	800810c <UART_WaitOnFlagUntilTimeout+0x30>
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e048      	b.n	80081a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 0304 	and.w	r3, r3, #4
 800811a:	2b00      	cmp	r3, #0
 800811c:	d031      	beq.n	8008182 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	69db      	ldr	r3, [r3, #28]
 8008124:	f003 0308 	and.w	r3, r3, #8
 8008128:	2b08      	cmp	r3, #8
 800812a:	d110      	bne.n	800814e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2208      	movs	r2, #8
 8008132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 f8ff 	bl	8008338 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2208      	movs	r2, #8
 800813e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e029      	b.n	80081a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	69db      	ldr	r3, [r3, #28]
 8008154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800815c:	d111      	bne.n	8008182 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008166:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 f8e5 	bl	8008338 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2220      	movs	r2, #32
 8008172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e00f      	b.n	80081a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	69da      	ldr	r2, [r3, #28]
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	4013      	ands	r3, r2
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	429a      	cmp	r2, r3
 8008190:	bf0c      	ite	eq
 8008192:	2301      	moveq	r3, #1
 8008194:	2300      	movne	r3, #0
 8008196:	b2db      	uxtb	r3, r3
 8008198:	461a      	mov	r2, r3
 800819a:	79fb      	ldrb	r3, [r7, #7]
 800819c:	429a      	cmp	r2, r3
 800819e:	d0a6      	beq.n	80080ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b096      	sub	sp, #88	; 0x58
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	4613      	mov	r3, r2
 80081b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	88fa      	ldrh	r2, [r7, #6]
 80081c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2222      	movs	r2, #34	; 0x22
 80081d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d028      	beq.n	8008232 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081e4:	4a3e      	ldr	r2, [pc, #248]	; (80082e0 <UART_Start_Receive_DMA+0x134>)
 80081e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081ec:	4a3d      	ldr	r2, [pc, #244]	; (80082e4 <UART_Start_Receive_DMA+0x138>)
 80081ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f4:	4a3c      	ldr	r2, [pc, #240]	; (80082e8 <UART_Start_Receive_DMA+0x13c>)
 80081f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081fc:	2200      	movs	r2, #0
 80081fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3324      	adds	r3, #36	; 0x24
 800820a:	4619      	mov	r1, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008210:	461a      	mov	r2, r3
 8008212:	88fb      	ldrh	r3, [r7, #6]
 8008214:	f7fc f9ca 	bl	80045ac <HAL_DMA_Start_IT>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d009      	beq.n	8008232 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2210      	movs	r2, #16
 8008222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2220      	movs	r2, #32
 800822a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e051      	b.n	80082d6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d018      	beq.n	800826c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008242:	e853 3f00 	ldrex	r3, [r3]
 8008246:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800824e:	657b      	str	r3, [r7, #84]	; 0x54
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	461a      	mov	r2, r3
 8008256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008258:	64bb      	str	r3, [r7, #72]	; 0x48
 800825a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800825e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008260:	e841 2300 	strex	r3, r2, [r1]
 8008264:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1e6      	bne.n	800823a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3308      	adds	r3, #8
 8008272:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008276:	e853 3f00 	ldrex	r3, [r3]
 800827a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	f043 0301 	orr.w	r3, r3, #1
 8008282:	653b      	str	r3, [r7, #80]	; 0x50
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3308      	adds	r3, #8
 800828a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800828c:	637a      	str	r2, [r7, #52]	; 0x34
 800828e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008290:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008294:	e841 2300 	strex	r3, r2, [r1]
 8008298:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800829a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1e5      	bne.n	800826c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3308      	adds	r3, #8
 80082a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	e853 3f00 	ldrex	r3, [r3]
 80082ae:	613b      	str	r3, [r7, #16]
   return(result);
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	3308      	adds	r3, #8
 80082be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082c0:	623a      	str	r2, [r7, #32]
 80082c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c4:	69f9      	ldr	r1, [r7, #28]
 80082c6:	6a3a      	ldr	r2, [r7, #32]
 80082c8:	e841 2300 	strex	r3, r2, [r1]
 80082cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1e5      	bne.n	80082a0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3758      	adds	r7, #88	; 0x58
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	08008401 	.word	0x08008401
 80082e4:	0800852d 	.word	0x0800852d
 80082e8:	0800856b 	.word	0x0800856b

080082ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b089      	sub	sp, #36	; 0x24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	e853 3f00 	ldrex	r3, [r3]
 8008300:	60bb      	str	r3, [r7, #8]
   return(result);
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008308:	61fb      	str	r3, [r7, #28]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	461a      	mov	r2, r3
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	61bb      	str	r3, [r7, #24]
 8008314:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008316:	6979      	ldr	r1, [r7, #20]
 8008318:	69ba      	ldr	r2, [r7, #24]
 800831a:	e841 2300 	strex	r3, r2, [r1]
 800831e:	613b      	str	r3, [r7, #16]
   return(result);
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1e6      	bne.n	80082f4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2220      	movs	r2, #32
 800832a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800832c:	bf00      	nop
 800832e:	3724      	adds	r7, #36	; 0x24
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008338:	b480      	push	{r7}
 800833a:	b095      	sub	sp, #84	; 0x54
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008348:	e853 3f00 	ldrex	r3, [r3]
 800834c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008354:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800835e:	643b      	str	r3, [r7, #64]	; 0x40
 8008360:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008362:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008364:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e6      	bne.n	8008340 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3308      	adds	r3, #8
 8008378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	e853 3f00 	ldrex	r3, [r3]
 8008380:	61fb      	str	r3, [r7, #28]
   return(result);
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	f023 0301 	bic.w	r3, r3, #1
 8008388:	64bb      	str	r3, [r7, #72]	; 0x48
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3308      	adds	r3, #8
 8008390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008392:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008394:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800839a:	e841 2300 	strex	r3, r2, [r1]
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1e5      	bne.n	8008372 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d118      	bne.n	80083e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	e853 3f00 	ldrex	r3, [r3]
 80083ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f023 0310 	bic.w	r3, r3, #16
 80083c2:	647b      	str	r3, [r7, #68]	; 0x44
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	461a      	mov	r2, r3
 80083ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083cc:	61bb      	str	r3, [r7, #24]
 80083ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	6979      	ldr	r1, [r7, #20]
 80083d2:	69ba      	ldr	r2, [r7, #24]
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	613b      	str	r3, [r7, #16]
   return(result);
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e6      	bne.n	80083ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2220      	movs	r2, #32
 80083e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80083f4:	bf00      	nop
 80083f6:	3754      	adds	r7, #84	; 0x54
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b09c      	sub	sp, #112	; 0x70
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0320 	and.w	r3, r3, #32
 8008418:	2b00      	cmp	r3, #0
 800841a:	d171      	bne.n	8008500 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800841c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800841e:	2200      	movs	r2, #0
 8008420:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008438:	66bb      	str	r3, [r7, #104]	; 0x68
 800843a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008442:	65bb      	str	r3, [r7, #88]	; 0x58
 8008444:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008448:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e6      	bne.n	8008424 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3308      	adds	r3, #8
 800845c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008468:	f023 0301 	bic.w	r3, r3, #1
 800846c:	667b      	str	r3, [r7, #100]	; 0x64
 800846e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3308      	adds	r3, #8
 8008474:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008476:	647a      	str	r2, [r7, #68]	; 0x44
 8008478:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800847c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e5      	bne.n	8008456 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800848a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3308      	adds	r3, #8
 8008490:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	623b      	str	r3, [r7, #32]
   return(result);
 800849a:	6a3b      	ldr	r3, [r7, #32]
 800849c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084a0:	663b      	str	r3, [r7, #96]	; 0x60
 80084a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3308      	adds	r3, #8
 80084a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084aa:	633a      	str	r2, [r7, #48]	; 0x30
 80084ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e5      	bne.n	800848a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084c0:	2220      	movs	r2, #32
 80084c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d118      	bne.n	8008500 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	60fb      	str	r3, [r7, #12]
   return(result);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f023 0310 	bic.w	r3, r3, #16
 80084e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	461a      	mov	r2, r3
 80084ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084ec:	61fb      	str	r3, [r7, #28]
 80084ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	69b9      	ldr	r1, [r7, #24]
 80084f2:	69fa      	ldr	r2, [r7, #28]
 80084f4:	e841 2300 	strex	r3, r2, [r1]
 80084f8:	617b      	str	r3, [r7, #20]
   return(result);
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e6      	bne.n	80084ce <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008502:	2200      	movs	r2, #0
 8008504:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800850a:	2b01      	cmp	r3, #1
 800850c:	d107      	bne.n	800851e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800850e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008510:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008514:	4619      	mov	r1, r3
 8008516:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008518:	f7f8 fe6e 	bl	80011f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800851c:	e002      	b.n	8008524 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800851e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008520:	f7ff f9bc 	bl	800789c <HAL_UART_RxCpltCallback>
}
 8008524:	bf00      	nop
 8008526:	3770      	adds	r7, #112	; 0x70
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008538:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2201      	movs	r2, #1
 800853e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008544:	2b01      	cmp	r3, #1
 8008546:	d109      	bne.n	800855c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800854e:	085b      	lsrs	r3, r3, #1
 8008550:	b29b      	uxth	r3, r3
 8008552:	4619      	mov	r1, r3
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f7f8 fe4f 	bl	80011f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800855a:	e002      	b.n	8008562 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f7ff f9a7 	bl	80078b0 <HAL_UART_RxHalfCpltCallback>
}
 8008562:	bf00      	nop
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b086      	sub	sp, #24
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008576:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800857c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008584:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008590:	2b80      	cmp	r3, #128	; 0x80
 8008592:	d109      	bne.n	80085a8 <UART_DMAError+0x3e>
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	2b21      	cmp	r3, #33	; 0x21
 8008598:	d106      	bne.n	80085a8 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2200      	movs	r2, #0
 800859e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80085a2:	6978      	ldr	r0, [r7, #20]
 80085a4:	f7ff fea2 	bl	80082ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b2:	2b40      	cmp	r3, #64	; 0x40
 80085b4:	d109      	bne.n	80085ca <UART_DMAError+0x60>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2b22      	cmp	r3, #34	; 0x22
 80085ba:	d106      	bne.n	80085ca <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	2200      	movs	r2, #0
 80085c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80085c4:	6978      	ldr	r0, [r7, #20]
 80085c6:	f7ff feb7 	bl	8008338 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085d0:	f043 0210 	orr.w	r2, r3, #16
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085da:	6978      	ldr	r0, [r7, #20]
 80085dc:	f7ff f972 	bl	80078c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085e0:	bf00      	nop
 80085e2:	3718      	adds	r7, #24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f7ff f95c 	bl	80078c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800860c:	bf00      	nop
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	e853 3f00 	ldrex	r3, [r3]
 8008628:	60bb      	str	r3, [r7, #8]
   return(result);
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008630:	61fb      	str	r3, [r7, #28]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	61bb      	str	r3, [r7, #24]
 800863c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863e:	6979      	ldr	r1, [r7, #20]
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	e841 2300 	strex	r3, r2, [r1]
 8008646:	613b      	str	r3, [r7, #16]
   return(result);
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1e6      	bne.n	800861c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2220      	movs	r2, #32
 8008652:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7ff f914 	bl	8007888 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008660:	bf00      	nop
 8008662:	3720      	adds	r7, #32
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08c      	sub	sp, #48	; 0x30
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	4613      	mov	r3, r2
 8008688:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008690:	2b20      	cmp	r3, #32
 8008692:	d142      	bne.n	800871a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d002      	beq.n	80086a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800869a:	88fb      	ldrh	r3, [r7, #6]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e03b      	b.n	800871c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2201      	movs	r2, #1
 80086a8:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80086b0:	88fb      	ldrh	r3, [r7, #6]
 80086b2:	461a      	mov	r2, r3
 80086b4:	68b9      	ldr	r1, [r7, #8]
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f7ff fd78 	bl	80081ac <UART_Start_Receive_DMA>
 80086bc:	4603      	mov	r3, r0
 80086be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80086c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d124      	bne.n	8008714 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d11d      	bne.n	800870e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2210      	movs	r2, #16
 80086d8:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	e853 3f00 	ldrex	r3, [r3]
 80086e6:	617b      	str	r3, [r7, #20]
   return(result);
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	f043 0310 	orr.w	r3, r3, #16
 80086ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f8:	627b      	str	r3, [r7, #36]	; 0x24
 80086fa:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fc:	6a39      	ldr	r1, [r7, #32]
 80086fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008700:	e841 2300 	strex	r3, r2, [r1]
 8008704:	61fb      	str	r3, [r7, #28]
   return(result);
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e6      	bne.n	80086da <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800870c:	e002      	b.n	8008714 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008718:	e000      	b.n	800871c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800871a:	2302      	movs	r3, #2
  }
}
 800871c:	4618      	mov	r0, r3
 800871e:	3730      	adds	r7, #48	; 0x30
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <__cvt>:
 8008724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008728:	ec55 4b10 	vmov	r4, r5, d0
 800872c:	2d00      	cmp	r5, #0
 800872e:	460e      	mov	r6, r1
 8008730:	4619      	mov	r1, r3
 8008732:	462b      	mov	r3, r5
 8008734:	bfbb      	ittet	lt
 8008736:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800873a:	461d      	movlt	r5, r3
 800873c:	2300      	movge	r3, #0
 800873e:	232d      	movlt	r3, #45	; 0x2d
 8008740:	700b      	strb	r3, [r1, #0]
 8008742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008744:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008748:	4691      	mov	r9, r2
 800874a:	f023 0820 	bic.w	r8, r3, #32
 800874e:	bfbc      	itt	lt
 8008750:	4622      	movlt	r2, r4
 8008752:	4614      	movlt	r4, r2
 8008754:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008758:	d005      	beq.n	8008766 <__cvt+0x42>
 800875a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800875e:	d100      	bne.n	8008762 <__cvt+0x3e>
 8008760:	3601      	adds	r6, #1
 8008762:	2102      	movs	r1, #2
 8008764:	e000      	b.n	8008768 <__cvt+0x44>
 8008766:	2103      	movs	r1, #3
 8008768:	ab03      	add	r3, sp, #12
 800876a:	9301      	str	r3, [sp, #4]
 800876c:	ab02      	add	r3, sp, #8
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	ec45 4b10 	vmov	d0, r4, r5
 8008774:	4653      	mov	r3, sl
 8008776:	4632      	mov	r2, r6
 8008778:	f000 fe8e 	bl	8009498 <_dtoa_r>
 800877c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008780:	4607      	mov	r7, r0
 8008782:	d102      	bne.n	800878a <__cvt+0x66>
 8008784:	f019 0f01 	tst.w	r9, #1
 8008788:	d022      	beq.n	80087d0 <__cvt+0xac>
 800878a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800878e:	eb07 0906 	add.w	r9, r7, r6
 8008792:	d110      	bne.n	80087b6 <__cvt+0x92>
 8008794:	783b      	ldrb	r3, [r7, #0]
 8008796:	2b30      	cmp	r3, #48	; 0x30
 8008798:	d10a      	bne.n	80087b0 <__cvt+0x8c>
 800879a:	2200      	movs	r2, #0
 800879c:	2300      	movs	r3, #0
 800879e:	4620      	mov	r0, r4
 80087a0:	4629      	mov	r1, r5
 80087a2:	f7f8 f991 	bl	8000ac8 <__aeabi_dcmpeq>
 80087a6:	b918      	cbnz	r0, 80087b0 <__cvt+0x8c>
 80087a8:	f1c6 0601 	rsb	r6, r6, #1
 80087ac:	f8ca 6000 	str.w	r6, [sl]
 80087b0:	f8da 3000 	ldr.w	r3, [sl]
 80087b4:	4499      	add	r9, r3
 80087b6:	2200      	movs	r2, #0
 80087b8:	2300      	movs	r3, #0
 80087ba:	4620      	mov	r0, r4
 80087bc:	4629      	mov	r1, r5
 80087be:	f7f8 f983 	bl	8000ac8 <__aeabi_dcmpeq>
 80087c2:	b108      	cbz	r0, 80087c8 <__cvt+0xa4>
 80087c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80087c8:	2230      	movs	r2, #48	; 0x30
 80087ca:	9b03      	ldr	r3, [sp, #12]
 80087cc:	454b      	cmp	r3, r9
 80087ce:	d307      	bcc.n	80087e0 <__cvt+0xbc>
 80087d0:	9b03      	ldr	r3, [sp, #12]
 80087d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087d4:	1bdb      	subs	r3, r3, r7
 80087d6:	4638      	mov	r0, r7
 80087d8:	6013      	str	r3, [r2, #0]
 80087da:	b004      	add	sp, #16
 80087dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e0:	1c59      	adds	r1, r3, #1
 80087e2:	9103      	str	r1, [sp, #12]
 80087e4:	701a      	strb	r2, [r3, #0]
 80087e6:	e7f0      	b.n	80087ca <__cvt+0xa6>

080087e8 <__exponent>:
 80087e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087ea:	4603      	mov	r3, r0
 80087ec:	2900      	cmp	r1, #0
 80087ee:	bfb8      	it	lt
 80087f0:	4249      	neglt	r1, r1
 80087f2:	f803 2b02 	strb.w	r2, [r3], #2
 80087f6:	bfb4      	ite	lt
 80087f8:	222d      	movlt	r2, #45	; 0x2d
 80087fa:	222b      	movge	r2, #43	; 0x2b
 80087fc:	2909      	cmp	r1, #9
 80087fe:	7042      	strb	r2, [r0, #1]
 8008800:	dd2a      	ble.n	8008858 <__exponent+0x70>
 8008802:	f10d 0207 	add.w	r2, sp, #7
 8008806:	4617      	mov	r7, r2
 8008808:	260a      	movs	r6, #10
 800880a:	4694      	mov	ip, r2
 800880c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008810:	fb06 1415 	mls	r4, r6, r5, r1
 8008814:	3430      	adds	r4, #48	; 0x30
 8008816:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800881a:	460c      	mov	r4, r1
 800881c:	2c63      	cmp	r4, #99	; 0x63
 800881e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008822:	4629      	mov	r1, r5
 8008824:	dcf1      	bgt.n	800880a <__exponent+0x22>
 8008826:	3130      	adds	r1, #48	; 0x30
 8008828:	f1ac 0402 	sub.w	r4, ip, #2
 800882c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008830:	1c41      	adds	r1, r0, #1
 8008832:	4622      	mov	r2, r4
 8008834:	42ba      	cmp	r2, r7
 8008836:	d30a      	bcc.n	800884e <__exponent+0x66>
 8008838:	f10d 0209 	add.w	r2, sp, #9
 800883c:	eba2 020c 	sub.w	r2, r2, ip
 8008840:	42bc      	cmp	r4, r7
 8008842:	bf88      	it	hi
 8008844:	2200      	movhi	r2, #0
 8008846:	4413      	add	r3, r2
 8008848:	1a18      	subs	r0, r3, r0
 800884a:	b003      	add	sp, #12
 800884c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800884e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008852:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008856:	e7ed      	b.n	8008834 <__exponent+0x4c>
 8008858:	2330      	movs	r3, #48	; 0x30
 800885a:	3130      	adds	r1, #48	; 0x30
 800885c:	7083      	strb	r3, [r0, #2]
 800885e:	70c1      	strb	r1, [r0, #3]
 8008860:	1d03      	adds	r3, r0, #4
 8008862:	e7f1      	b.n	8008848 <__exponent+0x60>

08008864 <_printf_float>:
 8008864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008868:	ed2d 8b02 	vpush	{d8}
 800886c:	b08d      	sub	sp, #52	; 0x34
 800886e:	460c      	mov	r4, r1
 8008870:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008874:	4616      	mov	r6, r2
 8008876:	461f      	mov	r7, r3
 8008878:	4605      	mov	r5, r0
 800887a:	f000 fcfd 	bl	8009278 <_localeconv_r>
 800887e:	f8d0 a000 	ldr.w	sl, [r0]
 8008882:	4650      	mov	r0, sl
 8008884:	f7f7 fcf4 	bl	8000270 <strlen>
 8008888:	2300      	movs	r3, #0
 800888a:	930a      	str	r3, [sp, #40]	; 0x28
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	9305      	str	r3, [sp, #20]
 8008890:	f8d8 3000 	ldr.w	r3, [r8]
 8008894:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008898:	3307      	adds	r3, #7
 800889a:	f023 0307 	bic.w	r3, r3, #7
 800889e:	f103 0208 	add.w	r2, r3, #8
 80088a2:	f8c8 2000 	str.w	r2, [r8]
 80088a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80088ae:	9307      	str	r3, [sp, #28]
 80088b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80088b4:	ee08 0a10 	vmov	s16, r0
 80088b8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80088bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088c0:	4b9e      	ldr	r3, [pc, #632]	; (8008b3c <_printf_float+0x2d8>)
 80088c2:	f04f 32ff 	mov.w	r2, #4294967295
 80088c6:	f7f8 f931 	bl	8000b2c <__aeabi_dcmpun>
 80088ca:	bb88      	cbnz	r0, 8008930 <_printf_float+0xcc>
 80088cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088d0:	4b9a      	ldr	r3, [pc, #616]	; (8008b3c <_printf_float+0x2d8>)
 80088d2:	f04f 32ff 	mov.w	r2, #4294967295
 80088d6:	f7f8 f90b 	bl	8000af0 <__aeabi_dcmple>
 80088da:	bb48      	cbnz	r0, 8008930 <_printf_float+0xcc>
 80088dc:	2200      	movs	r2, #0
 80088de:	2300      	movs	r3, #0
 80088e0:	4640      	mov	r0, r8
 80088e2:	4649      	mov	r1, r9
 80088e4:	f7f8 f8fa 	bl	8000adc <__aeabi_dcmplt>
 80088e8:	b110      	cbz	r0, 80088f0 <_printf_float+0x8c>
 80088ea:	232d      	movs	r3, #45	; 0x2d
 80088ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088f0:	4a93      	ldr	r2, [pc, #588]	; (8008b40 <_printf_float+0x2dc>)
 80088f2:	4b94      	ldr	r3, [pc, #592]	; (8008b44 <_printf_float+0x2e0>)
 80088f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80088f8:	bf94      	ite	ls
 80088fa:	4690      	movls	r8, r2
 80088fc:	4698      	movhi	r8, r3
 80088fe:	2303      	movs	r3, #3
 8008900:	6123      	str	r3, [r4, #16]
 8008902:	9b05      	ldr	r3, [sp, #20]
 8008904:	f023 0304 	bic.w	r3, r3, #4
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	f04f 0900 	mov.w	r9, #0
 800890e:	9700      	str	r7, [sp, #0]
 8008910:	4633      	mov	r3, r6
 8008912:	aa0b      	add	r2, sp, #44	; 0x2c
 8008914:	4621      	mov	r1, r4
 8008916:	4628      	mov	r0, r5
 8008918:	f000 f9da 	bl	8008cd0 <_printf_common>
 800891c:	3001      	adds	r0, #1
 800891e:	f040 8090 	bne.w	8008a42 <_printf_float+0x1de>
 8008922:	f04f 30ff 	mov.w	r0, #4294967295
 8008926:	b00d      	add	sp, #52	; 0x34
 8008928:	ecbd 8b02 	vpop	{d8}
 800892c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008930:	4642      	mov	r2, r8
 8008932:	464b      	mov	r3, r9
 8008934:	4640      	mov	r0, r8
 8008936:	4649      	mov	r1, r9
 8008938:	f7f8 f8f8 	bl	8000b2c <__aeabi_dcmpun>
 800893c:	b140      	cbz	r0, 8008950 <_printf_float+0xec>
 800893e:	464b      	mov	r3, r9
 8008940:	2b00      	cmp	r3, #0
 8008942:	bfbc      	itt	lt
 8008944:	232d      	movlt	r3, #45	; 0x2d
 8008946:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800894a:	4a7f      	ldr	r2, [pc, #508]	; (8008b48 <_printf_float+0x2e4>)
 800894c:	4b7f      	ldr	r3, [pc, #508]	; (8008b4c <_printf_float+0x2e8>)
 800894e:	e7d1      	b.n	80088f4 <_printf_float+0x90>
 8008950:	6863      	ldr	r3, [r4, #4]
 8008952:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008956:	9206      	str	r2, [sp, #24]
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	d13f      	bne.n	80089dc <_printf_float+0x178>
 800895c:	2306      	movs	r3, #6
 800895e:	6063      	str	r3, [r4, #4]
 8008960:	9b05      	ldr	r3, [sp, #20]
 8008962:	6861      	ldr	r1, [r4, #4]
 8008964:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008968:	2300      	movs	r3, #0
 800896a:	9303      	str	r3, [sp, #12]
 800896c:	ab0a      	add	r3, sp, #40	; 0x28
 800896e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008972:	ab09      	add	r3, sp, #36	; 0x24
 8008974:	ec49 8b10 	vmov	d0, r8, r9
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	6022      	str	r2, [r4, #0]
 800897c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008980:	4628      	mov	r0, r5
 8008982:	f7ff fecf 	bl	8008724 <__cvt>
 8008986:	9b06      	ldr	r3, [sp, #24]
 8008988:	9909      	ldr	r1, [sp, #36]	; 0x24
 800898a:	2b47      	cmp	r3, #71	; 0x47
 800898c:	4680      	mov	r8, r0
 800898e:	d108      	bne.n	80089a2 <_printf_float+0x13e>
 8008990:	1cc8      	adds	r0, r1, #3
 8008992:	db02      	blt.n	800899a <_printf_float+0x136>
 8008994:	6863      	ldr	r3, [r4, #4]
 8008996:	4299      	cmp	r1, r3
 8008998:	dd41      	ble.n	8008a1e <_printf_float+0x1ba>
 800899a:	f1ab 0302 	sub.w	r3, fp, #2
 800899e:	fa5f fb83 	uxtb.w	fp, r3
 80089a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80089a6:	d820      	bhi.n	80089ea <_printf_float+0x186>
 80089a8:	3901      	subs	r1, #1
 80089aa:	465a      	mov	r2, fp
 80089ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80089b0:	9109      	str	r1, [sp, #36]	; 0x24
 80089b2:	f7ff ff19 	bl	80087e8 <__exponent>
 80089b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089b8:	1813      	adds	r3, r2, r0
 80089ba:	2a01      	cmp	r2, #1
 80089bc:	4681      	mov	r9, r0
 80089be:	6123      	str	r3, [r4, #16]
 80089c0:	dc02      	bgt.n	80089c8 <_printf_float+0x164>
 80089c2:	6822      	ldr	r2, [r4, #0]
 80089c4:	07d2      	lsls	r2, r2, #31
 80089c6:	d501      	bpl.n	80089cc <_printf_float+0x168>
 80089c8:	3301      	adds	r3, #1
 80089ca:	6123      	str	r3, [r4, #16]
 80089cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d09c      	beq.n	800890e <_printf_float+0xaa>
 80089d4:	232d      	movs	r3, #45	; 0x2d
 80089d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089da:	e798      	b.n	800890e <_printf_float+0xaa>
 80089dc:	9a06      	ldr	r2, [sp, #24]
 80089de:	2a47      	cmp	r2, #71	; 0x47
 80089e0:	d1be      	bne.n	8008960 <_printf_float+0xfc>
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1bc      	bne.n	8008960 <_printf_float+0xfc>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e7b9      	b.n	800895e <_printf_float+0xfa>
 80089ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80089ee:	d118      	bne.n	8008a22 <_printf_float+0x1be>
 80089f0:	2900      	cmp	r1, #0
 80089f2:	6863      	ldr	r3, [r4, #4]
 80089f4:	dd0b      	ble.n	8008a0e <_printf_float+0x1aa>
 80089f6:	6121      	str	r1, [r4, #16]
 80089f8:	b913      	cbnz	r3, 8008a00 <_printf_float+0x19c>
 80089fa:	6822      	ldr	r2, [r4, #0]
 80089fc:	07d0      	lsls	r0, r2, #31
 80089fe:	d502      	bpl.n	8008a06 <_printf_float+0x1a2>
 8008a00:	3301      	adds	r3, #1
 8008a02:	440b      	add	r3, r1
 8008a04:	6123      	str	r3, [r4, #16]
 8008a06:	65a1      	str	r1, [r4, #88]	; 0x58
 8008a08:	f04f 0900 	mov.w	r9, #0
 8008a0c:	e7de      	b.n	80089cc <_printf_float+0x168>
 8008a0e:	b913      	cbnz	r3, 8008a16 <_printf_float+0x1b2>
 8008a10:	6822      	ldr	r2, [r4, #0]
 8008a12:	07d2      	lsls	r2, r2, #31
 8008a14:	d501      	bpl.n	8008a1a <_printf_float+0x1b6>
 8008a16:	3302      	adds	r3, #2
 8008a18:	e7f4      	b.n	8008a04 <_printf_float+0x1a0>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e7f2      	b.n	8008a04 <_printf_float+0x1a0>
 8008a1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a24:	4299      	cmp	r1, r3
 8008a26:	db05      	blt.n	8008a34 <_printf_float+0x1d0>
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	6121      	str	r1, [r4, #16]
 8008a2c:	07d8      	lsls	r0, r3, #31
 8008a2e:	d5ea      	bpl.n	8008a06 <_printf_float+0x1a2>
 8008a30:	1c4b      	adds	r3, r1, #1
 8008a32:	e7e7      	b.n	8008a04 <_printf_float+0x1a0>
 8008a34:	2900      	cmp	r1, #0
 8008a36:	bfd4      	ite	le
 8008a38:	f1c1 0202 	rsble	r2, r1, #2
 8008a3c:	2201      	movgt	r2, #1
 8008a3e:	4413      	add	r3, r2
 8008a40:	e7e0      	b.n	8008a04 <_printf_float+0x1a0>
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	055a      	lsls	r2, r3, #21
 8008a46:	d407      	bmi.n	8008a58 <_printf_float+0x1f4>
 8008a48:	6923      	ldr	r3, [r4, #16]
 8008a4a:	4642      	mov	r2, r8
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4628      	mov	r0, r5
 8008a50:	47b8      	blx	r7
 8008a52:	3001      	adds	r0, #1
 8008a54:	d12c      	bne.n	8008ab0 <_printf_float+0x24c>
 8008a56:	e764      	b.n	8008922 <_printf_float+0xbe>
 8008a58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a5c:	f240 80e0 	bls.w	8008c20 <_printf_float+0x3bc>
 8008a60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a64:	2200      	movs	r2, #0
 8008a66:	2300      	movs	r3, #0
 8008a68:	f7f8 f82e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d034      	beq.n	8008ada <_printf_float+0x276>
 8008a70:	4a37      	ldr	r2, [pc, #220]	; (8008b50 <_printf_float+0x2ec>)
 8008a72:	2301      	movs	r3, #1
 8008a74:	4631      	mov	r1, r6
 8008a76:	4628      	mov	r0, r5
 8008a78:	47b8      	blx	r7
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	f43f af51 	beq.w	8008922 <_printf_float+0xbe>
 8008a80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a84:	429a      	cmp	r2, r3
 8008a86:	db02      	blt.n	8008a8e <_printf_float+0x22a>
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	07d8      	lsls	r0, r3, #31
 8008a8c:	d510      	bpl.n	8008ab0 <_printf_float+0x24c>
 8008a8e:	ee18 3a10 	vmov	r3, s16
 8008a92:	4652      	mov	r2, sl
 8008a94:	4631      	mov	r1, r6
 8008a96:	4628      	mov	r0, r5
 8008a98:	47b8      	blx	r7
 8008a9a:	3001      	adds	r0, #1
 8008a9c:	f43f af41 	beq.w	8008922 <_printf_float+0xbe>
 8008aa0:	f04f 0800 	mov.w	r8, #0
 8008aa4:	f104 091a 	add.w	r9, r4, #26
 8008aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	4543      	cmp	r3, r8
 8008aae:	dc09      	bgt.n	8008ac4 <_printf_float+0x260>
 8008ab0:	6823      	ldr	r3, [r4, #0]
 8008ab2:	079b      	lsls	r3, r3, #30
 8008ab4:	f100 8107 	bmi.w	8008cc6 <_printf_float+0x462>
 8008ab8:	68e0      	ldr	r0, [r4, #12]
 8008aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008abc:	4298      	cmp	r0, r3
 8008abe:	bfb8      	it	lt
 8008ac0:	4618      	movlt	r0, r3
 8008ac2:	e730      	b.n	8008926 <_printf_float+0xc2>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	464a      	mov	r2, r9
 8008ac8:	4631      	mov	r1, r6
 8008aca:	4628      	mov	r0, r5
 8008acc:	47b8      	blx	r7
 8008ace:	3001      	adds	r0, #1
 8008ad0:	f43f af27 	beq.w	8008922 <_printf_float+0xbe>
 8008ad4:	f108 0801 	add.w	r8, r8, #1
 8008ad8:	e7e6      	b.n	8008aa8 <_printf_float+0x244>
 8008ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	dc39      	bgt.n	8008b54 <_printf_float+0x2f0>
 8008ae0:	4a1b      	ldr	r2, [pc, #108]	; (8008b50 <_printf_float+0x2ec>)
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b8      	blx	r7
 8008aea:	3001      	adds	r0, #1
 8008aec:	f43f af19 	beq.w	8008922 <_printf_float+0xbe>
 8008af0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008af4:	4313      	orrs	r3, r2
 8008af6:	d102      	bne.n	8008afe <_printf_float+0x29a>
 8008af8:	6823      	ldr	r3, [r4, #0]
 8008afa:	07d9      	lsls	r1, r3, #31
 8008afc:	d5d8      	bpl.n	8008ab0 <_printf_float+0x24c>
 8008afe:	ee18 3a10 	vmov	r3, s16
 8008b02:	4652      	mov	r2, sl
 8008b04:	4631      	mov	r1, r6
 8008b06:	4628      	mov	r0, r5
 8008b08:	47b8      	blx	r7
 8008b0a:	3001      	adds	r0, #1
 8008b0c:	f43f af09 	beq.w	8008922 <_printf_float+0xbe>
 8008b10:	f04f 0900 	mov.w	r9, #0
 8008b14:	f104 0a1a 	add.w	sl, r4, #26
 8008b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b1a:	425b      	negs	r3, r3
 8008b1c:	454b      	cmp	r3, r9
 8008b1e:	dc01      	bgt.n	8008b24 <_printf_float+0x2c0>
 8008b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b22:	e792      	b.n	8008a4a <_printf_float+0x1e6>
 8008b24:	2301      	movs	r3, #1
 8008b26:	4652      	mov	r2, sl
 8008b28:	4631      	mov	r1, r6
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	47b8      	blx	r7
 8008b2e:	3001      	adds	r0, #1
 8008b30:	f43f aef7 	beq.w	8008922 <_printf_float+0xbe>
 8008b34:	f109 0901 	add.w	r9, r9, #1
 8008b38:	e7ee      	b.n	8008b18 <_printf_float+0x2b4>
 8008b3a:	bf00      	nop
 8008b3c:	7fefffff 	.word	0x7fefffff
 8008b40:	0800b5f0 	.word	0x0800b5f0
 8008b44:	0800b5f4 	.word	0x0800b5f4
 8008b48:	0800b5f8 	.word	0x0800b5f8
 8008b4c:	0800b5fc 	.word	0x0800b5fc
 8008b50:	0800b600 	.word	0x0800b600
 8008b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	bfa8      	it	ge
 8008b5c:	461a      	movge	r2, r3
 8008b5e:	2a00      	cmp	r2, #0
 8008b60:	4691      	mov	r9, r2
 8008b62:	dc37      	bgt.n	8008bd4 <_printf_float+0x370>
 8008b64:	f04f 0b00 	mov.w	fp, #0
 8008b68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b6c:	f104 021a 	add.w	r2, r4, #26
 8008b70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b72:	9305      	str	r3, [sp, #20]
 8008b74:	eba3 0309 	sub.w	r3, r3, r9
 8008b78:	455b      	cmp	r3, fp
 8008b7a:	dc33      	bgt.n	8008be4 <_printf_float+0x380>
 8008b7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b80:	429a      	cmp	r2, r3
 8008b82:	db3b      	blt.n	8008bfc <_printf_float+0x398>
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	07da      	lsls	r2, r3, #31
 8008b88:	d438      	bmi.n	8008bfc <_printf_float+0x398>
 8008b8a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008b8e:	eba2 0903 	sub.w	r9, r2, r3
 8008b92:	9b05      	ldr	r3, [sp, #20]
 8008b94:	1ad2      	subs	r2, r2, r3
 8008b96:	4591      	cmp	r9, r2
 8008b98:	bfa8      	it	ge
 8008b9a:	4691      	movge	r9, r2
 8008b9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ba0:	dc35      	bgt.n	8008c0e <_printf_float+0x3aa>
 8008ba2:	f04f 0800 	mov.w	r8, #0
 8008ba6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008baa:	f104 0a1a 	add.w	sl, r4, #26
 8008bae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bb2:	1a9b      	subs	r3, r3, r2
 8008bb4:	eba3 0309 	sub.w	r3, r3, r9
 8008bb8:	4543      	cmp	r3, r8
 8008bba:	f77f af79 	ble.w	8008ab0 <_printf_float+0x24c>
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	4652      	mov	r2, sl
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	47b8      	blx	r7
 8008bc8:	3001      	adds	r0, #1
 8008bca:	f43f aeaa 	beq.w	8008922 <_printf_float+0xbe>
 8008bce:	f108 0801 	add.w	r8, r8, #1
 8008bd2:	e7ec      	b.n	8008bae <_printf_float+0x34a>
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	4631      	mov	r1, r6
 8008bd8:	4642      	mov	r2, r8
 8008bda:	4628      	mov	r0, r5
 8008bdc:	47b8      	blx	r7
 8008bde:	3001      	adds	r0, #1
 8008be0:	d1c0      	bne.n	8008b64 <_printf_float+0x300>
 8008be2:	e69e      	b.n	8008922 <_printf_float+0xbe>
 8008be4:	2301      	movs	r3, #1
 8008be6:	4631      	mov	r1, r6
 8008be8:	4628      	mov	r0, r5
 8008bea:	9205      	str	r2, [sp, #20]
 8008bec:	47b8      	blx	r7
 8008bee:	3001      	adds	r0, #1
 8008bf0:	f43f ae97 	beq.w	8008922 <_printf_float+0xbe>
 8008bf4:	9a05      	ldr	r2, [sp, #20]
 8008bf6:	f10b 0b01 	add.w	fp, fp, #1
 8008bfa:	e7b9      	b.n	8008b70 <_printf_float+0x30c>
 8008bfc:	ee18 3a10 	vmov	r3, s16
 8008c00:	4652      	mov	r2, sl
 8008c02:	4631      	mov	r1, r6
 8008c04:	4628      	mov	r0, r5
 8008c06:	47b8      	blx	r7
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d1be      	bne.n	8008b8a <_printf_float+0x326>
 8008c0c:	e689      	b.n	8008922 <_printf_float+0xbe>
 8008c0e:	9a05      	ldr	r2, [sp, #20]
 8008c10:	464b      	mov	r3, r9
 8008c12:	4442      	add	r2, r8
 8008c14:	4631      	mov	r1, r6
 8008c16:	4628      	mov	r0, r5
 8008c18:	47b8      	blx	r7
 8008c1a:	3001      	adds	r0, #1
 8008c1c:	d1c1      	bne.n	8008ba2 <_printf_float+0x33e>
 8008c1e:	e680      	b.n	8008922 <_printf_float+0xbe>
 8008c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c22:	2a01      	cmp	r2, #1
 8008c24:	dc01      	bgt.n	8008c2a <_printf_float+0x3c6>
 8008c26:	07db      	lsls	r3, r3, #31
 8008c28:	d53a      	bpl.n	8008ca0 <_printf_float+0x43c>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	4642      	mov	r2, r8
 8008c2e:	4631      	mov	r1, r6
 8008c30:	4628      	mov	r0, r5
 8008c32:	47b8      	blx	r7
 8008c34:	3001      	adds	r0, #1
 8008c36:	f43f ae74 	beq.w	8008922 <_printf_float+0xbe>
 8008c3a:	ee18 3a10 	vmov	r3, s16
 8008c3e:	4652      	mov	r2, sl
 8008c40:	4631      	mov	r1, r6
 8008c42:	4628      	mov	r0, r5
 8008c44:	47b8      	blx	r7
 8008c46:	3001      	adds	r0, #1
 8008c48:	f43f ae6b 	beq.w	8008922 <_printf_float+0xbe>
 8008c4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c50:	2200      	movs	r2, #0
 8008c52:	2300      	movs	r3, #0
 8008c54:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008c58:	f7f7 ff36 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c5c:	b9d8      	cbnz	r0, 8008c96 <_printf_float+0x432>
 8008c5e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008c62:	f108 0201 	add.w	r2, r8, #1
 8008c66:	4631      	mov	r1, r6
 8008c68:	4628      	mov	r0, r5
 8008c6a:	47b8      	blx	r7
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	d10e      	bne.n	8008c8e <_printf_float+0x42a>
 8008c70:	e657      	b.n	8008922 <_printf_float+0xbe>
 8008c72:	2301      	movs	r3, #1
 8008c74:	4652      	mov	r2, sl
 8008c76:	4631      	mov	r1, r6
 8008c78:	4628      	mov	r0, r5
 8008c7a:	47b8      	blx	r7
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	f43f ae50 	beq.w	8008922 <_printf_float+0xbe>
 8008c82:	f108 0801 	add.w	r8, r8, #1
 8008c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	4543      	cmp	r3, r8
 8008c8c:	dcf1      	bgt.n	8008c72 <_printf_float+0x40e>
 8008c8e:	464b      	mov	r3, r9
 8008c90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008c94:	e6da      	b.n	8008a4c <_printf_float+0x1e8>
 8008c96:	f04f 0800 	mov.w	r8, #0
 8008c9a:	f104 0a1a 	add.w	sl, r4, #26
 8008c9e:	e7f2      	b.n	8008c86 <_printf_float+0x422>
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	4642      	mov	r2, r8
 8008ca4:	e7df      	b.n	8008c66 <_printf_float+0x402>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	464a      	mov	r2, r9
 8008caa:	4631      	mov	r1, r6
 8008cac:	4628      	mov	r0, r5
 8008cae:	47b8      	blx	r7
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	f43f ae36 	beq.w	8008922 <_printf_float+0xbe>
 8008cb6:	f108 0801 	add.w	r8, r8, #1
 8008cba:	68e3      	ldr	r3, [r4, #12]
 8008cbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008cbe:	1a5b      	subs	r3, r3, r1
 8008cc0:	4543      	cmp	r3, r8
 8008cc2:	dcf0      	bgt.n	8008ca6 <_printf_float+0x442>
 8008cc4:	e6f8      	b.n	8008ab8 <_printf_float+0x254>
 8008cc6:	f04f 0800 	mov.w	r8, #0
 8008cca:	f104 0919 	add.w	r9, r4, #25
 8008cce:	e7f4      	b.n	8008cba <_printf_float+0x456>

08008cd0 <_printf_common>:
 8008cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd4:	4616      	mov	r6, r2
 8008cd6:	4699      	mov	r9, r3
 8008cd8:	688a      	ldr	r2, [r1, #8]
 8008cda:	690b      	ldr	r3, [r1, #16]
 8008cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	bfb8      	it	lt
 8008ce4:	4613      	movlt	r3, r2
 8008ce6:	6033      	str	r3, [r6, #0]
 8008ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cec:	4607      	mov	r7, r0
 8008cee:	460c      	mov	r4, r1
 8008cf0:	b10a      	cbz	r2, 8008cf6 <_printf_common+0x26>
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	6033      	str	r3, [r6, #0]
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	0699      	lsls	r1, r3, #26
 8008cfa:	bf42      	ittt	mi
 8008cfc:	6833      	ldrmi	r3, [r6, #0]
 8008cfe:	3302      	addmi	r3, #2
 8008d00:	6033      	strmi	r3, [r6, #0]
 8008d02:	6825      	ldr	r5, [r4, #0]
 8008d04:	f015 0506 	ands.w	r5, r5, #6
 8008d08:	d106      	bne.n	8008d18 <_printf_common+0x48>
 8008d0a:	f104 0a19 	add.w	sl, r4, #25
 8008d0e:	68e3      	ldr	r3, [r4, #12]
 8008d10:	6832      	ldr	r2, [r6, #0]
 8008d12:	1a9b      	subs	r3, r3, r2
 8008d14:	42ab      	cmp	r3, r5
 8008d16:	dc26      	bgt.n	8008d66 <_printf_common+0x96>
 8008d18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d1c:	1e13      	subs	r3, r2, #0
 8008d1e:	6822      	ldr	r2, [r4, #0]
 8008d20:	bf18      	it	ne
 8008d22:	2301      	movne	r3, #1
 8008d24:	0692      	lsls	r2, r2, #26
 8008d26:	d42b      	bmi.n	8008d80 <_printf_common+0xb0>
 8008d28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d2c:	4649      	mov	r1, r9
 8008d2e:	4638      	mov	r0, r7
 8008d30:	47c0      	blx	r8
 8008d32:	3001      	adds	r0, #1
 8008d34:	d01e      	beq.n	8008d74 <_printf_common+0xa4>
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	6922      	ldr	r2, [r4, #16]
 8008d3a:	f003 0306 	and.w	r3, r3, #6
 8008d3e:	2b04      	cmp	r3, #4
 8008d40:	bf02      	ittt	eq
 8008d42:	68e5      	ldreq	r5, [r4, #12]
 8008d44:	6833      	ldreq	r3, [r6, #0]
 8008d46:	1aed      	subeq	r5, r5, r3
 8008d48:	68a3      	ldr	r3, [r4, #8]
 8008d4a:	bf0c      	ite	eq
 8008d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d50:	2500      	movne	r5, #0
 8008d52:	4293      	cmp	r3, r2
 8008d54:	bfc4      	itt	gt
 8008d56:	1a9b      	subgt	r3, r3, r2
 8008d58:	18ed      	addgt	r5, r5, r3
 8008d5a:	2600      	movs	r6, #0
 8008d5c:	341a      	adds	r4, #26
 8008d5e:	42b5      	cmp	r5, r6
 8008d60:	d11a      	bne.n	8008d98 <_printf_common+0xc8>
 8008d62:	2000      	movs	r0, #0
 8008d64:	e008      	b.n	8008d78 <_printf_common+0xa8>
 8008d66:	2301      	movs	r3, #1
 8008d68:	4652      	mov	r2, sl
 8008d6a:	4649      	mov	r1, r9
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	47c0      	blx	r8
 8008d70:	3001      	adds	r0, #1
 8008d72:	d103      	bne.n	8008d7c <_printf_common+0xac>
 8008d74:	f04f 30ff 	mov.w	r0, #4294967295
 8008d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d7c:	3501      	adds	r5, #1
 8008d7e:	e7c6      	b.n	8008d0e <_printf_common+0x3e>
 8008d80:	18e1      	adds	r1, r4, r3
 8008d82:	1c5a      	adds	r2, r3, #1
 8008d84:	2030      	movs	r0, #48	; 0x30
 8008d86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d8a:	4422      	add	r2, r4
 8008d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d94:	3302      	adds	r3, #2
 8008d96:	e7c7      	b.n	8008d28 <_printf_common+0x58>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	4622      	mov	r2, r4
 8008d9c:	4649      	mov	r1, r9
 8008d9e:	4638      	mov	r0, r7
 8008da0:	47c0      	blx	r8
 8008da2:	3001      	adds	r0, #1
 8008da4:	d0e6      	beq.n	8008d74 <_printf_common+0xa4>
 8008da6:	3601      	adds	r6, #1
 8008da8:	e7d9      	b.n	8008d5e <_printf_common+0x8e>
	...

08008dac <_printf_i>:
 8008dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008db0:	7e0f      	ldrb	r7, [r1, #24]
 8008db2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008db4:	2f78      	cmp	r7, #120	; 0x78
 8008db6:	4691      	mov	r9, r2
 8008db8:	4680      	mov	r8, r0
 8008dba:	460c      	mov	r4, r1
 8008dbc:	469a      	mov	sl, r3
 8008dbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008dc2:	d807      	bhi.n	8008dd4 <_printf_i+0x28>
 8008dc4:	2f62      	cmp	r7, #98	; 0x62
 8008dc6:	d80a      	bhi.n	8008dde <_printf_i+0x32>
 8008dc8:	2f00      	cmp	r7, #0
 8008dca:	f000 80d4 	beq.w	8008f76 <_printf_i+0x1ca>
 8008dce:	2f58      	cmp	r7, #88	; 0x58
 8008dd0:	f000 80c0 	beq.w	8008f54 <_printf_i+0x1a8>
 8008dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ddc:	e03a      	b.n	8008e54 <_printf_i+0xa8>
 8008dde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008de2:	2b15      	cmp	r3, #21
 8008de4:	d8f6      	bhi.n	8008dd4 <_printf_i+0x28>
 8008de6:	a101      	add	r1, pc, #4	; (adr r1, 8008dec <_printf_i+0x40>)
 8008de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dec:	08008e45 	.word	0x08008e45
 8008df0:	08008e59 	.word	0x08008e59
 8008df4:	08008dd5 	.word	0x08008dd5
 8008df8:	08008dd5 	.word	0x08008dd5
 8008dfc:	08008dd5 	.word	0x08008dd5
 8008e00:	08008dd5 	.word	0x08008dd5
 8008e04:	08008e59 	.word	0x08008e59
 8008e08:	08008dd5 	.word	0x08008dd5
 8008e0c:	08008dd5 	.word	0x08008dd5
 8008e10:	08008dd5 	.word	0x08008dd5
 8008e14:	08008dd5 	.word	0x08008dd5
 8008e18:	08008f5d 	.word	0x08008f5d
 8008e1c:	08008e85 	.word	0x08008e85
 8008e20:	08008f17 	.word	0x08008f17
 8008e24:	08008dd5 	.word	0x08008dd5
 8008e28:	08008dd5 	.word	0x08008dd5
 8008e2c:	08008f7f 	.word	0x08008f7f
 8008e30:	08008dd5 	.word	0x08008dd5
 8008e34:	08008e85 	.word	0x08008e85
 8008e38:	08008dd5 	.word	0x08008dd5
 8008e3c:	08008dd5 	.word	0x08008dd5
 8008e40:	08008f1f 	.word	0x08008f1f
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	1d1a      	adds	r2, r3, #4
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	602a      	str	r2, [r5, #0]
 8008e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e54:	2301      	movs	r3, #1
 8008e56:	e09f      	b.n	8008f98 <_printf_i+0x1ec>
 8008e58:	6820      	ldr	r0, [r4, #0]
 8008e5a:	682b      	ldr	r3, [r5, #0]
 8008e5c:	0607      	lsls	r7, r0, #24
 8008e5e:	f103 0104 	add.w	r1, r3, #4
 8008e62:	6029      	str	r1, [r5, #0]
 8008e64:	d501      	bpl.n	8008e6a <_printf_i+0xbe>
 8008e66:	681e      	ldr	r6, [r3, #0]
 8008e68:	e003      	b.n	8008e72 <_printf_i+0xc6>
 8008e6a:	0646      	lsls	r6, r0, #25
 8008e6c:	d5fb      	bpl.n	8008e66 <_printf_i+0xba>
 8008e6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008e72:	2e00      	cmp	r6, #0
 8008e74:	da03      	bge.n	8008e7e <_printf_i+0xd2>
 8008e76:	232d      	movs	r3, #45	; 0x2d
 8008e78:	4276      	negs	r6, r6
 8008e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e7e:	485a      	ldr	r0, [pc, #360]	; (8008fe8 <_printf_i+0x23c>)
 8008e80:	230a      	movs	r3, #10
 8008e82:	e012      	b.n	8008eaa <_printf_i+0xfe>
 8008e84:	682b      	ldr	r3, [r5, #0]
 8008e86:	6820      	ldr	r0, [r4, #0]
 8008e88:	1d19      	adds	r1, r3, #4
 8008e8a:	6029      	str	r1, [r5, #0]
 8008e8c:	0605      	lsls	r5, r0, #24
 8008e8e:	d501      	bpl.n	8008e94 <_printf_i+0xe8>
 8008e90:	681e      	ldr	r6, [r3, #0]
 8008e92:	e002      	b.n	8008e9a <_printf_i+0xee>
 8008e94:	0641      	lsls	r1, r0, #25
 8008e96:	d5fb      	bpl.n	8008e90 <_printf_i+0xe4>
 8008e98:	881e      	ldrh	r6, [r3, #0]
 8008e9a:	4853      	ldr	r0, [pc, #332]	; (8008fe8 <_printf_i+0x23c>)
 8008e9c:	2f6f      	cmp	r7, #111	; 0x6f
 8008e9e:	bf0c      	ite	eq
 8008ea0:	2308      	moveq	r3, #8
 8008ea2:	230a      	movne	r3, #10
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008eaa:	6865      	ldr	r5, [r4, #4]
 8008eac:	60a5      	str	r5, [r4, #8]
 8008eae:	2d00      	cmp	r5, #0
 8008eb0:	bfa2      	ittt	ge
 8008eb2:	6821      	ldrge	r1, [r4, #0]
 8008eb4:	f021 0104 	bicge.w	r1, r1, #4
 8008eb8:	6021      	strge	r1, [r4, #0]
 8008eba:	b90e      	cbnz	r6, 8008ec0 <_printf_i+0x114>
 8008ebc:	2d00      	cmp	r5, #0
 8008ebe:	d04b      	beq.n	8008f58 <_printf_i+0x1ac>
 8008ec0:	4615      	mov	r5, r2
 8008ec2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ec6:	fb03 6711 	mls	r7, r3, r1, r6
 8008eca:	5dc7      	ldrb	r7, [r0, r7]
 8008ecc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ed0:	4637      	mov	r7, r6
 8008ed2:	42bb      	cmp	r3, r7
 8008ed4:	460e      	mov	r6, r1
 8008ed6:	d9f4      	bls.n	8008ec2 <_printf_i+0x116>
 8008ed8:	2b08      	cmp	r3, #8
 8008eda:	d10b      	bne.n	8008ef4 <_printf_i+0x148>
 8008edc:	6823      	ldr	r3, [r4, #0]
 8008ede:	07de      	lsls	r6, r3, #31
 8008ee0:	d508      	bpl.n	8008ef4 <_printf_i+0x148>
 8008ee2:	6923      	ldr	r3, [r4, #16]
 8008ee4:	6861      	ldr	r1, [r4, #4]
 8008ee6:	4299      	cmp	r1, r3
 8008ee8:	bfde      	ittt	le
 8008eea:	2330      	movle	r3, #48	; 0x30
 8008eec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ef0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ef4:	1b52      	subs	r2, r2, r5
 8008ef6:	6122      	str	r2, [r4, #16]
 8008ef8:	f8cd a000 	str.w	sl, [sp]
 8008efc:	464b      	mov	r3, r9
 8008efe:	aa03      	add	r2, sp, #12
 8008f00:	4621      	mov	r1, r4
 8008f02:	4640      	mov	r0, r8
 8008f04:	f7ff fee4 	bl	8008cd0 <_printf_common>
 8008f08:	3001      	adds	r0, #1
 8008f0a:	d14a      	bne.n	8008fa2 <_printf_i+0x1f6>
 8008f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f10:	b004      	add	sp, #16
 8008f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	f043 0320 	orr.w	r3, r3, #32
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	4833      	ldr	r0, [pc, #204]	; (8008fec <_printf_i+0x240>)
 8008f20:	2778      	movs	r7, #120	; 0x78
 8008f22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f26:	6823      	ldr	r3, [r4, #0]
 8008f28:	6829      	ldr	r1, [r5, #0]
 8008f2a:	061f      	lsls	r7, r3, #24
 8008f2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f30:	d402      	bmi.n	8008f38 <_printf_i+0x18c>
 8008f32:	065f      	lsls	r7, r3, #25
 8008f34:	bf48      	it	mi
 8008f36:	b2b6      	uxthmi	r6, r6
 8008f38:	07df      	lsls	r7, r3, #31
 8008f3a:	bf48      	it	mi
 8008f3c:	f043 0320 	orrmi.w	r3, r3, #32
 8008f40:	6029      	str	r1, [r5, #0]
 8008f42:	bf48      	it	mi
 8008f44:	6023      	strmi	r3, [r4, #0]
 8008f46:	b91e      	cbnz	r6, 8008f50 <_printf_i+0x1a4>
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	f023 0320 	bic.w	r3, r3, #32
 8008f4e:	6023      	str	r3, [r4, #0]
 8008f50:	2310      	movs	r3, #16
 8008f52:	e7a7      	b.n	8008ea4 <_printf_i+0xf8>
 8008f54:	4824      	ldr	r0, [pc, #144]	; (8008fe8 <_printf_i+0x23c>)
 8008f56:	e7e4      	b.n	8008f22 <_printf_i+0x176>
 8008f58:	4615      	mov	r5, r2
 8008f5a:	e7bd      	b.n	8008ed8 <_printf_i+0x12c>
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	6826      	ldr	r6, [r4, #0]
 8008f60:	6961      	ldr	r1, [r4, #20]
 8008f62:	1d18      	adds	r0, r3, #4
 8008f64:	6028      	str	r0, [r5, #0]
 8008f66:	0635      	lsls	r5, r6, #24
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	d501      	bpl.n	8008f70 <_printf_i+0x1c4>
 8008f6c:	6019      	str	r1, [r3, #0]
 8008f6e:	e002      	b.n	8008f76 <_printf_i+0x1ca>
 8008f70:	0670      	lsls	r0, r6, #25
 8008f72:	d5fb      	bpl.n	8008f6c <_printf_i+0x1c0>
 8008f74:	8019      	strh	r1, [r3, #0]
 8008f76:	2300      	movs	r3, #0
 8008f78:	6123      	str	r3, [r4, #16]
 8008f7a:	4615      	mov	r5, r2
 8008f7c:	e7bc      	b.n	8008ef8 <_printf_i+0x14c>
 8008f7e:	682b      	ldr	r3, [r5, #0]
 8008f80:	1d1a      	adds	r2, r3, #4
 8008f82:	602a      	str	r2, [r5, #0]
 8008f84:	681d      	ldr	r5, [r3, #0]
 8008f86:	6862      	ldr	r2, [r4, #4]
 8008f88:	2100      	movs	r1, #0
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	f7f7 f920 	bl	80001d0 <memchr>
 8008f90:	b108      	cbz	r0, 8008f96 <_printf_i+0x1ea>
 8008f92:	1b40      	subs	r0, r0, r5
 8008f94:	6060      	str	r0, [r4, #4]
 8008f96:	6863      	ldr	r3, [r4, #4]
 8008f98:	6123      	str	r3, [r4, #16]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fa0:	e7aa      	b.n	8008ef8 <_printf_i+0x14c>
 8008fa2:	6923      	ldr	r3, [r4, #16]
 8008fa4:	462a      	mov	r2, r5
 8008fa6:	4649      	mov	r1, r9
 8008fa8:	4640      	mov	r0, r8
 8008faa:	47d0      	blx	sl
 8008fac:	3001      	adds	r0, #1
 8008fae:	d0ad      	beq.n	8008f0c <_printf_i+0x160>
 8008fb0:	6823      	ldr	r3, [r4, #0]
 8008fb2:	079b      	lsls	r3, r3, #30
 8008fb4:	d413      	bmi.n	8008fde <_printf_i+0x232>
 8008fb6:	68e0      	ldr	r0, [r4, #12]
 8008fb8:	9b03      	ldr	r3, [sp, #12]
 8008fba:	4298      	cmp	r0, r3
 8008fbc:	bfb8      	it	lt
 8008fbe:	4618      	movlt	r0, r3
 8008fc0:	e7a6      	b.n	8008f10 <_printf_i+0x164>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	4632      	mov	r2, r6
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	4640      	mov	r0, r8
 8008fca:	47d0      	blx	sl
 8008fcc:	3001      	adds	r0, #1
 8008fce:	d09d      	beq.n	8008f0c <_printf_i+0x160>
 8008fd0:	3501      	adds	r5, #1
 8008fd2:	68e3      	ldr	r3, [r4, #12]
 8008fd4:	9903      	ldr	r1, [sp, #12]
 8008fd6:	1a5b      	subs	r3, r3, r1
 8008fd8:	42ab      	cmp	r3, r5
 8008fda:	dcf2      	bgt.n	8008fc2 <_printf_i+0x216>
 8008fdc:	e7eb      	b.n	8008fb6 <_printf_i+0x20a>
 8008fde:	2500      	movs	r5, #0
 8008fe0:	f104 0619 	add.w	r6, r4, #25
 8008fe4:	e7f5      	b.n	8008fd2 <_printf_i+0x226>
 8008fe6:	bf00      	nop
 8008fe8:	0800b602 	.word	0x0800b602
 8008fec:	0800b613 	.word	0x0800b613

08008ff0 <std>:
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	b510      	push	{r4, lr}
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	e9c0 3300 	strd	r3, r3, [r0]
 8008ffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ffe:	6083      	str	r3, [r0, #8]
 8009000:	8181      	strh	r1, [r0, #12]
 8009002:	6643      	str	r3, [r0, #100]	; 0x64
 8009004:	81c2      	strh	r2, [r0, #14]
 8009006:	6183      	str	r3, [r0, #24]
 8009008:	4619      	mov	r1, r3
 800900a:	2208      	movs	r2, #8
 800900c:	305c      	adds	r0, #92	; 0x5c
 800900e:	f000 f914 	bl	800923a <memset>
 8009012:	4b0d      	ldr	r3, [pc, #52]	; (8009048 <std+0x58>)
 8009014:	6263      	str	r3, [r4, #36]	; 0x24
 8009016:	4b0d      	ldr	r3, [pc, #52]	; (800904c <std+0x5c>)
 8009018:	62a3      	str	r3, [r4, #40]	; 0x28
 800901a:	4b0d      	ldr	r3, [pc, #52]	; (8009050 <std+0x60>)
 800901c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800901e:	4b0d      	ldr	r3, [pc, #52]	; (8009054 <std+0x64>)
 8009020:	6323      	str	r3, [r4, #48]	; 0x30
 8009022:	4b0d      	ldr	r3, [pc, #52]	; (8009058 <std+0x68>)
 8009024:	6224      	str	r4, [r4, #32]
 8009026:	429c      	cmp	r4, r3
 8009028:	d006      	beq.n	8009038 <std+0x48>
 800902a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800902e:	4294      	cmp	r4, r2
 8009030:	d002      	beq.n	8009038 <std+0x48>
 8009032:	33d0      	adds	r3, #208	; 0xd0
 8009034:	429c      	cmp	r4, r3
 8009036:	d105      	bne.n	8009044 <std+0x54>
 8009038:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800903c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009040:	f000 b98e 	b.w	8009360 <__retarget_lock_init_recursive>
 8009044:	bd10      	pop	{r4, pc}
 8009046:	bf00      	nop
 8009048:	080091b5 	.word	0x080091b5
 800904c:	080091d7 	.word	0x080091d7
 8009050:	0800920f 	.word	0x0800920f
 8009054:	08009233 	.word	0x08009233
 8009058:	20000768 	.word	0x20000768

0800905c <stdio_exit_handler>:
 800905c:	4a02      	ldr	r2, [pc, #8]	; (8009068 <stdio_exit_handler+0xc>)
 800905e:	4903      	ldr	r1, [pc, #12]	; (800906c <stdio_exit_handler+0x10>)
 8009060:	4803      	ldr	r0, [pc, #12]	; (8009070 <stdio_exit_handler+0x14>)
 8009062:	f000 b869 	b.w	8009138 <_fwalk_sglue>
 8009066:	bf00      	nop
 8009068:	20000014 	.word	0x20000014
 800906c:	0800ad31 	.word	0x0800ad31
 8009070:	20000020 	.word	0x20000020

08009074 <cleanup_stdio>:
 8009074:	6841      	ldr	r1, [r0, #4]
 8009076:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <cleanup_stdio+0x34>)
 8009078:	4299      	cmp	r1, r3
 800907a:	b510      	push	{r4, lr}
 800907c:	4604      	mov	r4, r0
 800907e:	d001      	beq.n	8009084 <cleanup_stdio+0x10>
 8009080:	f001 fe56 	bl	800ad30 <_fflush_r>
 8009084:	68a1      	ldr	r1, [r4, #8]
 8009086:	4b09      	ldr	r3, [pc, #36]	; (80090ac <cleanup_stdio+0x38>)
 8009088:	4299      	cmp	r1, r3
 800908a:	d002      	beq.n	8009092 <cleanup_stdio+0x1e>
 800908c:	4620      	mov	r0, r4
 800908e:	f001 fe4f 	bl	800ad30 <_fflush_r>
 8009092:	68e1      	ldr	r1, [r4, #12]
 8009094:	4b06      	ldr	r3, [pc, #24]	; (80090b0 <cleanup_stdio+0x3c>)
 8009096:	4299      	cmp	r1, r3
 8009098:	d004      	beq.n	80090a4 <cleanup_stdio+0x30>
 800909a:	4620      	mov	r0, r4
 800909c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090a0:	f001 be46 	b.w	800ad30 <_fflush_r>
 80090a4:	bd10      	pop	{r4, pc}
 80090a6:	bf00      	nop
 80090a8:	20000768 	.word	0x20000768
 80090ac:	200007d0 	.word	0x200007d0
 80090b0:	20000838 	.word	0x20000838

080090b4 <global_stdio_init.part.0>:
 80090b4:	b510      	push	{r4, lr}
 80090b6:	4b0b      	ldr	r3, [pc, #44]	; (80090e4 <global_stdio_init.part.0+0x30>)
 80090b8:	4c0b      	ldr	r4, [pc, #44]	; (80090e8 <global_stdio_init.part.0+0x34>)
 80090ba:	4a0c      	ldr	r2, [pc, #48]	; (80090ec <global_stdio_init.part.0+0x38>)
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	4620      	mov	r0, r4
 80090c0:	2200      	movs	r2, #0
 80090c2:	2104      	movs	r1, #4
 80090c4:	f7ff ff94 	bl	8008ff0 <std>
 80090c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80090cc:	2201      	movs	r2, #1
 80090ce:	2109      	movs	r1, #9
 80090d0:	f7ff ff8e 	bl	8008ff0 <std>
 80090d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80090d8:	2202      	movs	r2, #2
 80090da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090de:	2112      	movs	r1, #18
 80090e0:	f7ff bf86 	b.w	8008ff0 <std>
 80090e4:	200008a0 	.word	0x200008a0
 80090e8:	20000768 	.word	0x20000768
 80090ec:	0800905d 	.word	0x0800905d

080090f0 <__sfp_lock_acquire>:
 80090f0:	4801      	ldr	r0, [pc, #4]	; (80090f8 <__sfp_lock_acquire+0x8>)
 80090f2:	f000 b936 	b.w	8009362 <__retarget_lock_acquire_recursive>
 80090f6:	bf00      	nop
 80090f8:	200008a9 	.word	0x200008a9

080090fc <__sfp_lock_release>:
 80090fc:	4801      	ldr	r0, [pc, #4]	; (8009104 <__sfp_lock_release+0x8>)
 80090fe:	f000 b931 	b.w	8009364 <__retarget_lock_release_recursive>
 8009102:	bf00      	nop
 8009104:	200008a9 	.word	0x200008a9

08009108 <__sinit>:
 8009108:	b510      	push	{r4, lr}
 800910a:	4604      	mov	r4, r0
 800910c:	f7ff fff0 	bl	80090f0 <__sfp_lock_acquire>
 8009110:	6a23      	ldr	r3, [r4, #32]
 8009112:	b11b      	cbz	r3, 800911c <__sinit+0x14>
 8009114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009118:	f7ff bff0 	b.w	80090fc <__sfp_lock_release>
 800911c:	4b04      	ldr	r3, [pc, #16]	; (8009130 <__sinit+0x28>)
 800911e:	6223      	str	r3, [r4, #32]
 8009120:	4b04      	ldr	r3, [pc, #16]	; (8009134 <__sinit+0x2c>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1f5      	bne.n	8009114 <__sinit+0xc>
 8009128:	f7ff ffc4 	bl	80090b4 <global_stdio_init.part.0>
 800912c:	e7f2      	b.n	8009114 <__sinit+0xc>
 800912e:	bf00      	nop
 8009130:	08009075 	.word	0x08009075
 8009134:	200008a0 	.word	0x200008a0

08009138 <_fwalk_sglue>:
 8009138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800913c:	4607      	mov	r7, r0
 800913e:	4688      	mov	r8, r1
 8009140:	4614      	mov	r4, r2
 8009142:	2600      	movs	r6, #0
 8009144:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009148:	f1b9 0901 	subs.w	r9, r9, #1
 800914c:	d505      	bpl.n	800915a <_fwalk_sglue+0x22>
 800914e:	6824      	ldr	r4, [r4, #0]
 8009150:	2c00      	cmp	r4, #0
 8009152:	d1f7      	bne.n	8009144 <_fwalk_sglue+0xc>
 8009154:	4630      	mov	r0, r6
 8009156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800915a:	89ab      	ldrh	r3, [r5, #12]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d907      	bls.n	8009170 <_fwalk_sglue+0x38>
 8009160:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009164:	3301      	adds	r3, #1
 8009166:	d003      	beq.n	8009170 <_fwalk_sglue+0x38>
 8009168:	4629      	mov	r1, r5
 800916a:	4638      	mov	r0, r7
 800916c:	47c0      	blx	r8
 800916e:	4306      	orrs	r6, r0
 8009170:	3568      	adds	r5, #104	; 0x68
 8009172:	e7e9      	b.n	8009148 <_fwalk_sglue+0x10>

08009174 <siprintf>:
 8009174:	b40e      	push	{r1, r2, r3}
 8009176:	b500      	push	{lr}
 8009178:	b09c      	sub	sp, #112	; 0x70
 800917a:	ab1d      	add	r3, sp, #116	; 0x74
 800917c:	9002      	str	r0, [sp, #8]
 800917e:	9006      	str	r0, [sp, #24]
 8009180:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009184:	4809      	ldr	r0, [pc, #36]	; (80091ac <siprintf+0x38>)
 8009186:	9107      	str	r1, [sp, #28]
 8009188:	9104      	str	r1, [sp, #16]
 800918a:	4909      	ldr	r1, [pc, #36]	; (80091b0 <siprintf+0x3c>)
 800918c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009190:	9105      	str	r1, [sp, #20]
 8009192:	6800      	ldr	r0, [r0, #0]
 8009194:	9301      	str	r3, [sp, #4]
 8009196:	a902      	add	r1, sp, #8
 8009198:	f001 fc46 	bl	800aa28 <_svfiprintf_r>
 800919c:	9b02      	ldr	r3, [sp, #8]
 800919e:	2200      	movs	r2, #0
 80091a0:	701a      	strb	r2, [r3, #0]
 80091a2:	b01c      	add	sp, #112	; 0x70
 80091a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091a8:	b003      	add	sp, #12
 80091aa:	4770      	bx	lr
 80091ac:	2000006c 	.word	0x2000006c
 80091b0:	ffff0208 	.word	0xffff0208

080091b4 <__sread>:
 80091b4:	b510      	push	{r4, lr}
 80091b6:	460c      	mov	r4, r1
 80091b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091bc:	f000 f882 	bl	80092c4 <_read_r>
 80091c0:	2800      	cmp	r0, #0
 80091c2:	bfab      	itete	ge
 80091c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091c6:	89a3      	ldrhlt	r3, [r4, #12]
 80091c8:	181b      	addge	r3, r3, r0
 80091ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091ce:	bfac      	ite	ge
 80091d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80091d2:	81a3      	strhlt	r3, [r4, #12]
 80091d4:	bd10      	pop	{r4, pc}

080091d6 <__swrite>:
 80091d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091da:	461f      	mov	r7, r3
 80091dc:	898b      	ldrh	r3, [r1, #12]
 80091de:	05db      	lsls	r3, r3, #23
 80091e0:	4605      	mov	r5, r0
 80091e2:	460c      	mov	r4, r1
 80091e4:	4616      	mov	r6, r2
 80091e6:	d505      	bpl.n	80091f4 <__swrite+0x1e>
 80091e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ec:	2302      	movs	r3, #2
 80091ee:	2200      	movs	r2, #0
 80091f0:	f000 f856 	bl	80092a0 <_lseek_r>
 80091f4:	89a3      	ldrh	r3, [r4, #12]
 80091f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091fe:	81a3      	strh	r3, [r4, #12]
 8009200:	4632      	mov	r2, r6
 8009202:	463b      	mov	r3, r7
 8009204:	4628      	mov	r0, r5
 8009206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800920a:	f000 b86d 	b.w	80092e8 <_write_r>

0800920e <__sseek>:
 800920e:	b510      	push	{r4, lr}
 8009210:	460c      	mov	r4, r1
 8009212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009216:	f000 f843 	bl	80092a0 <_lseek_r>
 800921a:	1c43      	adds	r3, r0, #1
 800921c:	89a3      	ldrh	r3, [r4, #12]
 800921e:	bf15      	itete	ne
 8009220:	6560      	strne	r0, [r4, #84]	; 0x54
 8009222:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009226:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800922a:	81a3      	strheq	r3, [r4, #12]
 800922c:	bf18      	it	ne
 800922e:	81a3      	strhne	r3, [r4, #12]
 8009230:	bd10      	pop	{r4, pc}

08009232 <__sclose>:
 8009232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009236:	f000 b823 	b.w	8009280 <_close_r>

0800923a <memset>:
 800923a:	4402      	add	r2, r0
 800923c:	4603      	mov	r3, r0
 800923e:	4293      	cmp	r3, r2
 8009240:	d100      	bne.n	8009244 <memset+0xa>
 8009242:	4770      	bx	lr
 8009244:	f803 1b01 	strb.w	r1, [r3], #1
 8009248:	e7f9      	b.n	800923e <memset+0x4>

0800924a <strstr>:
 800924a:	780a      	ldrb	r2, [r1, #0]
 800924c:	b570      	push	{r4, r5, r6, lr}
 800924e:	b96a      	cbnz	r2, 800926c <strstr+0x22>
 8009250:	bd70      	pop	{r4, r5, r6, pc}
 8009252:	429a      	cmp	r2, r3
 8009254:	d109      	bne.n	800926a <strstr+0x20>
 8009256:	460c      	mov	r4, r1
 8009258:	4605      	mov	r5, r0
 800925a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800925e:	2b00      	cmp	r3, #0
 8009260:	d0f6      	beq.n	8009250 <strstr+0x6>
 8009262:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009266:	429e      	cmp	r6, r3
 8009268:	d0f7      	beq.n	800925a <strstr+0x10>
 800926a:	3001      	adds	r0, #1
 800926c:	7803      	ldrb	r3, [r0, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1ef      	bne.n	8009252 <strstr+0x8>
 8009272:	4618      	mov	r0, r3
 8009274:	e7ec      	b.n	8009250 <strstr+0x6>
	...

08009278 <_localeconv_r>:
 8009278:	4800      	ldr	r0, [pc, #0]	; (800927c <_localeconv_r+0x4>)
 800927a:	4770      	bx	lr
 800927c:	20000160 	.word	0x20000160

08009280 <_close_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4d06      	ldr	r5, [pc, #24]	; (800929c <_close_r+0x1c>)
 8009284:	2300      	movs	r3, #0
 8009286:	4604      	mov	r4, r0
 8009288:	4608      	mov	r0, r1
 800928a:	602b      	str	r3, [r5, #0]
 800928c:	f7f9 f967 	bl	800255e <_close>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d102      	bne.n	800929a <_close_r+0x1a>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	b103      	cbz	r3, 800929a <_close_r+0x1a>
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	200008a4 	.word	0x200008a4

080092a0 <_lseek_r>:
 80092a0:	b538      	push	{r3, r4, r5, lr}
 80092a2:	4d07      	ldr	r5, [pc, #28]	; (80092c0 <_lseek_r+0x20>)
 80092a4:	4604      	mov	r4, r0
 80092a6:	4608      	mov	r0, r1
 80092a8:	4611      	mov	r1, r2
 80092aa:	2200      	movs	r2, #0
 80092ac:	602a      	str	r2, [r5, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	f7f9 f97c 	bl	80025ac <_lseek>
 80092b4:	1c43      	adds	r3, r0, #1
 80092b6:	d102      	bne.n	80092be <_lseek_r+0x1e>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	b103      	cbz	r3, 80092be <_lseek_r+0x1e>
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	bd38      	pop	{r3, r4, r5, pc}
 80092c0:	200008a4 	.word	0x200008a4

080092c4 <_read_r>:
 80092c4:	b538      	push	{r3, r4, r5, lr}
 80092c6:	4d07      	ldr	r5, [pc, #28]	; (80092e4 <_read_r+0x20>)
 80092c8:	4604      	mov	r4, r0
 80092ca:	4608      	mov	r0, r1
 80092cc:	4611      	mov	r1, r2
 80092ce:	2200      	movs	r2, #0
 80092d0:	602a      	str	r2, [r5, #0]
 80092d2:	461a      	mov	r2, r3
 80092d4:	f7f9 f90a 	bl	80024ec <_read>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d102      	bne.n	80092e2 <_read_r+0x1e>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	b103      	cbz	r3, 80092e2 <_read_r+0x1e>
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	200008a4 	.word	0x200008a4

080092e8 <_write_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	4d07      	ldr	r5, [pc, #28]	; (8009308 <_write_r+0x20>)
 80092ec:	4604      	mov	r4, r0
 80092ee:	4608      	mov	r0, r1
 80092f0:	4611      	mov	r1, r2
 80092f2:	2200      	movs	r2, #0
 80092f4:	602a      	str	r2, [r5, #0]
 80092f6:	461a      	mov	r2, r3
 80092f8:	f7f9 f915 	bl	8002526 <_write>
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	d102      	bne.n	8009306 <_write_r+0x1e>
 8009300:	682b      	ldr	r3, [r5, #0]
 8009302:	b103      	cbz	r3, 8009306 <_write_r+0x1e>
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	bd38      	pop	{r3, r4, r5, pc}
 8009308:	200008a4 	.word	0x200008a4

0800930c <__errno>:
 800930c:	4b01      	ldr	r3, [pc, #4]	; (8009314 <__errno+0x8>)
 800930e:	6818      	ldr	r0, [r3, #0]
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	2000006c 	.word	0x2000006c

08009318 <__libc_init_array>:
 8009318:	b570      	push	{r4, r5, r6, lr}
 800931a:	4d0d      	ldr	r5, [pc, #52]	; (8009350 <__libc_init_array+0x38>)
 800931c:	4c0d      	ldr	r4, [pc, #52]	; (8009354 <__libc_init_array+0x3c>)
 800931e:	1b64      	subs	r4, r4, r5
 8009320:	10a4      	asrs	r4, r4, #2
 8009322:	2600      	movs	r6, #0
 8009324:	42a6      	cmp	r6, r4
 8009326:	d109      	bne.n	800933c <__libc_init_array+0x24>
 8009328:	4d0b      	ldr	r5, [pc, #44]	; (8009358 <__libc_init_array+0x40>)
 800932a:	4c0c      	ldr	r4, [pc, #48]	; (800935c <__libc_init_array+0x44>)
 800932c:	f002 f896 	bl	800b45c <_init>
 8009330:	1b64      	subs	r4, r4, r5
 8009332:	10a4      	asrs	r4, r4, #2
 8009334:	2600      	movs	r6, #0
 8009336:	42a6      	cmp	r6, r4
 8009338:	d105      	bne.n	8009346 <__libc_init_array+0x2e>
 800933a:	bd70      	pop	{r4, r5, r6, pc}
 800933c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009340:	4798      	blx	r3
 8009342:	3601      	adds	r6, #1
 8009344:	e7ee      	b.n	8009324 <__libc_init_array+0xc>
 8009346:	f855 3b04 	ldr.w	r3, [r5], #4
 800934a:	4798      	blx	r3
 800934c:	3601      	adds	r6, #1
 800934e:	e7f2      	b.n	8009336 <__libc_init_array+0x1e>
 8009350:	0800b96c 	.word	0x0800b96c
 8009354:	0800b96c 	.word	0x0800b96c
 8009358:	0800b96c 	.word	0x0800b96c
 800935c:	0800b970 	.word	0x0800b970

08009360 <__retarget_lock_init_recursive>:
 8009360:	4770      	bx	lr

08009362 <__retarget_lock_acquire_recursive>:
 8009362:	4770      	bx	lr

08009364 <__retarget_lock_release_recursive>:
 8009364:	4770      	bx	lr

08009366 <memcpy>:
 8009366:	440a      	add	r2, r1
 8009368:	4291      	cmp	r1, r2
 800936a:	f100 33ff 	add.w	r3, r0, #4294967295
 800936e:	d100      	bne.n	8009372 <memcpy+0xc>
 8009370:	4770      	bx	lr
 8009372:	b510      	push	{r4, lr}
 8009374:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009378:	f803 4f01 	strb.w	r4, [r3, #1]!
 800937c:	4291      	cmp	r1, r2
 800937e:	d1f9      	bne.n	8009374 <memcpy+0xe>
 8009380:	bd10      	pop	{r4, pc}

08009382 <quorem>:
 8009382:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009386:	6903      	ldr	r3, [r0, #16]
 8009388:	690c      	ldr	r4, [r1, #16]
 800938a:	42a3      	cmp	r3, r4
 800938c:	4607      	mov	r7, r0
 800938e:	db7e      	blt.n	800948e <quorem+0x10c>
 8009390:	3c01      	subs	r4, #1
 8009392:	f101 0814 	add.w	r8, r1, #20
 8009396:	f100 0514 	add.w	r5, r0, #20
 800939a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800939e:	9301      	str	r3, [sp, #4]
 80093a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093a8:	3301      	adds	r3, #1
 80093aa:	429a      	cmp	r2, r3
 80093ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80093b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80093b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80093b8:	d331      	bcc.n	800941e <quorem+0x9c>
 80093ba:	f04f 0e00 	mov.w	lr, #0
 80093be:	4640      	mov	r0, r8
 80093c0:	46ac      	mov	ip, r5
 80093c2:	46f2      	mov	sl, lr
 80093c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80093c8:	b293      	uxth	r3, r2
 80093ca:	fb06 e303 	mla	r3, r6, r3, lr
 80093ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80093d2:	0c1a      	lsrs	r2, r3, #16
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	ebaa 0303 	sub.w	r3, sl, r3
 80093da:	f8dc a000 	ldr.w	sl, [ip]
 80093de:	fa13 f38a 	uxtah	r3, r3, sl
 80093e2:	fb06 220e 	mla	r2, r6, lr, r2
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	9b00      	ldr	r3, [sp, #0]
 80093ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80093ee:	b292      	uxth	r2, r2
 80093f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80093f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80093fc:	4581      	cmp	r9, r0
 80093fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009402:	f84c 3b04 	str.w	r3, [ip], #4
 8009406:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800940a:	d2db      	bcs.n	80093c4 <quorem+0x42>
 800940c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009410:	b92b      	cbnz	r3, 800941e <quorem+0x9c>
 8009412:	9b01      	ldr	r3, [sp, #4]
 8009414:	3b04      	subs	r3, #4
 8009416:	429d      	cmp	r5, r3
 8009418:	461a      	mov	r2, r3
 800941a:	d32c      	bcc.n	8009476 <quorem+0xf4>
 800941c:	613c      	str	r4, [r7, #16]
 800941e:	4638      	mov	r0, r7
 8009420:	f001 f9a8 	bl	800a774 <__mcmp>
 8009424:	2800      	cmp	r0, #0
 8009426:	db22      	blt.n	800946e <quorem+0xec>
 8009428:	3601      	adds	r6, #1
 800942a:	4629      	mov	r1, r5
 800942c:	2000      	movs	r0, #0
 800942e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009432:	f8d1 c000 	ldr.w	ip, [r1]
 8009436:	b293      	uxth	r3, r2
 8009438:	1ac3      	subs	r3, r0, r3
 800943a:	0c12      	lsrs	r2, r2, #16
 800943c:	fa13 f38c 	uxtah	r3, r3, ip
 8009440:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009444:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009448:	b29b      	uxth	r3, r3
 800944a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800944e:	45c1      	cmp	r9, r8
 8009450:	f841 3b04 	str.w	r3, [r1], #4
 8009454:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009458:	d2e9      	bcs.n	800942e <quorem+0xac>
 800945a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800945e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009462:	b922      	cbnz	r2, 800946e <quorem+0xec>
 8009464:	3b04      	subs	r3, #4
 8009466:	429d      	cmp	r5, r3
 8009468:	461a      	mov	r2, r3
 800946a:	d30a      	bcc.n	8009482 <quorem+0x100>
 800946c:	613c      	str	r4, [r7, #16]
 800946e:	4630      	mov	r0, r6
 8009470:	b003      	add	sp, #12
 8009472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009476:	6812      	ldr	r2, [r2, #0]
 8009478:	3b04      	subs	r3, #4
 800947a:	2a00      	cmp	r2, #0
 800947c:	d1ce      	bne.n	800941c <quorem+0x9a>
 800947e:	3c01      	subs	r4, #1
 8009480:	e7c9      	b.n	8009416 <quorem+0x94>
 8009482:	6812      	ldr	r2, [r2, #0]
 8009484:	3b04      	subs	r3, #4
 8009486:	2a00      	cmp	r2, #0
 8009488:	d1f0      	bne.n	800946c <quorem+0xea>
 800948a:	3c01      	subs	r4, #1
 800948c:	e7eb      	b.n	8009466 <quorem+0xe4>
 800948e:	2000      	movs	r0, #0
 8009490:	e7ee      	b.n	8009470 <quorem+0xee>
 8009492:	0000      	movs	r0, r0
 8009494:	0000      	movs	r0, r0
	...

08009498 <_dtoa_r>:
 8009498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949c:	ed2d 8b04 	vpush	{d8-d9}
 80094a0:	69c5      	ldr	r5, [r0, #28]
 80094a2:	b093      	sub	sp, #76	; 0x4c
 80094a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80094a8:	ec57 6b10 	vmov	r6, r7, d0
 80094ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80094b0:	9107      	str	r1, [sp, #28]
 80094b2:	4604      	mov	r4, r0
 80094b4:	920a      	str	r2, [sp, #40]	; 0x28
 80094b6:	930d      	str	r3, [sp, #52]	; 0x34
 80094b8:	b975      	cbnz	r5, 80094d8 <_dtoa_r+0x40>
 80094ba:	2010      	movs	r0, #16
 80094bc:	f000 fe2a 	bl	800a114 <malloc>
 80094c0:	4602      	mov	r2, r0
 80094c2:	61e0      	str	r0, [r4, #28]
 80094c4:	b920      	cbnz	r0, 80094d0 <_dtoa_r+0x38>
 80094c6:	4bae      	ldr	r3, [pc, #696]	; (8009780 <_dtoa_r+0x2e8>)
 80094c8:	21ef      	movs	r1, #239	; 0xef
 80094ca:	48ae      	ldr	r0, [pc, #696]	; (8009784 <_dtoa_r+0x2ec>)
 80094cc:	f001 fc82 	bl	800add4 <__assert_func>
 80094d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80094d4:	6005      	str	r5, [r0, #0]
 80094d6:	60c5      	str	r5, [r0, #12]
 80094d8:	69e3      	ldr	r3, [r4, #28]
 80094da:	6819      	ldr	r1, [r3, #0]
 80094dc:	b151      	cbz	r1, 80094f4 <_dtoa_r+0x5c>
 80094de:	685a      	ldr	r2, [r3, #4]
 80094e0:	604a      	str	r2, [r1, #4]
 80094e2:	2301      	movs	r3, #1
 80094e4:	4093      	lsls	r3, r2
 80094e6:	608b      	str	r3, [r1, #8]
 80094e8:	4620      	mov	r0, r4
 80094ea:	f000 ff07 	bl	800a2fc <_Bfree>
 80094ee:	69e3      	ldr	r3, [r4, #28]
 80094f0:	2200      	movs	r2, #0
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	1e3b      	subs	r3, r7, #0
 80094f6:	bfbb      	ittet	lt
 80094f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80094fc:	9303      	strlt	r3, [sp, #12]
 80094fe:	2300      	movge	r3, #0
 8009500:	2201      	movlt	r2, #1
 8009502:	bfac      	ite	ge
 8009504:	f8c8 3000 	strge.w	r3, [r8]
 8009508:	f8c8 2000 	strlt.w	r2, [r8]
 800950c:	4b9e      	ldr	r3, [pc, #632]	; (8009788 <_dtoa_r+0x2f0>)
 800950e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009512:	ea33 0308 	bics.w	r3, r3, r8
 8009516:	d11b      	bne.n	8009550 <_dtoa_r+0xb8>
 8009518:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800951a:	f242 730f 	movw	r3, #9999	; 0x270f
 800951e:	6013      	str	r3, [r2, #0]
 8009520:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009524:	4333      	orrs	r3, r6
 8009526:	f000 8593 	beq.w	800a050 <_dtoa_r+0xbb8>
 800952a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800952c:	b963      	cbnz	r3, 8009548 <_dtoa_r+0xb0>
 800952e:	4b97      	ldr	r3, [pc, #604]	; (800978c <_dtoa_r+0x2f4>)
 8009530:	e027      	b.n	8009582 <_dtoa_r+0xea>
 8009532:	4b97      	ldr	r3, [pc, #604]	; (8009790 <_dtoa_r+0x2f8>)
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	3308      	adds	r3, #8
 8009538:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800953a:	6013      	str	r3, [r2, #0]
 800953c:	9800      	ldr	r0, [sp, #0]
 800953e:	b013      	add	sp, #76	; 0x4c
 8009540:	ecbd 8b04 	vpop	{d8-d9}
 8009544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009548:	4b90      	ldr	r3, [pc, #576]	; (800978c <_dtoa_r+0x2f4>)
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	3303      	adds	r3, #3
 800954e:	e7f3      	b.n	8009538 <_dtoa_r+0xa0>
 8009550:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009554:	2200      	movs	r2, #0
 8009556:	ec51 0b17 	vmov	r0, r1, d7
 800955a:	eeb0 8a47 	vmov.f32	s16, s14
 800955e:	eef0 8a67 	vmov.f32	s17, s15
 8009562:	2300      	movs	r3, #0
 8009564:	f7f7 fab0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009568:	4681      	mov	r9, r0
 800956a:	b160      	cbz	r0, 8009586 <_dtoa_r+0xee>
 800956c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800956e:	2301      	movs	r3, #1
 8009570:	6013      	str	r3, [r2, #0]
 8009572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009574:	2b00      	cmp	r3, #0
 8009576:	f000 8568 	beq.w	800a04a <_dtoa_r+0xbb2>
 800957a:	4b86      	ldr	r3, [pc, #536]	; (8009794 <_dtoa_r+0x2fc>)
 800957c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800957e:	6013      	str	r3, [r2, #0]
 8009580:	3b01      	subs	r3, #1
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	e7da      	b.n	800953c <_dtoa_r+0xa4>
 8009586:	aa10      	add	r2, sp, #64	; 0x40
 8009588:	a911      	add	r1, sp, #68	; 0x44
 800958a:	4620      	mov	r0, r4
 800958c:	eeb0 0a48 	vmov.f32	s0, s16
 8009590:	eef0 0a68 	vmov.f32	s1, s17
 8009594:	f001 f994 	bl	800a8c0 <__d2b>
 8009598:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800959c:	4682      	mov	sl, r0
 800959e:	2d00      	cmp	r5, #0
 80095a0:	d07f      	beq.n	80096a2 <_dtoa_r+0x20a>
 80095a2:	ee18 3a90 	vmov	r3, s17
 80095a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80095ae:	ec51 0b18 	vmov	r0, r1, d8
 80095b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80095b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80095ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80095be:	4619      	mov	r1, r3
 80095c0:	2200      	movs	r2, #0
 80095c2:	4b75      	ldr	r3, [pc, #468]	; (8009798 <_dtoa_r+0x300>)
 80095c4:	f7f6 fe60 	bl	8000288 <__aeabi_dsub>
 80095c8:	a367      	add	r3, pc, #412	; (adr r3, 8009768 <_dtoa_r+0x2d0>)
 80095ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ce:	f7f7 f813 	bl	80005f8 <__aeabi_dmul>
 80095d2:	a367      	add	r3, pc, #412	; (adr r3, 8009770 <_dtoa_r+0x2d8>)
 80095d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d8:	f7f6 fe58 	bl	800028c <__adddf3>
 80095dc:	4606      	mov	r6, r0
 80095de:	4628      	mov	r0, r5
 80095e0:	460f      	mov	r7, r1
 80095e2:	f7f6 ff9f 	bl	8000524 <__aeabi_i2d>
 80095e6:	a364      	add	r3, pc, #400	; (adr r3, 8009778 <_dtoa_r+0x2e0>)
 80095e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ec:	f7f7 f804 	bl	80005f8 <__aeabi_dmul>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	4630      	mov	r0, r6
 80095f6:	4639      	mov	r1, r7
 80095f8:	f7f6 fe48 	bl	800028c <__adddf3>
 80095fc:	4606      	mov	r6, r0
 80095fe:	460f      	mov	r7, r1
 8009600:	f7f7 faaa 	bl	8000b58 <__aeabi_d2iz>
 8009604:	2200      	movs	r2, #0
 8009606:	4683      	mov	fp, r0
 8009608:	2300      	movs	r3, #0
 800960a:	4630      	mov	r0, r6
 800960c:	4639      	mov	r1, r7
 800960e:	f7f7 fa65 	bl	8000adc <__aeabi_dcmplt>
 8009612:	b148      	cbz	r0, 8009628 <_dtoa_r+0x190>
 8009614:	4658      	mov	r0, fp
 8009616:	f7f6 ff85 	bl	8000524 <__aeabi_i2d>
 800961a:	4632      	mov	r2, r6
 800961c:	463b      	mov	r3, r7
 800961e:	f7f7 fa53 	bl	8000ac8 <__aeabi_dcmpeq>
 8009622:	b908      	cbnz	r0, 8009628 <_dtoa_r+0x190>
 8009624:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009628:	f1bb 0f16 	cmp.w	fp, #22
 800962c:	d857      	bhi.n	80096de <_dtoa_r+0x246>
 800962e:	4b5b      	ldr	r3, [pc, #364]	; (800979c <_dtoa_r+0x304>)
 8009630:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	ec51 0b18 	vmov	r0, r1, d8
 800963c:	f7f7 fa4e 	bl	8000adc <__aeabi_dcmplt>
 8009640:	2800      	cmp	r0, #0
 8009642:	d04e      	beq.n	80096e2 <_dtoa_r+0x24a>
 8009644:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009648:	2300      	movs	r3, #0
 800964a:	930c      	str	r3, [sp, #48]	; 0x30
 800964c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800964e:	1b5b      	subs	r3, r3, r5
 8009650:	1e5a      	subs	r2, r3, #1
 8009652:	bf45      	ittet	mi
 8009654:	f1c3 0301 	rsbmi	r3, r3, #1
 8009658:	9305      	strmi	r3, [sp, #20]
 800965a:	2300      	movpl	r3, #0
 800965c:	2300      	movmi	r3, #0
 800965e:	9206      	str	r2, [sp, #24]
 8009660:	bf54      	ite	pl
 8009662:	9305      	strpl	r3, [sp, #20]
 8009664:	9306      	strmi	r3, [sp, #24]
 8009666:	f1bb 0f00 	cmp.w	fp, #0
 800966a:	db3c      	blt.n	80096e6 <_dtoa_r+0x24e>
 800966c:	9b06      	ldr	r3, [sp, #24]
 800966e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009672:	445b      	add	r3, fp
 8009674:	9306      	str	r3, [sp, #24]
 8009676:	2300      	movs	r3, #0
 8009678:	9308      	str	r3, [sp, #32]
 800967a:	9b07      	ldr	r3, [sp, #28]
 800967c:	2b09      	cmp	r3, #9
 800967e:	d868      	bhi.n	8009752 <_dtoa_r+0x2ba>
 8009680:	2b05      	cmp	r3, #5
 8009682:	bfc4      	itt	gt
 8009684:	3b04      	subgt	r3, #4
 8009686:	9307      	strgt	r3, [sp, #28]
 8009688:	9b07      	ldr	r3, [sp, #28]
 800968a:	f1a3 0302 	sub.w	r3, r3, #2
 800968e:	bfcc      	ite	gt
 8009690:	2500      	movgt	r5, #0
 8009692:	2501      	movle	r5, #1
 8009694:	2b03      	cmp	r3, #3
 8009696:	f200 8085 	bhi.w	80097a4 <_dtoa_r+0x30c>
 800969a:	e8df f003 	tbb	[pc, r3]
 800969e:	3b2e      	.short	0x3b2e
 80096a0:	5839      	.short	0x5839
 80096a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80096a6:	441d      	add	r5, r3
 80096a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80096ac:	2b20      	cmp	r3, #32
 80096ae:	bfc1      	itttt	gt
 80096b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80096b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80096b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80096bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80096c0:	bfd6      	itet	le
 80096c2:	f1c3 0320 	rsble	r3, r3, #32
 80096c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80096ca:	fa06 f003 	lslle.w	r0, r6, r3
 80096ce:	f7f6 ff19 	bl	8000504 <__aeabi_ui2d>
 80096d2:	2201      	movs	r2, #1
 80096d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80096d8:	3d01      	subs	r5, #1
 80096da:	920e      	str	r2, [sp, #56]	; 0x38
 80096dc:	e76f      	b.n	80095be <_dtoa_r+0x126>
 80096de:	2301      	movs	r3, #1
 80096e0:	e7b3      	b.n	800964a <_dtoa_r+0x1b2>
 80096e2:	900c      	str	r0, [sp, #48]	; 0x30
 80096e4:	e7b2      	b.n	800964c <_dtoa_r+0x1b4>
 80096e6:	9b05      	ldr	r3, [sp, #20]
 80096e8:	eba3 030b 	sub.w	r3, r3, fp
 80096ec:	9305      	str	r3, [sp, #20]
 80096ee:	f1cb 0300 	rsb	r3, fp, #0
 80096f2:	9308      	str	r3, [sp, #32]
 80096f4:	2300      	movs	r3, #0
 80096f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80096f8:	e7bf      	b.n	800967a <_dtoa_r+0x1e2>
 80096fa:	2300      	movs	r3, #0
 80096fc:	9309      	str	r3, [sp, #36]	; 0x24
 80096fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009700:	2b00      	cmp	r3, #0
 8009702:	dc52      	bgt.n	80097aa <_dtoa_r+0x312>
 8009704:	2301      	movs	r3, #1
 8009706:	9301      	str	r3, [sp, #4]
 8009708:	9304      	str	r3, [sp, #16]
 800970a:	461a      	mov	r2, r3
 800970c:	920a      	str	r2, [sp, #40]	; 0x28
 800970e:	e00b      	b.n	8009728 <_dtoa_r+0x290>
 8009710:	2301      	movs	r3, #1
 8009712:	e7f3      	b.n	80096fc <_dtoa_r+0x264>
 8009714:	2300      	movs	r3, #0
 8009716:	9309      	str	r3, [sp, #36]	; 0x24
 8009718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800971a:	445b      	add	r3, fp
 800971c:	9301      	str	r3, [sp, #4]
 800971e:	3301      	adds	r3, #1
 8009720:	2b01      	cmp	r3, #1
 8009722:	9304      	str	r3, [sp, #16]
 8009724:	bfb8      	it	lt
 8009726:	2301      	movlt	r3, #1
 8009728:	69e0      	ldr	r0, [r4, #28]
 800972a:	2100      	movs	r1, #0
 800972c:	2204      	movs	r2, #4
 800972e:	f102 0614 	add.w	r6, r2, #20
 8009732:	429e      	cmp	r6, r3
 8009734:	d93d      	bls.n	80097b2 <_dtoa_r+0x31a>
 8009736:	6041      	str	r1, [r0, #4]
 8009738:	4620      	mov	r0, r4
 800973a:	f000 fd9f 	bl	800a27c <_Balloc>
 800973e:	9000      	str	r0, [sp, #0]
 8009740:	2800      	cmp	r0, #0
 8009742:	d139      	bne.n	80097b8 <_dtoa_r+0x320>
 8009744:	4b16      	ldr	r3, [pc, #88]	; (80097a0 <_dtoa_r+0x308>)
 8009746:	4602      	mov	r2, r0
 8009748:	f240 11af 	movw	r1, #431	; 0x1af
 800974c:	e6bd      	b.n	80094ca <_dtoa_r+0x32>
 800974e:	2301      	movs	r3, #1
 8009750:	e7e1      	b.n	8009716 <_dtoa_r+0x27e>
 8009752:	2501      	movs	r5, #1
 8009754:	2300      	movs	r3, #0
 8009756:	9307      	str	r3, [sp, #28]
 8009758:	9509      	str	r5, [sp, #36]	; 0x24
 800975a:	f04f 33ff 	mov.w	r3, #4294967295
 800975e:	9301      	str	r3, [sp, #4]
 8009760:	9304      	str	r3, [sp, #16]
 8009762:	2200      	movs	r2, #0
 8009764:	2312      	movs	r3, #18
 8009766:	e7d1      	b.n	800970c <_dtoa_r+0x274>
 8009768:	636f4361 	.word	0x636f4361
 800976c:	3fd287a7 	.word	0x3fd287a7
 8009770:	8b60c8b3 	.word	0x8b60c8b3
 8009774:	3fc68a28 	.word	0x3fc68a28
 8009778:	509f79fb 	.word	0x509f79fb
 800977c:	3fd34413 	.word	0x3fd34413
 8009780:	0800b631 	.word	0x0800b631
 8009784:	0800b648 	.word	0x0800b648
 8009788:	7ff00000 	.word	0x7ff00000
 800978c:	0800b62d 	.word	0x0800b62d
 8009790:	0800b624 	.word	0x0800b624
 8009794:	0800b601 	.word	0x0800b601
 8009798:	3ff80000 	.word	0x3ff80000
 800979c:	0800b738 	.word	0x0800b738
 80097a0:	0800b6a0 	.word	0x0800b6a0
 80097a4:	2301      	movs	r3, #1
 80097a6:	9309      	str	r3, [sp, #36]	; 0x24
 80097a8:	e7d7      	b.n	800975a <_dtoa_r+0x2c2>
 80097aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	9304      	str	r3, [sp, #16]
 80097b0:	e7ba      	b.n	8009728 <_dtoa_r+0x290>
 80097b2:	3101      	adds	r1, #1
 80097b4:	0052      	lsls	r2, r2, #1
 80097b6:	e7ba      	b.n	800972e <_dtoa_r+0x296>
 80097b8:	69e3      	ldr	r3, [r4, #28]
 80097ba:	9a00      	ldr	r2, [sp, #0]
 80097bc:	601a      	str	r2, [r3, #0]
 80097be:	9b04      	ldr	r3, [sp, #16]
 80097c0:	2b0e      	cmp	r3, #14
 80097c2:	f200 80a8 	bhi.w	8009916 <_dtoa_r+0x47e>
 80097c6:	2d00      	cmp	r5, #0
 80097c8:	f000 80a5 	beq.w	8009916 <_dtoa_r+0x47e>
 80097cc:	f1bb 0f00 	cmp.w	fp, #0
 80097d0:	dd38      	ble.n	8009844 <_dtoa_r+0x3ac>
 80097d2:	4bc0      	ldr	r3, [pc, #768]	; (8009ad4 <_dtoa_r+0x63c>)
 80097d4:	f00b 020f 	and.w	r2, fp, #15
 80097d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80097e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80097e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80097e8:	d019      	beq.n	800981e <_dtoa_r+0x386>
 80097ea:	4bbb      	ldr	r3, [pc, #748]	; (8009ad8 <_dtoa_r+0x640>)
 80097ec:	ec51 0b18 	vmov	r0, r1, d8
 80097f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097f4:	f7f7 f82a 	bl	800084c <__aeabi_ddiv>
 80097f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097fc:	f008 080f 	and.w	r8, r8, #15
 8009800:	2503      	movs	r5, #3
 8009802:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009ad8 <_dtoa_r+0x640>
 8009806:	f1b8 0f00 	cmp.w	r8, #0
 800980a:	d10a      	bne.n	8009822 <_dtoa_r+0x38a>
 800980c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009810:	4632      	mov	r2, r6
 8009812:	463b      	mov	r3, r7
 8009814:	f7f7 f81a 	bl	800084c <__aeabi_ddiv>
 8009818:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800981c:	e02b      	b.n	8009876 <_dtoa_r+0x3de>
 800981e:	2502      	movs	r5, #2
 8009820:	e7ef      	b.n	8009802 <_dtoa_r+0x36a>
 8009822:	f018 0f01 	tst.w	r8, #1
 8009826:	d008      	beq.n	800983a <_dtoa_r+0x3a2>
 8009828:	4630      	mov	r0, r6
 800982a:	4639      	mov	r1, r7
 800982c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009830:	f7f6 fee2 	bl	80005f8 <__aeabi_dmul>
 8009834:	3501      	adds	r5, #1
 8009836:	4606      	mov	r6, r0
 8009838:	460f      	mov	r7, r1
 800983a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800983e:	f109 0908 	add.w	r9, r9, #8
 8009842:	e7e0      	b.n	8009806 <_dtoa_r+0x36e>
 8009844:	f000 809f 	beq.w	8009986 <_dtoa_r+0x4ee>
 8009848:	f1cb 0600 	rsb	r6, fp, #0
 800984c:	4ba1      	ldr	r3, [pc, #644]	; (8009ad4 <_dtoa_r+0x63c>)
 800984e:	4fa2      	ldr	r7, [pc, #648]	; (8009ad8 <_dtoa_r+0x640>)
 8009850:	f006 020f 	and.w	r2, r6, #15
 8009854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985c:	ec51 0b18 	vmov	r0, r1, d8
 8009860:	f7f6 feca 	bl	80005f8 <__aeabi_dmul>
 8009864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009868:	1136      	asrs	r6, r6, #4
 800986a:	2300      	movs	r3, #0
 800986c:	2502      	movs	r5, #2
 800986e:	2e00      	cmp	r6, #0
 8009870:	d17e      	bne.n	8009970 <_dtoa_r+0x4d8>
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1d0      	bne.n	8009818 <_dtoa_r+0x380>
 8009876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009878:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 8084 	beq.w	800998a <_dtoa_r+0x4f2>
 8009882:	4b96      	ldr	r3, [pc, #600]	; (8009adc <_dtoa_r+0x644>)
 8009884:	2200      	movs	r2, #0
 8009886:	4640      	mov	r0, r8
 8009888:	4649      	mov	r1, r9
 800988a:	f7f7 f927 	bl	8000adc <__aeabi_dcmplt>
 800988e:	2800      	cmp	r0, #0
 8009890:	d07b      	beq.n	800998a <_dtoa_r+0x4f2>
 8009892:	9b04      	ldr	r3, [sp, #16]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d078      	beq.n	800998a <_dtoa_r+0x4f2>
 8009898:	9b01      	ldr	r3, [sp, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	dd39      	ble.n	8009912 <_dtoa_r+0x47a>
 800989e:	4b90      	ldr	r3, [pc, #576]	; (8009ae0 <_dtoa_r+0x648>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	4640      	mov	r0, r8
 80098a4:	4649      	mov	r1, r9
 80098a6:	f7f6 fea7 	bl	80005f8 <__aeabi_dmul>
 80098aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098ae:	9e01      	ldr	r6, [sp, #4]
 80098b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80098b4:	3501      	adds	r5, #1
 80098b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80098ba:	4628      	mov	r0, r5
 80098bc:	f7f6 fe32 	bl	8000524 <__aeabi_i2d>
 80098c0:	4642      	mov	r2, r8
 80098c2:	464b      	mov	r3, r9
 80098c4:	f7f6 fe98 	bl	80005f8 <__aeabi_dmul>
 80098c8:	4b86      	ldr	r3, [pc, #536]	; (8009ae4 <_dtoa_r+0x64c>)
 80098ca:	2200      	movs	r2, #0
 80098cc:	f7f6 fcde 	bl	800028c <__adddf3>
 80098d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80098d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098d8:	9303      	str	r3, [sp, #12]
 80098da:	2e00      	cmp	r6, #0
 80098dc:	d158      	bne.n	8009990 <_dtoa_r+0x4f8>
 80098de:	4b82      	ldr	r3, [pc, #520]	; (8009ae8 <_dtoa_r+0x650>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	4640      	mov	r0, r8
 80098e4:	4649      	mov	r1, r9
 80098e6:	f7f6 fccf 	bl	8000288 <__aeabi_dsub>
 80098ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098ee:	4680      	mov	r8, r0
 80098f0:	4689      	mov	r9, r1
 80098f2:	f7f7 f911 	bl	8000b18 <__aeabi_dcmpgt>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	f040 8296 	bne.w	8009e28 <_dtoa_r+0x990>
 80098fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009900:	4640      	mov	r0, r8
 8009902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009906:	4649      	mov	r1, r9
 8009908:	f7f7 f8e8 	bl	8000adc <__aeabi_dcmplt>
 800990c:	2800      	cmp	r0, #0
 800990e:	f040 8289 	bne.w	8009e24 <_dtoa_r+0x98c>
 8009912:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009916:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009918:	2b00      	cmp	r3, #0
 800991a:	f2c0 814e 	blt.w	8009bba <_dtoa_r+0x722>
 800991e:	f1bb 0f0e 	cmp.w	fp, #14
 8009922:	f300 814a 	bgt.w	8009bba <_dtoa_r+0x722>
 8009926:	4b6b      	ldr	r3, [pc, #428]	; (8009ad4 <_dtoa_r+0x63c>)
 8009928:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800992c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009932:	2b00      	cmp	r3, #0
 8009934:	f280 80dc 	bge.w	8009af0 <_dtoa_r+0x658>
 8009938:	9b04      	ldr	r3, [sp, #16]
 800993a:	2b00      	cmp	r3, #0
 800993c:	f300 80d8 	bgt.w	8009af0 <_dtoa_r+0x658>
 8009940:	f040 826f 	bne.w	8009e22 <_dtoa_r+0x98a>
 8009944:	4b68      	ldr	r3, [pc, #416]	; (8009ae8 <_dtoa_r+0x650>)
 8009946:	2200      	movs	r2, #0
 8009948:	4640      	mov	r0, r8
 800994a:	4649      	mov	r1, r9
 800994c:	f7f6 fe54 	bl	80005f8 <__aeabi_dmul>
 8009950:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009954:	f7f7 f8d6 	bl	8000b04 <__aeabi_dcmpge>
 8009958:	9e04      	ldr	r6, [sp, #16]
 800995a:	4637      	mov	r7, r6
 800995c:	2800      	cmp	r0, #0
 800995e:	f040 8245 	bne.w	8009dec <_dtoa_r+0x954>
 8009962:	9d00      	ldr	r5, [sp, #0]
 8009964:	2331      	movs	r3, #49	; 0x31
 8009966:	f805 3b01 	strb.w	r3, [r5], #1
 800996a:	f10b 0b01 	add.w	fp, fp, #1
 800996e:	e241      	b.n	8009df4 <_dtoa_r+0x95c>
 8009970:	07f2      	lsls	r2, r6, #31
 8009972:	d505      	bpl.n	8009980 <_dtoa_r+0x4e8>
 8009974:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009978:	f7f6 fe3e 	bl	80005f8 <__aeabi_dmul>
 800997c:	3501      	adds	r5, #1
 800997e:	2301      	movs	r3, #1
 8009980:	1076      	asrs	r6, r6, #1
 8009982:	3708      	adds	r7, #8
 8009984:	e773      	b.n	800986e <_dtoa_r+0x3d6>
 8009986:	2502      	movs	r5, #2
 8009988:	e775      	b.n	8009876 <_dtoa_r+0x3de>
 800998a:	9e04      	ldr	r6, [sp, #16]
 800998c:	465f      	mov	r7, fp
 800998e:	e792      	b.n	80098b6 <_dtoa_r+0x41e>
 8009990:	9900      	ldr	r1, [sp, #0]
 8009992:	4b50      	ldr	r3, [pc, #320]	; (8009ad4 <_dtoa_r+0x63c>)
 8009994:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009998:	4431      	add	r1, r6
 800999a:	9102      	str	r1, [sp, #8]
 800999c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800999e:	eeb0 9a47 	vmov.f32	s18, s14
 80099a2:	eef0 9a67 	vmov.f32	s19, s15
 80099a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80099aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80099ae:	2900      	cmp	r1, #0
 80099b0:	d044      	beq.n	8009a3c <_dtoa_r+0x5a4>
 80099b2:	494e      	ldr	r1, [pc, #312]	; (8009aec <_dtoa_r+0x654>)
 80099b4:	2000      	movs	r0, #0
 80099b6:	f7f6 ff49 	bl	800084c <__aeabi_ddiv>
 80099ba:	ec53 2b19 	vmov	r2, r3, d9
 80099be:	f7f6 fc63 	bl	8000288 <__aeabi_dsub>
 80099c2:	9d00      	ldr	r5, [sp, #0]
 80099c4:	ec41 0b19 	vmov	d9, r0, r1
 80099c8:	4649      	mov	r1, r9
 80099ca:	4640      	mov	r0, r8
 80099cc:	f7f7 f8c4 	bl	8000b58 <__aeabi_d2iz>
 80099d0:	4606      	mov	r6, r0
 80099d2:	f7f6 fda7 	bl	8000524 <__aeabi_i2d>
 80099d6:	4602      	mov	r2, r0
 80099d8:	460b      	mov	r3, r1
 80099da:	4640      	mov	r0, r8
 80099dc:	4649      	mov	r1, r9
 80099de:	f7f6 fc53 	bl	8000288 <__aeabi_dsub>
 80099e2:	3630      	adds	r6, #48	; 0x30
 80099e4:	f805 6b01 	strb.w	r6, [r5], #1
 80099e8:	ec53 2b19 	vmov	r2, r3, d9
 80099ec:	4680      	mov	r8, r0
 80099ee:	4689      	mov	r9, r1
 80099f0:	f7f7 f874 	bl	8000adc <__aeabi_dcmplt>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	d164      	bne.n	8009ac2 <_dtoa_r+0x62a>
 80099f8:	4642      	mov	r2, r8
 80099fa:	464b      	mov	r3, r9
 80099fc:	4937      	ldr	r1, [pc, #220]	; (8009adc <_dtoa_r+0x644>)
 80099fe:	2000      	movs	r0, #0
 8009a00:	f7f6 fc42 	bl	8000288 <__aeabi_dsub>
 8009a04:	ec53 2b19 	vmov	r2, r3, d9
 8009a08:	f7f7 f868 	bl	8000adc <__aeabi_dcmplt>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	f040 80b6 	bne.w	8009b7e <_dtoa_r+0x6e6>
 8009a12:	9b02      	ldr	r3, [sp, #8]
 8009a14:	429d      	cmp	r5, r3
 8009a16:	f43f af7c 	beq.w	8009912 <_dtoa_r+0x47a>
 8009a1a:	4b31      	ldr	r3, [pc, #196]	; (8009ae0 <_dtoa_r+0x648>)
 8009a1c:	ec51 0b19 	vmov	r0, r1, d9
 8009a20:	2200      	movs	r2, #0
 8009a22:	f7f6 fde9 	bl	80005f8 <__aeabi_dmul>
 8009a26:	4b2e      	ldr	r3, [pc, #184]	; (8009ae0 <_dtoa_r+0x648>)
 8009a28:	ec41 0b19 	vmov	d9, r0, r1
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	4640      	mov	r0, r8
 8009a30:	4649      	mov	r1, r9
 8009a32:	f7f6 fde1 	bl	80005f8 <__aeabi_dmul>
 8009a36:	4680      	mov	r8, r0
 8009a38:	4689      	mov	r9, r1
 8009a3a:	e7c5      	b.n	80099c8 <_dtoa_r+0x530>
 8009a3c:	ec51 0b17 	vmov	r0, r1, d7
 8009a40:	f7f6 fdda 	bl	80005f8 <__aeabi_dmul>
 8009a44:	9b02      	ldr	r3, [sp, #8]
 8009a46:	9d00      	ldr	r5, [sp, #0]
 8009a48:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a4a:	ec41 0b19 	vmov	d9, r0, r1
 8009a4e:	4649      	mov	r1, r9
 8009a50:	4640      	mov	r0, r8
 8009a52:	f7f7 f881 	bl	8000b58 <__aeabi_d2iz>
 8009a56:	4606      	mov	r6, r0
 8009a58:	f7f6 fd64 	bl	8000524 <__aeabi_i2d>
 8009a5c:	3630      	adds	r6, #48	; 0x30
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	4640      	mov	r0, r8
 8009a64:	4649      	mov	r1, r9
 8009a66:	f7f6 fc0f 	bl	8000288 <__aeabi_dsub>
 8009a6a:	f805 6b01 	strb.w	r6, [r5], #1
 8009a6e:	9b02      	ldr	r3, [sp, #8]
 8009a70:	429d      	cmp	r5, r3
 8009a72:	4680      	mov	r8, r0
 8009a74:	4689      	mov	r9, r1
 8009a76:	f04f 0200 	mov.w	r2, #0
 8009a7a:	d124      	bne.n	8009ac6 <_dtoa_r+0x62e>
 8009a7c:	4b1b      	ldr	r3, [pc, #108]	; (8009aec <_dtoa_r+0x654>)
 8009a7e:	ec51 0b19 	vmov	r0, r1, d9
 8009a82:	f7f6 fc03 	bl	800028c <__adddf3>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	4640      	mov	r0, r8
 8009a8c:	4649      	mov	r1, r9
 8009a8e:	f7f7 f843 	bl	8000b18 <__aeabi_dcmpgt>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d173      	bne.n	8009b7e <_dtoa_r+0x6e6>
 8009a96:	ec53 2b19 	vmov	r2, r3, d9
 8009a9a:	4914      	ldr	r1, [pc, #80]	; (8009aec <_dtoa_r+0x654>)
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	f7f6 fbf3 	bl	8000288 <__aeabi_dsub>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	4640      	mov	r0, r8
 8009aa8:	4649      	mov	r1, r9
 8009aaa:	f7f7 f817 	bl	8000adc <__aeabi_dcmplt>
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	f43f af2f 	beq.w	8009912 <_dtoa_r+0x47a>
 8009ab4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009ab6:	1e6b      	subs	r3, r5, #1
 8009ab8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009aba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009abe:	2b30      	cmp	r3, #48	; 0x30
 8009ac0:	d0f8      	beq.n	8009ab4 <_dtoa_r+0x61c>
 8009ac2:	46bb      	mov	fp, r7
 8009ac4:	e04a      	b.n	8009b5c <_dtoa_r+0x6c4>
 8009ac6:	4b06      	ldr	r3, [pc, #24]	; (8009ae0 <_dtoa_r+0x648>)
 8009ac8:	f7f6 fd96 	bl	80005f8 <__aeabi_dmul>
 8009acc:	4680      	mov	r8, r0
 8009ace:	4689      	mov	r9, r1
 8009ad0:	e7bd      	b.n	8009a4e <_dtoa_r+0x5b6>
 8009ad2:	bf00      	nop
 8009ad4:	0800b738 	.word	0x0800b738
 8009ad8:	0800b710 	.word	0x0800b710
 8009adc:	3ff00000 	.word	0x3ff00000
 8009ae0:	40240000 	.word	0x40240000
 8009ae4:	401c0000 	.word	0x401c0000
 8009ae8:	40140000 	.word	0x40140000
 8009aec:	3fe00000 	.word	0x3fe00000
 8009af0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009af4:	9d00      	ldr	r5, [sp, #0]
 8009af6:	4642      	mov	r2, r8
 8009af8:	464b      	mov	r3, r9
 8009afa:	4630      	mov	r0, r6
 8009afc:	4639      	mov	r1, r7
 8009afe:	f7f6 fea5 	bl	800084c <__aeabi_ddiv>
 8009b02:	f7f7 f829 	bl	8000b58 <__aeabi_d2iz>
 8009b06:	9001      	str	r0, [sp, #4]
 8009b08:	f7f6 fd0c 	bl	8000524 <__aeabi_i2d>
 8009b0c:	4642      	mov	r2, r8
 8009b0e:	464b      	mov	r3, r9
 8009b10:	f7f6 fd72 	bl	80005f8 <__aeabi_dmul>
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	4630      	mov	r0, r6
 8009b1a:	4639      	mov	r1, r7
 8009b1c:	f7f6 fbb4 	bl	8000288 <__aeabi_dsub>
 8009b20:	9e01      	ldr	r6, [sp, #4]
 8009b22:	9f04      	ldr	r7, [sp, #16]
 8009b24:	3630      	adds	r6, #48	; 0x30
 8009b26:	f805 6b01 	strb.w	r6, [r5], #1
 8009b2a:	9e00      	ldr	r6, [sp, #0]
 8009b2c:	1bae      	subs	r6, r5, r6
 8009b2e:	42b7      	cmp	r7, r6
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	d134      	bne.n	8009ba0 <_dtoa_r+0x708>
 8009b36:	f7f6 fba9 	bl	800028c <__adddf3>
 8009b3a:	4642      	mov	r2, r8
 8009b3c:	464b      	mov	r3, r9
 8009b3e:	4606      	mov	r6, r0
 8009b40:	460f      	mov	r7, r1
 8009b42:	f7f6 ffe9 	bl	8000b18 <__aeabi_dcmpgt>
 8009b46:	b9c8      	cbnz	r0, 8009b7c <_dtoa_r+0x6e4>
 8009b48:	4642      	mov	r2, r8
 8009b4a:	464b      	mov	r3, r9
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	4639      	mov	r1, r7
 8009b50:	f7f6 ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b54:	b110      	cbz	r0, 8009b5c <_dtoa_r+0x6c4>
 8009b56:	9b01      	ldr	r3, [sp, #4]
 8009b58:	07db      	lsls	r3, r3, #31
 8009b5a:	d40f      	bmi.n	8009b7c <_dtoa_r+0x6e4>
 8009b5c:	4651      	mov	r1, sl
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f000 fbcc 	bl	800a2fc <_Bfree>
 8009b64:	2300      	movs	r3, #0
 8009b66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b68:	702b      	strb	r3, [r5, #0]
 8009b6a:	f10b 0301 	add.w	r3, fp, #1
 8009b6e:	6013      	str	r3, [r2, #0]
 8009b70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f43f ace2 	beq.w	800953c <_dtoa_r+0xa4>
 8009b78:	601d      	str	r5, [r3, #0]
 8009b7a:	e4df      	b.n	800953c <_dtoa_r+0xa4>
 8009b7c:	465f      	mov	r7, fp
 8009b7e:	462b      	mov	r3, r5
 8009b80:	461d      	mov	r5, r3
 8009b82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b86:	2a39      	cmp	r2, #57	; 0x39
 8009b88:	d106      	bne.n	8009b98 <_dtoa_r+0x700>
 8009b8a:	9a00      	ldr	r2, [sp, #0]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d1f7      	bne.n	8009b80 <_dtoa_r+0x6e8>
 8009b90:	9900      	ldr	r1, [sp, #0]
 8009b92:	2230      	movs	r2, #48	; 0x30
 8009b94:	3701      	adds	r7, #1
 8009b96:	700a      	strb	r2, [r1, #0]
 8009b98:	781a      	ldrb	r2, [r3, #0]
 8009b9a:	3201      	adds	r2, #1
 8009b9c:	701a      	strb	r2, [r3, #0]
 8009b9e:	e790      	b.n	8009ac2 <_dtoa_r+0x62a>
 8009ba0:	4ba3      	ldr	r3, [pc, #652]	; (8009e30 <_dtoa_r+0x998>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f7f6 fd28 	bl	80005f8 <__aeabi_dmul>
 8009ba8:	2200      	movs	r2, #0
 8009baa:	2300      	movs	r3, #0
 8009bac:	4606      	mov	r6, r0
 8009bae:	460f      	mov	r7, r1
 8009bb0:	f7f6 ff8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d09e      	beq.n	8009af6 <_dtoa_r+0x65e>
 8009bb8:	e7d0      	b.n	8009b5c <_dtoa_r+0x6c4>
 8009bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bbc:	2a00      	cmp	r2, #0
 8009bbe:	f000 80ca 	beq.w	8009d56 <_dtoa_r+0x8be>
 8009bc2:	9a07      	ldr	r2, [sp, #28]
 8009bc4:	2a01      	cmp	r2, #1
 8009bc6:	f300 80ad 	bgt.w	8009d24 <_dtoa_r+0x88c>
 8009bca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bcc:	2a00      	cmp	r2, #0
 8009bce:	f000 80a5 	beq.w	8009d1c <_dtoa_r+0x884>
 8009bd2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009bd6:	9e08      	ldr	r6, [sp, #32]
 8009bd8:	9d05      	ldr	r5, [sp, #20]
 8009bda:	9a05      	ldr	r2, [sp, #20]
 8009bdc:	441a      	add	r2, r3
 8009bde:	9205      	str	r2, [sp, #20]
 8009be0:	9a06      	ldr	r2, [sp, #24]
 8009be2:	2101      	movs	r1, #1
 8009be4:	441a      	add	r2, r3
 8009be6:	4620      	mov	r0, r4
 8009be8:	9206      	str	r2, [sp, #24]
 8009bea:	f000 fc3d 	bl	800a468 <__i2b>
 8009bee:	4607      	mov	r7, r0
 8009bf0:	b165      	cbz	r5, 8009c0c <_dtoa_r+0x774>
 8009bf2:	9b06      	ldr	r3, [sp, #24]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	dd09      	ble.n	8009c0c <_dtoa_r+0x774>
 8009bf8:	42ab      	cmp	r3, r5
 8009bfa:	9a05      	ldr	r2, [sp, #20]
 8009bfc:	bfa8      	it	ge
 8009bfe:	462b      	movge	r3, r5
 8009c00:	1ad2      	subs	r2, r2, r3
 8009c02:	9205      	str	r2, [sp, #20]
 8009c04:	9a06      	ldr	r2, [sp, #24]
 8009c06:	1aed      	subs	r5, r5, r3
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	9306      	str	r3, [sp, #24]
 8009c0c:	9b08      	ldr	r3, [sp, #32]
 8009c0e:	b1f3      	cbz	r3, 8009c4e <_dtoa_r+0x7b6>
 8009c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f000 80a3 	beq.w	8009d5e <_dtoa_r+0x8c6>
 8009c18:	2e00      	cmp	r6, #0
 8009c1a:	dd10      	ble.n	8009c3e <_dtoa_r+0x7a6>
 8009c1c:	4639      	mov	r1, r7
 8009c1e:	4632      	mov	r2, r6
 8009c20:	4620      	mov	r0, r4
 8009c22:	f000 fce1 	bl	800a5e8 <__pow5mult>
 8009c26:	4652      	mov	r2, sl
 8009c28:	4601      	mov	r1, r0
 8009c2a:	4607      	mov	r7, r0
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	f000 fc31 	bl	800a494 <__multiply>
 8009c32:	4651      	mov	r1, sl
 8009c34:	4680      	mov	r8, r0
 8009c36:	4620      	mov	r0, r4
 8009c38:	f000 fb60 	bl	800a2fc <_Bfree>
 8009c3c:	46c2      	mov	sl, r8
 8009c3e:	9b08      	ldr	r3, [sp, #32]
 8009c40:	1b9a      	subs	r2, r3, r6
 8009c42:	d004      	beq.n	8009c4e <_dtoa_r+0x7b6>
 8009c44:	4651      	mov	r1, sl
 8009c46:	4620      	mov	r0, r4
 8009c48:	f000 fcce 	bl	800a5e8 <__pow5mult>
 8009c4c:	4682      	mov	sl, r0
 8009c4e:	2101      	movs	r1, #1
 8009c50:	4620      	mov	r0, r4
 8009c52:	f000 fc09 	bl	800a468 <__i2b>
 8009c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	f340 8081 	ble.w	8009d62 <_dtoa_r+0x8ca>
 8009c60:	461a      	mov	r2, r3
 8009c62:	4601      	mov	r1, r0
 8009c64:	4620      	mov	r0, r4
 8009c66:	f000 fcbf 	bl	800a5e8 <__pow5mult>
 8009c6a:	9b07      	ldr	r3, [sp, #28]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	4606      	mov	r6, r0
 8009c70:	dd7a      	ble.n	8009d68 <_dtoa_r+0x8d0>
 8009c72:	f04f 0800 	mov.w	r8, #0
 8009c76:	6933      	ldr	r3, [r6, #16]
 8009c78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009c7c:	6918      	ldr	r0, [r3, #16]
 8009c7e:	f000 fba5 	bl	800a3cc <__hi0bits>
 8009c82:	f1c0 0020 	rsb	r0, r0, #32
 8009c86:	9b06      	ldr	r3, [sp, #24]
 8009c88:	4418      	add	r0, r3
 8009c8a:	f010 001f 	ands.w	r0, r0, #31
 8009c8e:	f000 8094 	beq.w	8009dba <_dtoa_r+0x922>
 8009c92:	f1c0 0320 	rsb	r3, r0, #32
 8009c96:	2b04      	cmp	r3, #4
 8009c98:	f340 8085 	ble.w	8009da6 <_dtoa_r+0x90e>
 8009c9c:	9b05      	ldr	r3, [sp, #20]
 8009c9e:	f1c0 001c 	rsb	r0, r0, #28
 8009ca2:	4403      	add	r3, r0
 8009ca4:	9305      	str	r3, [sp, #20]
 8009ca6:	9b06      	ldr	r3, [sp, #24]
 8009ca8:	4403      	add	r3, r0
 8009caa:	4405      	add	r5, r0
 8009cac:	9306      	str	r3, [sp, #24]
 8009cae:	9b05      	ldr	r3, [sp, #20]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	dd05      	ble.n	8009cc0 <_dtoa_r+0x828>
 8009cb4:	4651      	mov	r1, sl
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f000 fcef 	bl	800a69c <__lshift>
 8009cbe:	4682      	mov	sl, r0
 8009cc0:	9b06      	ldr	r3, [sp, #24]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	dd05      	ble.n	8009cd2 <_dtoa_r+0x83a>
 8009cc6:	4631      	mov	r1, r6
 8009cc8:	461a      	mov	r2, r3
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f000 fce6 	bl	800a69c <__lshift>
 8009cd0:	4606      	mov	r6, r0
 8009cd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d072      	beq.n	8009dbe <_dtoa_r+0x926>
 8009cd8:	4631      	mov	r1, r6
 8009cda:	4650      	mov	r0, sl
 8009cdc:	f000 fd4a 	bl	800a774 <__mcmp>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	da6c      	bge.n	8009dbe <_dtoa_r+0x926>
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	4651      	mov	r1, sl
 8009ce8:	220a      	movs	r2, #10
 8009cea:	4620      	mov	r0, r4
 8009cec:	f000 fb28 	bl	800a340 <__multadd>
 8009cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009cf6:	4682      	mov	sl, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f000 81b0 	beq.w	800a05e <_dtoa_r+0xbc6>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	4639      	mov	r1, r7
 8009d02:	220a      	movs	r2, #10
 8009d04:	4620      	mov	r0, r4
 8009d06:	f000 fb1b 	bl	800a340 <__multadd>
 8009d0a:	9b01      	ldr	r3, [sp, #4]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	4607      	mov	r7, r0
 8009d10:	f300 8096 	bgt.w	8009e40 <_dtoa_r+0x9a8>
 8009d14:	9b07      	ldr	r3, [sp, #28]
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	dc59      	bgt.n	8009dce <_dtoa_r+0x936>
 8009d1a:	e091      	b.n	8009e40 <_dtoa_r+0x9a8>
 8009d1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d22:	e758      	b.n	8009bd6 <_dtoa_r+0x73e>
 8009d24:	9b04      	ldr	r3, [sp, #16]
 8009d26:	1e5e      	subs	r6, r3, #1
 8009d28:	9b08      	ldr	r3, [sp, #32]
 8009d2a:	42b3      	cmp	r3, r6
 8009d2c:	bfbf      	itttt	lt
 8009d2e:	9b08      	ldrlt	r3, [sp, #32]
 8009d30:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009d32:	9608      	strlt	r6, [sp, #32]
 8009d34:	1af3      	sublt	r3, r6, r3
 8009d36:	bfb4      	ite	lt
 8009d38:	18d2      	addlt	r2, r2, r3
 8009d3a:	1b9e      	subge	r6, r3, r6
 8009d3c:	9b04      	ldr	r3, [sp, #16]
 8009d3e:	bfbc      	itt	lt
 8009d40:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009d42:	2600      	movlt	r6, #0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	bfb7      	itett	lt
 8009d48:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009d4c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009d50:	1a9d      	sublt	r5, r3, r2
 8009d52:	2300      	movlt	r3, #0
 8009d54:	e741      	b.n	8009bda <_dtoa_r+0x742>
 8009d56:	9e08      	ldr	r6, [sp, #32]
 8009d58:	9d05      	ldr	r5, [sp, #20]
 8009d5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009d5c:	e748      	b.n	8009bf0 <_dtoa_r+0x758>
 8009d5e:	9a08      	ldr	r2, [sp, #32]
 8009d60:	e770      	b.n	8009c44 <_dtoa_r+0x7ac>
 8009d62:	9b07      	ldr	r3, [sp, #28]
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	dc19      	bgt.n	8009d9c <_dtoa_r+0x904>
 8009d68:	9b02      	ldr	r3, [sp, #8]
 8009d6a:	b9bb      	cbnz	r3, 8009d9c <_dtoa_r+0x904>
 8009d6c:	9b03      	ldr	r3, [sp, #12]
 8009d6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d72:	b99b      	cbnz	r3, 8009d9c <_dtoa_r+0x904>
 8009d74:	9b03      	ldr	r3, [sp, #12]
 8009d76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d7a:	0d1b      	lsrs	r3, r3, #20
 8009d7c:	051b      	lsls	r3, r3, #20
 8009d7e:	b183      	cbz	r3, 8009da2 <_dtoa_r+0x90a>
 8009d80:	9b05      	ldr	r3, [sp, #20]
 8009d82:	3301      	adds	r3, #1
 8009d84:	9305      	str	r3, [sp, #20]
 8009d86:	9b06      	ldr	r3, [sp, #24]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	9306      	str	r3, [sp, #24]
 8009d8c:	f04f 0801 	mov.w	r8, #1
 8009d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f47f af6f 	bne.w	8009c76 <_dtoa_r+0x7de>
 8009d98:	2001      	movs	r0, #1
 8009d9a:	e774      	b.n	8009c86 <_dtoa_r+0x7ee>
 8009d9c:	f04f 0800 	mov.w	r8, #0
 8009da0:	e7f6      	b.n	8009d90 <_dtoa_r+0x8f8>
 8009da2:	4698      	mov	r8, r3
 8009da4:	e7f4      	b.n	8009d90 <_dtoa_r+0x8f8>
 8009da6:	d082      	beq.n	8009cae <_dtoa_r+0x816>
 8009da8:	9a05      	ldr	r2, [sp, #20]
 8009daa:	331c      	adds	r3, #28
 8009dac:	441a      	add	r2, r3
 8009dae:	9205      	str	r2, [sp, #20]
 8009db0:	9a06      	ldr	r2, [sp, #24]
 8009db2:	441a      	add	r2, r3
 8009db4:	441d      	add	r5, r3
 8009db6:	9206      	str	r2, [sp, #24]
 8009db8:	e779      	b.n	8009cae <_dtoa_r+0x816>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	e7f4      	b.n	8009da8 <_dtoa_r+0x910>
 8009dbe:	9b04      	ldr	r3, [sp, #16]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	dc37      	bgt.n	8009e34 <_dtoa_r+0x99c>
 8009dc4:	9b07      	ldr	r3, [sp, #28]
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	dd34      	ble.n	8009e34 <_dtoa_r+0x99c>
 8009dca:	9b04      	ldr	r3, [sp, #16]
 8009dcc:	9301      	str	r3, [sp, #4]
 8009dce:	9b01      	ldr	r3, [sp, #4]
 8009dd0:	b963      	cbnz	r3, 8009dec <_dtoa_r+0x954>
 8009dd2:	4631      	mov	r1, r6
 8009dd4:	2205      	movs	r2, #5
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f000 fab2 	bl	800a340 <__multadd>
 8009ddc:	4601      	mov	r1, r0
 8009dde:	4606      	mov	r6, r0
 8009de0:	4650      	mov	r0, sl
 8009de2:	f000 fcc7 	bl	800a774 <__mcmp>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	f73f adbb 	bgt.w	8009962 <_dtoa_r+0x4ca>
 8009dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dee:	9d00      	ldr	r5, [sp, #0]
 8009df0:	ea6f 0b03 	mvn.w	fp, r3
 8009df4:	f04f 0800 	mov.w	r8, #0
 8009df8:	4631      	mov	r1, r6
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	f000 fa7e 	bl	800a2fc <_Bfree>
 8009e00:	2f00      	cmp	r7, #0
 8009e02:	f43f aeab 	beq.w	8009b5c <_dtoa_r+0x6c4>
 8009e06:	f1b8 0f00 	cmp.w	r8, #0
 8009e0a:	d005      	beq.n	8009e18 <_dtoa_r+0x980>
 8009e0c:	45b8      	cmp	r8, r7
 8009e0e:	d003      	beq.n	8009e18 <_dtoa_r+0x980>
 8009e10:	4641      	mov	r1, r8
 8009e12:	4620      	mov	r0, r4
 8009e14:	f000 fa72 	bl	800a2fc <_Bfree>
 8009e18:	4639      	mov	r1, r7
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f000 fa6e 	bl	800a2fc <_Bfree>
 8009e20:	e69c      	b.n	8009b5c <_dtoa_r+0x6c4>
 8009e22:	2600      	movs	r6, #0
 8009e24:	4637      	mov	r7, r6
 8009e26:	e7e1      	b.n	8009dec <_dtoa_r+0x954>
 8009e28:	46bb      	mov	fp, r7
 8009e2a:	4637      	mov	r7, r6
 8009e2c:	e599      	b.n	8009962 <_dtoa_r+0x4ca>
 8009e2e:	bf00      	nop
 8009e30:	40240000 	.word	0x40240000
 8009e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f000 80c8 	beq.w	8009fcc <_dtoa_r+0xb34>
 8009e3c:	9b04      	ldr	r3, [sp, #16]
 8009e3e:	9301      	str	r3, [sp, #4]
 8009e40:	2d00      	cmp	r5, #0
 8009e42:	dd05      	ble.n	8009e50 <_dtoa_r+0x9b8>
 8009e44:	4639      	mov	r1, r7
 8009e46:	462a      	mov	r2, r5
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f000 fc27 	bl	800a69c <__lshift>
 8009e4e:	4607      	mov	r7, r0
 8009e50:	f1b8 0f00 	cmp.w	r8, #0
 8009e54:	d05b      	beq.n	8009f0e <_dtoa_r+0xa76>
 8009e56:	6879      	ldr	r1, [r7, #4]
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f000 fa0f 	bl	800a27c <_Balloc>
 8009e5e:	4605      	mov	r5, r0
 8009e60:	b928      	cbnz	r0, 8009e6e <_dtoa_r+0x9d6>
 8009e62:	4b83      	ldr	r3, [pc, #524]	; (800a070 <_dtoa_r+0xbd8>)
 8009e64:	4602      	mov	r2, r0
 8009e66:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009e6a:	f7ff bb2e 	b.w	80094ca <_dtoa_r+0x32>
 8009e6e:	693a      	ldr	r2, [r7, #16]
 8009e70:	3202      	adds	r2, #2
 8009e72:	0092      	lsls	r2, r2, #2
 8009e74:	f107 010c 	add.w	r1, r7, #12
 8009e78:	300c      	adds	r0, #12
 8009e7a:	f7ff fa74 	bl	8009366 <memcpy>
 8009e7e:	2201      	movs	r2, #1
 8009e80:	4629      	mov	r1, r5
 8009e82:	4620      	mov	r0, r4
 8009e84:	f000 fc0a 	bl	800a69c <__lshift>
 8009e88:	9b00      	ldr	r3, [sp, #0]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	9304      	str	r3, [sp, #16]
 8009e8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e92:	4413      	add	r3, r2
 8009e94:	9308      	str	r3, [sp, #32]
 8009e96:	9b02      	ldr	r3, [sp, #8]
 8009e98:	f003 0301 	and.w	r3, r3, #1
 8009e9c:	46b8      	mov	r8, r7
 8009e9e:	9306      	str	r3, [sp, #24]
 8009ea0:	4607      	mov	r7, r0
 8009ea2:	9b04      	ldr	r3, [sp, #16]
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	4650      	mov	r0, sl
 8009eaa:	9301      	str	r3, [sp, #4]
 8009eac:	f7ff fa69 	bl	8009382 <quorem>
 8009eb0:	4641      	mov	r1, r8
 8009eb2:	9002      	str	r0, [sp, #8]
 8009eb4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009eb8:	4650      	mov	r0, sl
 8009eba:	f000 fc5b 	bl	800a774 <__mcmp>
 8009ebe:	463a      	mov	r2, r7
 8009ec0:	9005      	str	r0, [sp, #20]
 8009ec2:	4631      	mov	r1, r6
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f000 fc71 	bl	800a7ac <__mdiff>
 8009eca:	68c2      	ldr	r2, [r0, #12]
 8009ecc:	4605      	mov	r5, r0
 8009ece:	bb02      	cbnz	r2, 8009f12 <_dtoa_r+0xa7a>
 8009ed0:	4601      	mov	r1, r0
 8009ed2:	4650      	mov	r0, sl
 8009ed4:	f000 fc4e 	bl	800a774 <__mcmp>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	4629      	mov	r1, r5
 8009edc:	4620      	mov	r0, r4
 8009ede:	9209      	str	r2, [sp, #36]	; 0x24
 8009ee0:	f000 fa0c 	bl	800a2fc <_Bfree>
 8009ee4:	9b07      	ldr	r3, [sp, #28]
 8009ee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ee8:	9d04      	ldr	r5, [sp, #16]
 8009eea:	ea43 0102 	orr.w	r1, r3, r2
 8009eee:	9b06      	ldr	r3, [sp, #24]
 8009ef0:	4319      	orrs	r1, r3
 8009ef2:	d110      	bne.n	8009f16 <_dtoa_r+0xa7e>
 8009ef4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ef8:	d029      	beq.n	8009f4e <_dtoa_r+0xab6>
 8009efa:	9b05      	ldr	r3, [sp, #20]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	dd02      	ble.n	8009f06 <_dtoa_r+0xa6e>
 8009f00:	9b02      	ldr	r3, [sp, #8]
 8009f02:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009f06:	9b01      	ldr	r3, [sp, #4]
 8009f08:	f883 9000 	strb.w	r9, [r3]
 8009f0c:	e774      	b.n	8009df8 <_dtoa_r+0x960>
 8009f0e:	4638      	mov	r0, r7
 8009f10:	e7ba      	b.n	8009e88 <_dtoa_r+0x9f0>
 8009f12:	2201      	movs	r2, #1
 8009f14:	e7e1      	b.n	8009eda <_dtoa_r+0xa42>
 8009f16:	9b05      	ldr	r3, [sp, #20]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	db04      	blt.n	8009f26 <_dtoa_r+0xa8e>
 8009f1c:	9907      	ldr	r1, [sp, #28]
 8009f1e:	430b      	orrs	r3, r1
 8009f20:	9906      	ldr	r1, [sp, #24]
 8009f22:	430b      	orrs	r3, r1
 8009f24:	d120      	bne.n	8009f68 <_dtoa_r+0xad0>
 8009f26:	2a00      	cmp	r2, #0
 8009f28:	dded      	ble.n	8009f06 <_dtoa_r+0xa6e>
 8009f2a:	4651      	mov	r1, sl
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f000 fbb4 	bl	800a69c <__lshift>
 8009f34:	4631      	mov	r1, r6
 8009f36:	4682      	mov	sl, r0
 8009f38:	f000 fc1c 	bl	800a774 <__mcmp>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	dc03      	bgt.n	8009f48 <_dtoa_r+0xab0>
 8009f40:	d1e1      	bne.n	8009f06 <_dtoa_r+0xa6e>
 8009f42:	f019 0f01 	tst.w	r9, #1
 8009f46:	d0de      	beq.n	8009f06 <_dtoa_r+0xa6e>
 8009f48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f4c:	d1d8      	bne.n	8009f00 <_dtoa_r+0xa68>
 8009f4e:	9a01      	ldr	r2, [sp, #4]
 8009f50:	2339      	movs	r3, #57	; 0x39
 8009f52:	7013      	strb	r3, [r2, #0]
 8009f54:	462b      	mov	r3, r5
 8009f56:	461d      	mov	r5, r3
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f5e:	2a39      	cmp	r2, #57	; 0x39
 8009f60:	d06c      	beq.n	800a03c <_dtoa_r+0xba4>
 8009f62:	3201      	adds	r2, #1
 8009f64:	701a      	strb	r2, [r3, #0]
 8009f66:	e747      	b.n	8009df8 <_dtoa_r+0x960>
 8009f68:	2a00      	cmp	r2, #0
 8009f6a:	dd07      	ble.n	8009f7c <_dtoa_r+0xae4>
 8009f6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f70:	d0ed      	beq.n	8009f4e <_dtoa_r+0xab6>
 8009f72:	9a01      	ldr	r2, [sp, #4]
 8009f74:	f109 0301 	add.w	r3, r9, #1
 8009f78:	7013      	strb	r3, [r2, #0]
 8009f7a:	e73d      	b.n	8009df8 <_dtoa_r+0x960>
 8009f7c:	9b04      	ldr	r3, [sp, #16]
 8009f7e:	9a08      	ldr	r2, [sp, #32]
 8009f80:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d043      	beq.n	800a010 <_dtoa_r+0xb78>
 8009f88:	4651      	mov	r1, sl
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	220a      	movs	r2, #10
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f000 f9d6 	bl	800a340 <__multadd>
 8009f94:	45b8      	cmp	r8, r7
 8009f96:	4682      	mov	sl, r0
 8009f98:	f04f 0300 	mov.w	r3, #0
 8009f9c:	f04f 020a 	mov.w	r2, #10
 8009fa0:	4641      	mov	r1, r8
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	d107      	bne.n	8009fb6 <_dtoa_r+0xb1e>
 8009fa6:	f000 f9cb 	bl	800a340 <__multadd>
 8009faa:	4680      	mov	r8, r0
 8009fac:	4607      	mov	r7, r0
 8009fae:	9b04      	ldr	r3, [sp, #16]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	9304      	str	r3, [sp, #16]
 8009fb4:	e775      	b.n	8009ea2 <_dtoa_r+0xa0a>
 8009fb6:	f000 f9c3 	bl	800a340 <__multadd>
 8009fba:	4639      	mov	r1, r7
 8009fbc:	4680      	mov	r8, r0
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	220a      	movs	r2, #10
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f000 f9bc 	bl	800a340 <__multadd>
 8009fc8:	4607      	mov	r7, r0
 8009fca:	e7f0      	b.n	8009fae <_dtoa_r+0xb16>
 8009fcc:	9b04      	ldr	r3, [sp, #16]
 8009fce:	9301      	str	r3, [sp, #4]
 8009fd0:	9d00      	ldr	r5, [sp, #0]
 8009fd2:	4631      	mov	r1, r6
 8009fd4:	4650      	mov	r0, sl
 8009fd6:	f7ff f9d4 	bl	8009382 <quorem>
 8009fda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009fde:	9b00      	ldr	r3, [sp, #0]
 8009fe0:	f805 9b01 	strb.w	r9, [r5], #1
 8009fe4:	1aea      	subs	r2, r5, r3
 8009fe6:	9b01      	ldr	r3, [sp, #4]
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	dd07      	ble.n	8009ffc <_dtoa_r+0xb64>
 8009fec:	4651      	mov	r1, sl
 8009fee:	2300      	movs	r3, #0
 8009ff0:	220a      	movs	r2, #10
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f000 f9a4 	bl	800a340 <__multadd>
 8009ff8:	4682      	mov	sl, r0
 8009ffa:	e7ea      	b.n	8009fd2 <_dtoa_r+0xb3a>
 8009ffc:	9b01      	ldr	r3, [sp, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	bfc8      	it	gt
 800a002:	461d      	movgt	r5, r3
 800a004:	9b00      	ldr	r3, [sp, #0]
 800a006:	bfd8      	it	le
 800a008:	2501      	movle	r5, #1
 800a00a:	441d      	add	r5, r3
 800a00c:	f04f 0800 	mov.w	r8, #0
 800a010:	4651      	mov	r1, sl
 800a012:	2201      	movs	r2, #1
 800a014:	4620      	mov	r0, r4
 800a016:	f000 fb41 	bl	800a69c <__lshift>
 800a01a:	4631      	mov	r1, r6
 800a01c:	4682      	mov	sl, r0
 800a01e:	f000 fba9 	bl	800a774 <__mcmp>
 800a022:	2800      	cmp	r0, #0
 800a024:	dc96      	bgt.n	8009f54 <_dtoa_r+0xabc>
 800a026:	d102      	bne.n	800a02e <_dtoa_r+0xb96>
 800a028:	f019 0f01 	tst.w	r9, #1
 800a02c:	d192      	bne.n	8009f54 <_dtoa_r+0xabc>
 800a02e:	462b      	mov	r3, r5
 800a030:	461d      	mov	r5, r3
 800a032:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a036:	2a30      	cmp	r2, #48	; 0x30
 800a038:	d0fa      	beq.n	800a030 <_dtoa_r+0xb98>
 800a03a:	e6dd      	b.n	8009df8 <_dtoa_r+0x960>
 800a03c:	9a00      	ldr	r2, [sp, #0]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d189      	bne.n	8009f56 <_dtoa_r+0xabe>
 800a042:	f10b 0b01 	add.w	fp, fp, #1
 800a046:	2331      	movs	r3, #49	; 0x31
 800a048:	e796      	b.n	8009f78 <_dtoa_r+0xae0>
 800a04a:	4b0a      	ldr	r3, [pc, #40]	; (800a074 <_dtoa_r+0xbdc>)
 800a04c:	f7ff ba99 	b.w	8009582 <_dtoa_r+0xea>
 800a050:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a052:	2b00      	cmp	r3, #0
 800a054:	f47f aa6d 	bne.w	8009532 <_dtoa_r+0x9a>
 800a058:	4b07      	ldr	r3, [pc, #28]	; (800a078 <_dtoa_r+0xbe0>)
 800a05a:	f7ff ba92 	b.w	8009582 <_dtoa_r+0xea>
 800a05e:	9b01      	ldr	r3, [sp, #4]
 800a060:	2b00      	cmp	r3, #0
 800a062:	dcb5      	bgt.n	8009fd0 <_dtoa_r+0xb38>
 800a064:	9b07      	ldr	r3, [sp, #28]
 800a066:	2b02      	cmp	r3, #2
 800a068:	f73f aeb1 	bgt.w	8009dce <_dtoa_r+0x936>
 800a06c:	e7b0      	b.n	8009fd0 <_dtoa_r+0xb38>
 800a06e:	bf00      	nop
 800a070:	0800b6a0 	.word	0x0800b6a0
 800a074:	0800b600 	.word	0x0800b600
 800a078:	0800b624 	.word	0x0800b624

0800a07c <_free_r>:
 800a07c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a07e:	2900      	cmp	r1, #0
 800a080:	d044      	beq.n	800a10c <_free_r+0x90>
 800a082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a086:	9001      	str	r0, [sp, #4]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f1a1 0404 	sub.w	r4, r1, #4
 800a08e:	bfb8      	it	lt
 800a090:	18e4      	addlt	r4, r4, r3
 800a092:	f000 f8e7 	bl	800a264 <__malloc_lock>
 800a096:	4a1e      	ldr	r2, [pc, #120]	; (800a110 <_free_r+0x94>)
 800a098:	9801      	ldr	r0, [sp, #4]
 800a09a:	6813      	ldr	r3, [r2, #0]
 800a09c:	b933      	cbnz	r3, 800a0ac <_free_r+0x30>
 800a09e:	6063      	str	r3, [r4, #4]
 800a0a0:	6014      	str	r4, [r2, #0]
 800a0a2:	b003      	add	sp, #12
 800a0a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0a8:	f000 b8e2 	b.w	800a270 <__malloc_unlock>
 800a0ac:	42a3      	cmp	r3, r4
 800a0ae:	d908      	bls.n	800a0c2 <_free_r+0x46>
 800a0b0:	6825      	ldr	r5, [r4, #0]
 800a0b2:	1961      	adds	r1, r4, r5
 800a0b4:	428b      	cmp	r3, r1
 800a0b6:	bf01      	itttt	eq
 800a0b8:	6819      	ldreq	r1, [r3, #0]
 800a0ba:	685b      	ldreq	r3, [r3, #4]
 800a0bc:	1949      	addeq	r1, r1, r5
 800a0be:	6021      	streq	r1, [r4, #0]
 800a0c0:	e7ed      	b.n	800a09e <_free_r+0x22>
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	b10b      	cbz	r3, 800a0cc <_free_r+0x50>
 800a0c8:	42a3      	cmp	r3, r4
 800a0ca:	d9fa      	bls.n	800a0c2 <_free_r+0x46>
 800a0cc:	6811      	ldr	r1, [r2, #0]
 800a0ce:	1855      	adds	r5, r2, r1
 800a0d0:	42a5      	cmp	r5, r4
 800a0d2:	d10b      	bne.n	800a0ec <_free_r+0x70>
 800a0d4:	6824      	ldr	r4, [r4, #0]
 800a0d6:	4421      	add	r1, r4
 800a0d8:	1854      	adds	r4, r2, r1
 800a0da:	42a3      	cmp	r3, r4
 800a0dc:	6011      	str	r1, [r2, #0]
 800a0de:	d1e0      	bne.n	800a0a2 <_free_r+0x26>
 800a0e0:	681c      	ldr	r4, [r3, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	6053      	str	r3, [r2, #4]
 800a0e6:	440c      	add	r4, r1
 800a0e8:	6014      	str	r4, [r2, #0]
 800a0ea:	e7da      	b.n	800a0a2 <_free_r+0x26>
 800a0ec:	d902      	bls.n	800a0f4 <_free_r+0x78>
 800a0ee:	230c      	movs	r3, #12
 800a0f0:	6003      	str	r3, [r0, #0]
 800a0f2:	e7d6      	b.n	800a0a2 <_free_r+0x26>
 800a0f4:	6825      	ldr	r5, [r4, #0]
 800a0f6:	1961      	adds	r1, r4, r5
 800a0f8:	428b      	cmp	r3, r1
 800a0fa:	bf04      	itt	eq
 800a0fc:	6819      	ldreq	r1, [r3, #0]
 800a0fe:	685b      	ldreq	r3, [r3, #4]
 800a100:	6063      	str	r3, [r4, #4]
 800a102:	bf04      	itt	eq
 800a104:	1949      	addeq	r1, r1, r5
 800a106:	6021      	streq	r1, [r4, #0]
 800a108:	6054      	str	r4, [r2, #4]
 800a10a:	e7ca      	b.n	800a0a2 <_free_r+0x26>
 800a10c:	b003      	add	sp, #12
 800a10e:	bd30      	pop	{r4, r5, pc}
 800a110:	200008ac 	.word	0x200008ac

0800a114 <malloc>:
 800a114:	4b02      	ldr	r3, [pc, #8]	; (800a120 <malloc+0xc>)
 800a116:	4601      	mov	r1, r0
 800a118:	6818      	ldr	r0, [r3, #0]
 800a11a:	f000 b823 	b.w	800a164 <_malloc_r>
 800a11e:	bf00      	nop
 800a120:	2000006c 	.word	0x2000006c

0800a124 <sbrk_aligned>:
 800a124:	b570      	push	{r4, r5, r6, lr}
 800a126:	4e0e      	ldr	r6, [pc, #56]	; (800a160 <sbrk_aligned+0x3c>)
 800a128:	460c      	mov	r4, r1
 800a12a:	6831      	ldr	r1, [r6, #0]
 800a12c:	4605      	mov	r5, r0
 800a12e:	b911      	cbnz	r1, 800a136 <sbrk_aligned+0x12>
 800a130:	f000 fe40 	bl	800adb4 <_sbrk_r>
 800a134:	6030      	str	r0, [r6, #0]
 800a136:	4621      	mov	r1, r4
 800a138:	4628      	mov	r0, r5
 800a13a:	f000 fe3b 	bl	800adb4 <_sbrk_r>
 800a13e:	1c43      	adds	r3, r0, #1
 800a140:	d00a      	beq.n	800a158 <sbrk_aligned+0x34>
 800a142:	1cc4      	adds	r4, r0, #3
 800a144:	f024 0403 	bic.w	r4, r4, #3
 800a148:	42a0      	cmp	r0, r4
 800a14a:	d007      	beq.n	800a15c <sbrk_aligned+0x38>
 800a14c:	1a21      	subs	r1, r4, r0
 800a14e:	4628      	mov	r0, r5
 800a150:	f000 fe30 	bl	800adb4 <_sbrk_r>
 800a154:	3001      	adds	r0, #1
 800a156:	d101      	bne.n	800a15c <sbrk_aligned+0x38>
 800a158:	f04f 34ff 	mov.w	r4, #4294967295
 800a15c:	4620      	mov	r0, r4
 800a15e:	bd70      	pop	{r4, r5, r6, pc}
 800a160:	200008b0 	.word	0x200008b0

0800a164 <_malloc_r>:
 800a164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a168:	1ccd      	adds	r5, r1, #3
 800a16a:	f025 0503 	bic.w	r5, r5, #3
 800a16e:	3508      	adds	r5, #8
 800a170:	2d0c      	cmp	r5, #12
 800a172:	bf38      	it	cc
 800a174:	250c      	movcc	r5, #12
 800a176:	2d00      	cmp	r5, #0
 800a178:	4607      	mov	r7, r0
 800a17a:	db01      	blt.n	800a180 <_malloc_r+0x1c>
 800a17c:	42a9      	cmp	r1, r5
 800a17e:	d905      	bls.n	800a18c <_malloc_r+0x28>
 800a180:	230c      	movs	r3, #12
 800a182:	603b      	str	r3, [r7, #0]
 800a184:	2600      	movs	r6, #0
 800a186:	4630      	mov	r0, r6
 800a188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a18c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a260 <_malloc_r+0xfc>
 800a190:	f000 f868 	bl	800a264 <__malloc_lock>
 800a194:	f8d8 3000 	ldr.w	r3, [r8]
 800a198:	461c      	mov	r4, r3
 800a19a:	bb5c      	cbnz	r4, 800a1f4 <_malloc_r+0x90>
 800a19c:	4629      	mov	r1, r5
 800a19e:	4638      	mov	r0, r7
 800a1a0:	f7ff ffc0 	bl	800a124 <sbrk_aligned>
 800a1a4:	1c43      	adds	r3, r0, #1
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	d155      	bne.n	800a256 <_malloc_r+0xf2>
 800a1aa:	f8d8 4000 	ldr.w	r4, [r8]
 800a1ae:	4626      	mov	r6, r4
 800a1b0:	2e00      	cmp	r6, #0
 800a1b2:	d145      	bne.n	800a240 <_malloc_r+0xdc>
 800a1b4:	2c00      	cmp	r4, #0
 800a1b6:	d048      	beq.n	800a24a <_malloc_r+0xe6>
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	4638      	mov	r0, r7
 800a1be:	eb04 0903 	add.w	r9, r4, r3
 800a1c2:	f000 fdf7 	bl	800adb4 <_sbrk_r>
 800a1c6:	4581      	cmp	r9, r0
 800a1c8:	d13f      	bne.n	800a24a <_malloc_r+0xe6>
 800a1ca:	6821      	ldr	r1, [r4, #0]
 800a1cc:	1a6d      	subs	r5, r5, r1
 800a1ce:	4629      	mov	r1, r5
 800a1d0:	4638      	mov	r0, r7
 800a1d2:	f7ff ffa7 	bl	800a124 <sbrk_aligned>
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	d037      	beq.n	800a24a <_malloc_r+0xe6>
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	442b      	add	r3, r5
 800a1de:	6023      	str	r3, [r4, #0]
 800a1e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d038      	beq.n	800a25a <_malloc_r+0xf6>
 800a1e8:	685a      	ldr	r2, [r3, #4]
 800a1ea:	42a2      	cmp	r2, r4
 800a1ec:	d12b      	bne.n	800a246 <_malloc_r+0xe2>
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	605a      	str	r2, [r3, #4]
 800a1f2:	e00f      	b.n	800a214 <_malloc_r+0xb0>
 800a1f4:	6822      	ldr	r2, [r4, #0]
 800a1f6:	1b52      	subs	r2, r2, r5
 800a1f8:	d41f      	bmi.n	800a23a <_malloc_r+0xd6>
 800a1fa:	2a0b      	cmp	r2, #11
 800a1fc:	d917      	bls.n	800a22e <_malloc_r+0xca>
 800a1fe:	1961      	adds	r1, r4, r5
 800a200:	42a3      	cmp	r3, r4
 800a202:	6025      	str	r5, [r4, #0]
 800a204:	bf18      	it	ne
 800a206:	6059      	strne	r1, [r3, #4]
 800a208:	6863      	ldr	r3, [r4, #4]
 800a20a:	bf08      	it	eq
 800a20c:	f8c8 1000 	streq.w	r1, [r8]
 800a210:	5162      	str	r2, [r4, r5]
 800a212:	604b      	str	r3, [r1, #4]
 800a214:	4638      	mov	r0, r7
 800a216:	f104 060b 	add.w	r6, r4, #11
 800a21a:	f000 f829 	bl	800a270 <__malloc_unlock>
 800a21e:	f026 0607 	bic.w	r6, r6, #7
 800a222:	1d23      	adds	r3, r4, #4
 800a224:	1af2      	subs	r2, r6, r3
 800a226:	d0ae      	beq.n	800a186 <_malloc_r+0x22>
 800a228:	1b9b      	subs	r3, r3, r6
 800a22a:	50a3      	str	r3, [r4, r2]
 800a22c:	e7ab      	b.n	800a186 <_malloc_r+0x22>
 800a22e:	42a3      	cmp	r3, r4
 800a230:	6862      	ldr	r2, [r4, #4]
 800a232:	d1dd      	bne.n	800a1f0 <_malloc_r+0x8c>
 800a234:	f8c8 2000 	str.w	r2, [r8]
 800a238:	e7ec      	b.n	800a214 <_malloc_r+0xb0>
 800a23a:	4623      	mov	r3, r4
 800a23c:	6864      	ldr	r4, [r4, #4]
 800a23e:	e7ac      	b.n	800a19a <_malloc_r+0x36>
 800a240:	4634      	mov	r4, r6
 800a242:	6876      	ldr	r6, [r6, #4]
 800a244:	e7b4      	b.n	800a1b0 <_malloc_r+0x4c>
 800a246:	4613      	mov	r3, r2
 800a248:	e7cc      	b.n	800a1e4 <_malloc_r+0x80>
 800a24a:	230c      	movs	r3, #12
 800a24c:	603b      	str	r3, [r7, #0]
 800a24e:	4638      	mov	r0, r7
 800a250:	f000 f80e 	bl	800a270 <__malloc_unlock>
 800a254:	e797      	b.n	800a186 <_malloc_r+0x22>
 800a256:	6025      	str	r5, [r4, #0]
 800a258:	e7dc      	b.n	800a214 <_malloc_r+0xb0>
 800a25a:	605b      	str	r3, [r3, #4]
 800a25c:	deff      	udf	#255	; 0xff
 800a25e:	bf00      	nop
 800a260:	200008ac 	.word	0x200008ac

0800a264 <__malloc_lock>:
 800a264:	4801      	ldr	r0, [pc, #4]	; (800a26c <__malloc_lock+0x8>)
 800a266:	f7ff b87c 	b.w	8009362 <__retarget_lock_acquire_recursive>
 800a26a:	bf00      	nop
 800a26c:	200008a8 	.word	0x200008a8

0800a270 <__malloc_unlock>:
 800a270:	4801      	ldr	r0, [pc, #4]	; (800a278 <__malloc_unlock+0x8>)
 800a272:	f7ff b877 	b.w	8009364 <__retarget_lock_release_recursive>
 800a276:	bf00      	nop
 800a278:	200008a8 	.word	0x200008a8

0800a27c <_Balloc>:
 800a27c:	b570      	push	{r4, r5, r6, lr}
 800a27e:	69c6      	ldr	r6, [r0, #28]
 800a280:	4604      	mov	r4, r0
 800a282:	460d      	mov	r5, r1
 800a284:	b976      	cbnz	r6, 800a2a4 <_Balloc+0x28>
 800a286:	2010      	movs	r0, #16
 800a288:	f7ff ff44 	bl	800a114 <malloc>
 800a28c:	4602      	mov	r2, r0
 800a28e:	61e0      	str	r0, [r4, #28]
 800a290:	b920      	cbnz	r0, 800a29c <_Balloc+0x20>
 800a292:	4b18      	ldr	r3, [pc, #96]	; (800a2f4 <_Balloc+0x78>)
 800a294:	4818      	ldr	r0, [pc, #96]	; (800a2f8 <_Balloc+0x7c>)
 800a296:	216b      	movs	r1, #107	; 0x6b
 800a298:	f000 fd9c 	bl	800add4 <__assert_func>
 800a29c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2a0:	6006      	str	r6, [r0, #0]
 800a2a2:	60c6      	str	r6, [r0, #12]
 800a2a4:	69e6      	ldr	r6, [r4, #28]
 800a2a6:	68f3      	ldr	r3, [r6, #12]
 800a2a8:	b183      	cbz	r3, 800a2cc <_Balloc+0x50>
 800a2aa:	69e3      	ldr	r3, [r4, #28]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2b2:	b9b8      	cbnz	r0, 800a2e4 <_Balloc+0x68>
 800a2b4:	2101      	movs	r1, #1
 800a2b6:	fa01 f605 	lsl.w	r6, r1, r5
 800a2ba:	1d72      	adds	r2, r6, #5
 800a2bc:	0092      	lsls	r2, r2, #2
 800a2be:	4620      	mov	r0, r4
 800a2c0:	f000 fda6 	bl	800ae10 <_calloc_r>
 800a2c4:	b160      	cbz	r0, 800a2e0 <_Balloc+0x64>
 800a2c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2ca:	e00e      	b.n	800a2ea <_Balloc+0x6e>
 800a2cc:	2221      	movs	r2, #33	; 0x21
 800a2ce:	2104      	movs	r1, #4
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f000 fd9d 	bl	800ae10 <_calloc_r>
 800a2d6:	69e3      	ldr	r3, [r4, #28]
 800a2d8:	60f0      	str	r0, [r6, #12]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1e4      	bne.n	800a2aa <_Balloc+0x2e>
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	bd70      	pop	{r4, r5, r6, pc}
 800a2e4:	6802      	ldr	r2, [r0, #0]
 800a2e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2f0:	e7f7      	b.n	800a2e2 <_Balloc+0x66>
 800a2f2:	bf00      	nop
 800a2f4:	0800b631 	.word	0x0800b631
 800a2f8:	0800b6b1 	.word	0x0800b6b1

0800a2fc <_Bfree>:
 800a2fc:	b570      	push	{r4, r5, r6, lr}
 800a2fe:	69c6      	ldr	r6, [r0, #28]
 800a300:	4605      	mov	r5, r0
 800a302:	460c      	mov	r4, r1
 800a304:	b976      	cbnz	r6, 800a324 <_Bfree+0x28>
 800a306:	2010      	movs	r0, #16
 800a308:	f7ff ff04 	bl	800a114 <malloc>
 800a30c:	4602      	mov	r2, r0
 800a30e:	61e8      	str	r0, [r5, #28]
 800a310:	b920      	cbnz	r0, 800a31c <_Bfree+0x20>
 800a312:	4b09      	ldr	r3, [pc, #36]	; (800a338 <_Bfree+0x3c>)
 800a314:	4809      	ldr	r0, [pc, #36]	; (800a33c <_Bfree+0x40>)
 800a316:	218f      	movs	r1, #143	; 0x8f
 800a318:	f000 fd5c 	bl	800add4 <__assert_func>
 800a31c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a320:	6006      	str	r6, [r0, #0]
 800a322:	60c6      	str	r6, [r0, #12]
 800a324:	b13c      	cbz	r4, 800a336 <_Bfree+0x3a>
 800a326:	69eb      	ldr	r3, [r5, #28]
 800a328:	6862      	ldr	r2, [r4, #4]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a330:	6021      	str	r1, [r4, #0]
 800a332:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a336:	bd70      	pop	{r4, r5, r6, pc}
 800a338:	0800b631 	.word	0x0800b631
 800a33c:	0800b6b1 	.word	0x0800b6b1

0800a340 <__multadd>:
 800a340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a344:	690d      	ldr	r5, [r1, #16]
 800a346:	4607      	mov	r7, r0
 800a348:	460c      	mov	r4, r1
 800a34a:	461e      	mov	r6, r3
 800a34c:	f101 0c14 	add.w	ip, r1, #20
 800a350:	2000      	movs	r0, #0
 800a352:	f8dc 3000 	ldr.w	r3, [ip]
 800a356:	b299      	uxth	r1, r3
 800a358:	fb02 6101 	mla	r1, r2, r1, r6
 800a35c:	0c1e      	lsrs	r6, r3, #16
 800a35e:	0c0b      	lsrs	r3, r1, #16
 800a360:	fb02 3306 	mla	r3, r2, r6, r3
 800a364:	b289      	uxth	r1, r1
 800a366:	3001      	adds	r0, #1
 800a368:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a36c:	4285      	cmp	r5, r0
 800a36e:	f84c 1b04 	str.w	r1, [ip], #4
 800a372:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a376:	dcec      	bgt.n	800a352 <__multadd+0x12>
 800a378:	b30e      	cbz	r6, 800a3be <__multadd+0x7e>
 800a37a:	68a3      	ldr	r3, [r4, #8]
 800a37c:	42ab      	cmp	r3, r5
 800a37e:	dc19      	bgt.n	800a3b4 <__multadd+0x74>
 800a380:	6861      	ldr	r1, [r4, #4]
 800a382:	4638      	mov	r0, r7
 800a384:	3101      	adds	r1, #1
 800a386:	f7ff ff79 	bl	800a27c <_Balloc>
 800a38a:	4680      	mov	r8, r0
 800a38c:	b928      	cbnz	r0, 800a39a <__multadd+0x5a>
 800a38e:	4602      	mov	r2, r0
 800a390:	4b0c      	ldr	r3, [pc, #48]	; (800a3c4 <__multadd+0x84>)
 800a392:	480d      	ldr	r0, [pc, #52]	; (800a3c8 <__multadd+0x88>)
 800a394:	21ba      	movs	r1, #186	; 0xba
 800a396:	f000 fd1d 	bl	800add4 <__assert_func>
 800a39a:	6922      	ldr	r2, [r4, #16]
 800a39c:	3202      	adds	r2, #2
 800a39e:	f104 010c 	add.w	r1, r4, #12
 800a3a2:	0092      	lsls	r2, r2, #2
 800a3a4:	300c      	adds	r0, #12
 800a3a6:	f7fe ffde 	bl	8009366 <memcpy>
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	4638      	mov	r0, r7
 800a3ae:	f7ff ffa5 	bl	800a2fc <_Bfree>
 800a3b2:	4644      	mov	r4, r8
 800a3b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3b8:	3501      	adds	r5, #1
 800a3ba:	615e      	str	r6, [r3, #20]
 800a3bc:	6125      	str	r5, [r4, #16]
 800a3be:	4620      	mov	r0, r4
 800a3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c4:	0800b6a0 	.word	0x0800b6a0
 800a3c8:	0800b6b1 	.word	0x0800b6b1

0800a3cc <__hi0bits>:
 800a3cc:	0c03      	lsrs	r3, r0, #16
 800a3ce:	041b      	lsls	r3, r3, #16
 800a3d0:	b9d3      	cbnz	r3, 800a408 <__hi0bits+0x3c>
 800a3d2:	0400      	lsls	r0, r0, #16
 800a3d4:	2310      	movs	r3, #16
 800a3d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a3da:	bf04      	itt	eq
 800a3dc:	0200      	lsleq	r0, r0, #8
 800a3de:	3308      	addeq	r3, #8
 800a3e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a3e4:	bf04      	itt	eq
 800a3e6:	0100      	lsleq	r0, r0, #4
 800a3e8:	3304      	addeq	r3, #4
 800a3ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a3ee:	bf04      	itt	eq
 800a3f0:	0080      	lsleq	r0, r0, #2
 800a3f2:	3302      	addeq	r3, #2
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	db05      	blt.n	800a404 <__hi0bits+0x38>
 800a3f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a3fc:	f103 0301 	add.w	r3, r3, #1
 800a400:	bf08      	it	eq
 800a402:	2320      	moveq	r3, #32
 800a404:	4618      	mov	r0, r3
 800a406:	4770      	bx	lr
 800a408:	2300      	movs	r3, #0
 800a40a:	e7e4      	b.n	800a3d6 <__hi0bits+0xa>

0800a40c <__lo0bits>:
 800a40c:	6803      	ldr	r3, [r0, #0]
 800a40e:	f013 0207 	ands.w	r2, r3, #7
 800a412:	d00c      	beq.n	800a42e <__lo0bits+0x22>
 800a414:	07d9      	lsls	r1, r3, #31
 800a416:	d422      	bmi.n	800a45e <__lo0bits+0x52>
 800a418:	079a      	lsls	r2, r3, #30
 800a41a:	bf49      	itett	mi
 800a41c:	085b      	lsrmi	r3, r3, #1
 800a41e:	089b      	lsrpl	r3, r3, #2
 800a420:	6003      	strmi	r3, [r0, #0]
 800a422:	2201      	movmi	r2, #1
 800a424:	bf5c      	itt	pl
 800a426:	6003      	strpl	r3, [r0, #0]
 800a428:	2202      	movpl	r2, #2
 800a42a:	4610      	mov	r0, r2
 800a42c:	4770      	bx	lr
 800a42e:	b299      	uxth	r1, r3
 800a430:	b909      	cbnz	r1, 800a436 <__lo0bits+0x2a>
 800a432:	0c1b      	lsrs	r3, r3, #16
 800a434:	2210      	movs	r2, #16
 800a436:	b2d9      	uxtb	r1, r3
 800a438:	b909      	cbnz	r1, 800a43e <__lo0bits+0x32>
 800a43a:	3208      	adds	r2, #8
 800a43c:	0a1b      	lsrs	r3, r3, #8
 800a43e:	0719      	lsls	r1, r3, #28
 800a440:	bf04      	itt	eq
 800a442:	091b      	lsreq	r3, r3, #4
 800a444:	3204      	addeq	r2, #4
 800a446:	0799      	lsls	r1, r3, #30
 800a448:	bf04      	itt	eq
 800a44a:	089b      	lsreq	r3, r3, #2
 800a44c:	3202      	addeq	r2, #2
 800a44e:	07d9      	lsls	r1, r3, #31
 800a450:	d403      	bmi.n	800a45a <__lo0bits+0x4e>
 800a452:	085b      	lsrs	r3, r3, #1
 800a454:	f102 0201 	add.w	r2, r2, #1
 800a458:	d003      	beq.n	800a462 <__lo0bits+0x56>
 800a45a:	6003      	str	r3, [r0, #0]
 800a45c:	e7e5      	b.n	800a42a <__lo0bits+0x1e>
 800a45e:	2200      	movs	r2, #0
 800a460:	e7e3      	b.n	800a42a <__lo0bits+0x1e>
 800a462:	2220      	movs	r2, #32
 800a464:	e7e1      	b.n	800a42a <__lo0bits+0x1e>
	...

0800a468 <__i2b>:
 800a468:	b510      	push	{r4, lr}
 800a46a:	460c      	mov	r4, r1
 800a46c:	2101      	movs	r1, #1
 800a46e:	f7ff ff05 	bl	800a27c <_Balloc>
 800a472:	4602      	mov	r2, r0
 800a474:	b928      	cbnz	r0, 800a482 <__i2b+0x1a>
 800a476:	4b05      	ldr	r3, [pc, #20]	; (800a48c <__i2b+0x24>)
 800a478:	4805      	ldr	r0, [pc, #20]	; (800a490 <__i2b+0x28>)
 800a47a:	f240 1145 	movw	r1, #325	; 0x145
 800a47e:	f000 fca9 	bl	800add4 <__assert_func>
 800a482:	2301      	movs	r3, #1
 800a484:	6144      	str	r4, [r0, #20]
 800a486:	6103      	str	r3, [r0, #16]
 800a488:	bd10      	pop	{r4, pc}
 800a48a:	bf00      	nop
 800a48c:	0800b6a0 	.word	0x0800b6a0
 800a490:	0800b6b1 	.word	0x0800b6b1

0800a494 <__multiply>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	4691      	mov	r9, r2
 800a49a:	690a      	ldr	r2, [r1, #16]
 800a49c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	bfb8      	it	lt
 800a4a4:	460b      	movlt	r3, r1
 800a4a6:	460c      	mov	r4, r1
 800a4a8:	bfbc      	itt	lt
 800a4aa:	464c      	movlt	r4, r9
 800a4ac:	4699      	movlt	r9, r3
 800a4ae:	6927      	ldr	r7, [r4, #16]
 800a4b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a4b4:	68a3      	ldr	r3, [r4, #8]
 800a4b6:	6861      	ldr	r1, [r4, #4]
 800a4b8:	eb07 060a 	add.w	r6, r7, sl
 800a4bc:	42b3      	cmp	r3, r6
 800a4be:	b085      	sub	sp, #20
 800a4c0:	bfb8      	it	lt
 800a4c2:	3101      	addlt	r1, #1
 800a4c4:	f7ff feda 	bl	800a27c <_Balloc>
 800a4c8:	b930      	cbnz	r0, 800a4d8 <__multiply+0x44>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	4b44      	ldr	r3, [pc, #272]	; (800a5e0 <__multiply+0x14c>)
 800a4ce:	4845      	ldr	r0, [pc, #276]	; (800a5e4 <__multiply+0x150>)
 800a4d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a4d4:	f000 fc7e 	bl	800add4 <__assert_func>
 800a4d8:	f100 0514 	add.w	r5, r0, #20
 800a4dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a4e0:	462b      	mov	r3, r5
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	4543      	cmp	r3, r8
 800a4e6:	d321      	bcc.n	800a52c <__multiply+0x98>
 800a4e8:	f104 0314 	add.w	r3, r4, #20
 800a4ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a4f0:	f109 0314 	add.w	r3, r9, #20
 800a4f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a4f8:	9202      	str	r2, [sp, #8]
 800a4fa:	1b3a      	subs	r2, r7, r4
 800a4fc:	3a15      	subs	r2, #21
 800a4fe:	f022 0203 	bic.w	r2, r2, #3
 800a502:	3204      	adds	r2, #4
 800a504:	f104 0115 	add.w	r1, r4, #21
 800a508:	428f      	cmp	r7, r1
 800a50a:	bf38      	it	cc
 800a50c:	2204      	movcc	r2, #4
 800a50e:	9201      	str	r2, [sp, #4]
 800a510:	9a02      	ldr	r2, [sp, #8]
 800a512:	9303      	str	r3, [sp, #12]
 800a514:	429a      	cmp	r2, r3
 800a516:	d80c      	bhi.n	800a532 <__multiply+0x9e>
 800a518:	2e00      	cmp	r6, #0
 800a51a:	dd03      	ble.n	800a524 <__multiply+0x90>
 800a51c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a520:	2b00      	cmp	r3, #0
 800a522:	d05b      	beq.n	800a5dc <__multiply+0x148>
 800a524:	6106      	str	r6, [r0, #16]
 800a526:	b005      	add	sp, #20
 800a528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52c:	f843 2b04 	str.w	r2, [r3], #4
 800a530:	e7d8      	b.n	800a4e4 <__multiply+0x50>
 800a532:	f8b3 a000 	ldrh.w	sl, [r3]
 800a536:	f1ba 0f00 	cmp.w	sl, #0
 800a53a:	d024      	beq.n	800a586 <__multiply+0xf2>
 800a53c:	f104 0e14 	add.w	lr, r4, #20
 800a540:	46a9      	mov	r9, r5
 800a542:	f04f 0c00 	mov.w	ip, #0
 800a546:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a54a:	f8d9 1000 	ldr.w	r1, [r9]
 800a54e:	fa1f fb82 	uxth.w	fp, r2
 800a552:	b289      	uxth	r1, r1
 800a554:	fb0a 110b 	mla	r1, sl, fp, r1
 800a558:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a55c:	f8d9 2000 	ldr.w	r2, [r9]
 800a560:	4461      	add	r1, ip
 800a562:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a566:	fb0a c20b 	mla	r2, sl, fp, ip
 800a56a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a56e:	b289      	uxth	r1, r1
 800a570:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a574:	4577      	cmp	r7, lr
 800a576:	f849 1b04 	str.w	r1, [r9], #4
 800a57a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a57e:	d8e2      	bhi.n	800a546 <__multiply+0xb2>
 800a580:	9a01      	ldr	r2, [sp, #4]
 800a582:	f845 c002 	str.w	ip, [r5, r2]
 800a586:	9a03      	ldr	r2, [sp, #12]
 800a588:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a58c:	3304      	adds	r3, #4
 800a58e:	f1b9 0f00 	cmp.w	r9, #0
 800a592:	d021      	beq.n	800a5d8 <__multiply+0x144>
 800a594:	6829      	ldr	r1, [r5, #0]
 800a596:	f104 0c14 	add.w	ip, r4, #20
 800a59a:	46ae      	mov	lr, r5
 800a59c:	f04f 0a00 	mov.w	sl, #0
 800a5a0:	f8bc b000 	ldrh.w	fp, [ip]
 800a5a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a5a8:	fb09 220b 	mla	r2, r9, fp, r2
 800a5ac:	4452      	add	r2, sl
 800a5ae:	b289      	uxth	r1, r1
 800a5b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a5b4:	f84e 1b04 	str.w	r1, [lr], #4
 800a5b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a5bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a5c0:	f8be 1000 	ldrh.w	r1, [lr]
 800a5c4:	fb09 110a 	mla	r1, r9, sl, r1
 800a5c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a5cc:	4567      	cmp	r7, ip
 800a5ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a5d2:	d8e5      	bhi.n	800a5a0 <__multiply+0x10c>
 800a5d4:	9a01      	ldr	r2, [sp, #4]
 800a5d6:	50a9      	str	r1, [r5, r2]
 800a5d8:	3504      	adds	r5, #4
 800a5da:	e799      	b.n	800a510 <__multiply+0x7c>
 800a5dc:	3e01      	subs	r6, #1
 800a5de:	e79b      	b.n	800a518 <__multiply+0x84>
 800a5e0:	0800b6a0 	.word	0x0800b6a0
 800a5e4:	0800b6b1 	.word	0x0800b6b1

0800a5e8 <__pow5mult>:
 800a5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5ec:	4615      	mov	r5, r2
 800a5ee:	f012 0203 	ands.w	r2, r2, #3
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	460f      	mov	r7, r1
 800a5f6:	d007      	beq.n	800a608 <__pow5mult+0x20>
 800a5f8:	4c25      	ldr	r4, [pc, #148]	; (800a690 <__pow5mult+0xa8>)
 800a5fa:	3a01      	subs	r2, #1
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a602:	f7ff fe9d 	bl	800a340 <__multadd>
 800a606:	4607      	mov	r7, r0
 800a608:	10ad      	asrs	r5, r5, #2
 800a60a:	d03d      	beq.n	800a688 <__pow5mult+0xa0>
 800a60c:	69f4      	ldr	r4, [r6, #28]
 800a60e:	b97c      	cbnz	r4, 800a630 <__pow5mult+0x48>
 800a610:	2010      	movs	r0, #16
 800a612:	f7ff fd7f 	bl	800a114 <malloc>
 800a616:	4602      	mov	r2, r0
 800a618:	61f0      	str	r0, [r6, #28]
 800a61a:	b928      	cbnz	r0, 800a628 <__pow5mult+0x40>
 800a61c:	4b1d      	ldr	r3, [pc, #116]	; (800a694 <__pow5mult+0xac>)
 800a61e:	481e      	ldr	r0, [pc, #120]	; (800a698 <__pow5mult+0xb0>)
 800a620:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a624:	f000 fbd6 	bl	800add4 <__assert_func>
 800a628:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a62c:	6004      	str	r4, [r0, #0]
 800a62e:	60c4      	str	r4, [r0, #12]
 800a630:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a638:	b94c      	cbnz	r4, 800a64e <__pow5mult+0x66>
 800a63a:	f240 2171 	movw	r1, #625	; 0x271
 800a63e:	4630      	mov	r0, r6
 800a640:	f7ff ff12 	bl	800a468 <__i2b>
 800a644:	2300      	movs	r3, #0
 800a646:	f8c8 0008 	str.w	r0, [r8, #8]
 800a64a:	4604      	mov	r4, r0
 800a64c:	6003      	str	r3, [r0, #0]
 800a64e:	f04f 0900 	mov.w	r9, #0
 800a652:	07eb      	lsls	r3, r5, #31
 800a654:	d50a      	bpl.n	800a66c <__pow5mult+0x84>
 800a656:	4639      	mov	r1, r7
 800a658:	4622      	mov	r2, r4
 800a65a:	4630      	mov	r0, r6
 800a65c:	f7ff ff1a 	bl	800a494 <__multiply>
 800a660:	4639      	mov	r1, r7
 800a662:	4680      	mov	r8, r0
 800a664:	4630      	mov	r0, r6
 800a666:	f7ff fe49 	bl	800a2fc <_Bfree>
 800a66a:	4647      	mov	r7, r8
 800a66c:	106d      	asrs	r5, r5, #1
 800a66e:	d00b      	beq.n	800a688 <__pow5mult+0xa0>
 800a670:	6820      	ldr	r0, [r4, #0]
 800a672:	b938      	cbnz	r0, 800a684 <__pow5mult+0x9c>
 800a674:	4622      	mov	r2, r4
 800a676:	4621      	mov	r1, r4
 800a678:	4630      	mov	r0, r6
 800a67a:	f7ff ff0b 	bl	800a494 <__multiply>
 800a67e:	6020      	str	r0, [r4, #0]
 800a680:	f8c0 9000 	str.w	r9, [r0]
 800a684:	4604      	mov	r4, r0
 800a686:	e7e4      	b.n	800a652 <__pow5mult+0x6a>
 800a688:	4638      	mov	r0, r7
 800a68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a68e:	bf00      	nop
 800a690:	0800b800 	.word	0x0800b800
 800a694:	0800b631 	.word	0x0800b631
 800a698:	0800b6b1 	.word	0x0800b6b1

0800a69c <__lshift>:
 800a69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a0:	460c      	mov	r4, r1
 800a6a2:	6849      	ldr	r1, [r1, #4]
 800a6a4:	6923      	ldr	r3, [r4, #16]
 800a6a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6aa:	68a3      	ldr	r3, [r4, #8]
 800a6ac:	4607      	mov	r7, r0
 800a6ae:	4691      	mov	r9, r2
 800a6b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6b4:	f108 0601 	add.w	r6, r8, #1
 800a6b8:	42b3      	cmp	r3, r6
 800a6ba:	db0b      	blt.n	800a6d4 <__lshift+0x38>
 800a6bc:	4638      	mov	r0, r7
 800a6be:	f7ff fddd 	bl	800a27c <_Balloc>
 800a6c2:	4605      	mov	r5, r0
 800a6c4:	b948      	cbnz	r0, 800a6da <__lshift+0x3e>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	4b28      	ldr	r3, [pc, #160]	; (800a76c <__lshift+0xd0>)
 800a6ca:	4829      	ldr	r0, [pc, #164]	; (800a770 <__lshift+0xd4>)
 800a6cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a6d0:	f000 fb80 	bl	800add4 <__assert_func>
 800a6d4:	3101      	adds	r1, #1
 800a6d6:	005b      	lsls	r3, r3, #1
 800a6d8:	e7ee      	b.n	800a6b8 <__lshift+0x1c>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	f100 0114 	add.w	r1, r0, #20
 800a6e0:	f100 0210 	add.w	r2, r0, #16
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	4553      	cmp	r3, sl
 800a6e8:	db33      	blt.n	800a752 <__lshift+0xb6>
 800a6ea:	6920      	ldr	r0, [r4, #16]
 800a6ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6f0:	f104 0314 	add.w	r3, r4, #20
 800a6f4:	f019 091f 	ands.w	r9, r9, #31
 800a6f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a700:	d02b      	beq.n	800a75a <__lshift+0xbe>
 800a702:	f1c9 0e20 	rsb	lr, r9, #32
 800a706:	468a      	mov	sl, r1
 800a708:	2200      	movs	r2, #0
 800a70a:	6818      	ldr	r0, [r3, #0]
 800a70c:	fa00 f009 	lsl.w	r0, r0, r9
 800a710:	4310      	orrs	r0, r2
 800a712:	f84a 0b04 	str.w	r0, [sl], #4
 800a716:	f853 2b04 	ldr.w	r2, [r3], #4
 800a71a:	459c      	cmp	ip, r3
 800a71c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a720:	d8f3      	bhi.n	800a70a <__lshift+0x6e>
 800a722:	ebac 0304 	sub.w	r3, ip, r4
 800a726:	3b15      	subs	r3, #21
 800a728:	f023 0303 	bic.w	r3, r3, #3
 800a72c:	3304      	adds	r3, #4
 800a72e:	f104 0015 	add.w	r0, r4, #21
 800a732:	4584      	cmp	ip, r0
 800a734:	bf38      	it	cc
 800a736:	2304      	movcc	r3, #4
 800a738:	50ca      	str	r2, [r1, r3]
 800a73a:	b10a      	cbz	r2, 800a740 <__lshift+0xa4>
 800a73c:	f108 0602 	add.w	r6, r8, #2
 800a740:	3e01      	subs	r6, #1
 800a742:	4638      	mov	r0, r7
 800a744:	612e      	str	r6, [r5, #16]
 800a746:	4621      	mov	r1, r4
 800a748:	f7ff fdd8 	bl	800a2fc <_Bfree>
 800a74c:	4628      	mov	r0, r5
 800a74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a752:	f842 0f04 	str.w	r0, [r2, #4]!
 800a756:	3301      	adds	r3, #1
 800a758:	e7c5      	b.n	800a6e6 <__lshift+0x4a>
 800a75a:	3904      	subs	r1, #4
 800a75c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a760:	f841 2f04 	str.w	r2, [r1, #4]!
 800a764:	459c      	cmp	ip, r3
 800a766:	d8f9      	bhi.n	800a75c <__lshift+0xc0>
 800a768:	e7ea      	b.n	800a740 <__lshift+0xa4>
 800a76a:	bf00      	nop
 800a76c:	0800b6a0 	.word	0x0800b6a0
 800a770:	0800b6b1 	.word	0x0800b6b1

0800a774 <__mcmp>:
 800a774:	b530      	push	{r4, r5, lr}
 800a776:	6902      	ldr	r2, [r0, #16]
 800a778:	690c      	ldr	r4, [r1, #16]
 800a77a:	1b12      	subs	r2, r2, r4
 800a77c:	d10e      	bne.n	800a79c <__mcmp+0x28>
 800a77e:	f100 0314 	add.w	r3, r0, #20
 800a782:	3114      	adds	r1, #20
 800a784:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a788:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a78c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a790:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a794:	42a5      	cmp	r5, r4
 800a796:	d003      	beq.n	800a7a0 <__mcmp+0x2c>
 800a798:	d305      	bcc.n	800a7a6 <__mcmp+0x32>
 800a79a:	2201      	movs	r2, #1
 800a79c:	4610      	mov	r0, r2
 800a79e:	bd30      	pop	{r4, r5, pc}
 800a7a0:	4283      	cmp	r3, r0
 800a7a2:	d3f3      	bcc.n	800a78c <__mcmp+0x18>
 800a7a4:	e7fa      	b.n	800a79c <__mcmp+0x28>
 800a7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7aa:	e7f7      	b.n	800a79c <__mcmp+0x28>

0800a7ac <__mdiff>:
 800a7ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b0:	460c      	mov	r4, r1
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	4690      	mov	r8, r2
 800a7ba:	f7ff ffdb 	bl	800a774 <__mcmp>
 800a7be:	1e05      	subs	r5, r0, #0
 800a7c0:	d110      	bne.n	800a7e4 <__mdiff+0x38>
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f7ff fd59 	bl	800a27c <_Balloc>
 800a7ca:	b930      	cbnz	r0, 800a7da <__mdiff+0x2e>
 800a7cc:	4b3a      	ldr	r3, [pc, #232]	; (800a8b8 <__mdiff+0x10c>)
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	f240 2137 	movw	r1, #567	; 0x237
 800a7d4:	4839      	ldr	r0, [pc, #228]	; (800a8bc <__mdiff+0x110>)
 800a7d6:	f000 fafd 	bl	800add4 <__assert_func>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e4:	bfa4      	itt	ge
 800a7e6:	4643      	movge	r3, r8
 800a7e8:	46a0      	movge	r8, r4
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a7f0:	bfa6      	itte	ge
 800a7f2:	461c      	movge	r4, r3
 800a7f4:	2500      	movge	r5, #0
 800a7f6:	2501      	movlt	r5, #1
 800a7f8:	f7ff fd40 	bl	800a27c <_Balloc>
 800a7fc:	b920      	cbnz	r0, 800a808 <__mdiff+0x5c>
 800a7fe:	4b2e      	ldr	r3, [pc, #184]	; (800a8b8 <__mdiff+0x10c>)
 800a800:	4602      	mov	r2, r0
 800a802:	f240 2145 	movw	r1, #581	; 0x245
 800a806:	e7e5      	b.n	800a7d4 <__mdiff+0x28>
 800a808:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a80c:	6926      	ldr	r6, [r4, #16]
 800a80e:	60c5      	str	r5, [r0, #12]
 800a810:	f104 0914 	add.w	r9, r4, #20
 800a814:	f108 0514 	add.w	r5, r8, #20
 800a818:	f100 0e14 	add.w	lr, r0, #20
 800a81c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a820:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a824:	f108 0210 	add.w	r2, r8, #16
 800a828:	46f2      	mov	sl, lr
 800a82a:	2100      	movs	r1, #0
 800a82c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a830:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a834:	fa11 f88b 	uxtah	r8, r1, fp
 800a838:	b299      	uxth	r1, r3
 800a83a:	0c1b      	lsrs	r3, r3, #16
 800a83c:	eba8 0801 	sub.w	r8, r8, r1
 800a840:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a844:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a848:	fa1f f888 	uxth.w	r8, r8
 800a84c:	1419      	asrs	r1, r3, #16
 800a84e:	454e      	cmp	r6, r9
 800a850:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a854:	f84a 3b04 	str.w	r3, [sl], #4
 800a858:	d8e8      	bhi.n	800a82c <__mdiff+0x80>
 800a85a:	1b33      	subs	r3, r6, r4
 800a85c:	3b15      	subs	r3, #21
 800a85e:	f023 0303 	bic.w	r3, r3, #3
 800a862:	3304      	adds	r3, #4
 800a864:	3415      	adds	r4, #21
 800a866:	42a6      	cmp	r6, r4
 800a868:	bf38      	it	cc
 800a86a:	2304      	movcc	r3, #4
 800a86c:	441d      	add	r5, r3
 800a86e:	4473      	add	r3, lr
 800a870:	469e      	mov	lr, r3
 800a872:	462e      	mov	r6, r5
 800a874:	4566      	cmp	r6, ip
 800a876:	d30e      	bcc.n	800a896 <__mdiff+0xea>
 800a878:	f10c 0203 	add.w	r2, ip, #3
 800a87c:	1b52      	subs	r2, r2, r5
 800a87e:	f022 0203 	bic.w	r2, r2, #3
 800a882:	3d03      	subs	r5, #3
 800a884:	45ac      	cmp	ip, r5
 800a886:	bf38      	it	cc
 800a888:	2200      	movcc	r2, #0
 800a88a:	4413      	add	r3, r2
 800a88c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a890:	b17a      	cbz	r2, 800a8b2 <__mdiff+0x106>
 800a892:	6107      	str	r7, [r0, #16]
 800a894:	e7a4      	b.n	800a7e0 <__mdiff+0x34>
 800a896:	f856 8b04 	ldr.w	r8, [r6], #4
 800a89a:	fa11 f288 	uxtah	r2, r1, r8
 800a89e:	1414      	asrs	r4, r2, #16
 800a8a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a8a4:	b292      	uxth	r2, r2
 800a8a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a8aa:	f84e 2b04 	str.w	r2, [lr], #4
 800a8ae:	1421      	asrs	r1, r4, #16
 800a8b0:	e7e0      	b.n	800a874 <__mdiff+0xc8>
 800a8b2:	3f01      	subs	r7, #1
 800a8b4:	e7ea      	b.n	800a88c <__mdiff+0xe0>
 800a8b6:	bf00      	nop
 800a8b8:	0800b6a0 	.word	0x0800b6a0
 800a8bc:	0800b6b1 	.word	0x0800b6b1

0800a8c0 <__d2b>:
 800a8c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8c4:	460f      	mov	r7, r1
 800a8c6:	2101      	movs	r1, #1
 800a8c8:	ec59 8b10 	vmov	r8, r9, d0
 800a8cc:	4616      	mov	r6, r2
 800a8ce:	f7ff fcd5 	bl	800a27c <_Balloc>
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	b930      	cbnz	r0, 800a8e4 <__d2b+0x24>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	4b24      	ldr	r3, [pc, #144]	; (800a96c <__d2b+0xac>)
 800a8da:	4825      	ldr	r0, [pc, #148]	; (800a970 <__d2b+0xb0>)
 800a8dc:	f240 310f 	movw	r1, #783	; 0x30f
 800a8e0:	f000 fa78 	bl	800add4 <__assert_func>
 800a8e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8ec:	bb2d      	cbnz	r5, 800a93a <__d2b+0x7a>
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	f1b8 0300 	subs.w	r3, r8, #0
 800a8f4:	d026      	beq.n	800a944 <__d2b+0x84>
 800a8f6:	4668      	mov	r0, sp
 800a8f8:	9300      	str	r3, [sp, #0]
 800a8fa:	f7ff fd87 	bl	800a40c <__lo0bits>
 800a8fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a902:	b1e8      	cbz	r0, 800a940 <__d2b+0x80>
 800a904:	f1c0 0320 	rsb	r3, r0, #32
 800a908:	fa02 f303 	lsl.w	r3, r2, r3
 800a90c:	430b      	orrs	r3, r1
 800a90e:	40c2      	lsrs	r2, r0
 800a910:	6163      	str	r3, [r4, #20]
 800a912:	9201      	str	r2, [sp, #4]
 800a914:	9b01      	ldr	r3, [sp, #4]
 800a916:	61a3      	str	r3, [r4, #24]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	bf14      	ite	ne
 800a91c:	2202      	movne	r2, #2
 800a91e:	2201      	moveq	r2, #1
 800a920:	6122      	str	r2, [r4, #16]
 800a922:	b1bd      	cbz	r5, 800a954 <__d2b+0x94>
 800a924:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a928:	4405      	add	r5, r0
 800a92a:	603d      	str	r5, [r7, #0]
 800a92c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a930:	6030      	str	r0, [r6, #0]
 800a932:	4620      	mov	r0, r4
 800a934:	b003      	add	sp, #12
 800a936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a93a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a93e:	e7d6      	b.n	800a8ee <__d2b+0x2e>
 800a940:	6161      	str	r1, [r4, #20]
 800a942:	e7e7      	b.n	800a914 <__d2b+0x54>
 800a944:	a801      	add	r0, sp, #4
 800a946:	f7ff fd61 	bl	800a40c <__lo0bits>
 800a94a:	9b01      	ldr	r3, [sp, #4]
 800a94c:	6163      	str	r3, [r4, #20]
 800a94e:	3020      	adds	r0, #32
 800a950:	2201      	movs	r2, #1
 800a952:	e7e5      	b.n	800a920 <__d2b+0x60>
 800a954:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a958:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a95c:	6038      	str	r0, [r7, #0]
 800a95e:	6918      	ldr	r0, [r3, #16]
 800a960:	f7ff fd34 	bl	800a3cc <__hi0bits>
 800a964:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a968:	e7e2      	b.n	800a930 <__d2b+0x70>
 800a96a:	bf00      	nop
 800a96c:	0800b6a0 	.word	0x0800b6a0
 800a970:	0800b6b1 	.word	0x0800b6b1

0800a974 <__ssputs_r>:
 800a974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a978:	688e      	ldr	r6, [r1, #8]
 800a97a:	461f      	mov	r7, r3
 800a97c:	42be      	cmp	r6, r7
 800a97e:	680b      	ldr	r3, [r1, #0]
 800a980:	4682      	mov	sl, r0
 800a982:	460c      	mov	r4, r1
 800a984:	4690      	mov	r8, r2
 800a986:	d82c      	bhi.n	800a9e2 <__ssputs_r+0x6e>
 800a988:	898a      	ldrh	r2, [r1, #12]
 800a98a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a98e:	d026      	beq.n	800a9de <__ssputs_r+0x6a>
 800a990:	6965      	ldr	r5, [r4, #20]
 800a992:	6909      	ldr	r1, [r1, #16]
 800a994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a998:	eba3 0901 	sub.w	r9, r3, r1
 800a99c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9a0:	1c7b      	adds	r3, r7, #1
 800a9a2:	444b      	add	r3, r9
 800a9a4:	106d      	asrs	r5, r5, #1
 800a9a6:	429d      	cmp	r5, r3
 800a9a8:	bf38      	it	cc
 800a9aa:	461d      	movcc	r5, r3
 800a9ac:	0553      	lsls	r3, r2, #21
 800a9ae:	d527      	bpl.n	800aa00 <__ssputs_r+0x8c>
 800a9b0:	4629      	mov	r1, r5
 800a9b2:	f7ff fbd7 	bl	800a164 <_malloc_r>
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	b360      	cbz	r0, 800aa14 <__ssputs_r+0xa0>
 800a9ba:	6921      	ldr	r1, [r4, #16]
 800a9bc:	464a      	mov	r2, r9
 800a9be:	f7fe fcd2 	bl	8009366 <memcpy>
 800a9c2:	89a3      	ldrh	r3, [r4, #12]
 800a9c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9cc:	81a3      	strh	r3, [r4, #12]
 800a9ce:	6126      	str	r6, [r4, #16]
 800a9d0:	6165      	str	r5, [r4, #20]
 800a9d2:	444e      	add	r6, r9
 800a9d4:	eba5 0509 	sub.w	r5, r5, r9
 800a9d8:	6026      	str	r6, [r4, #0]
 800a9da:	60a5      	str	r5, [r4, #8]
 800a9dc:	463e      	mov	r6, r7
 800a9de:	42be      	cmp	r6, r7
 800a9e0:	d900      	bls.n	800a9e4 <__ssputs_r+0x70>
 800a9e2:	463e      	mov	r6, r7
 800a9e4:	6820      	ldr	r0, [r4, #0]
 800a9e6:	4632      	mov	r2, r6
 800a9e8:	4641      	mov	r1, r8
 800a9ea:	f000 f9c9 	bl	800ad80 <memmove>
 800a9ee:	68a3      	ldr	r3, [r4, #8]
 800a9f0:	1b9b      	subs	r3, r3, r6
 800a9f2:	60a3      	str	r3, [r4, #8]
 800a9f4:	6823      	ldr	r3, [r4, #0]
 800a9f6:	4433      	add	r3, r6
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	2000      	movs	r0, #0
 800a9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa00:	462a      	mov	r2, r5
 800aa02:	f000 fa2d 	bl	800ae60 <_realloc_r>
 800aa06:	4606      	mov	r6, r0
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d1e0      	bne.n	800a9ce <__ssputs_r+0x5a>
 800aa0c:	6921      	ldr	r1, [r4, #16]
 800aa0e:	4650      	mov	r0, sl
 800aa10:	f7ff fb34 	bl	800a07c <_free_r>
 800aa14:	230c      	movs	r3, #12
 800aa16:	f8ca 3000 	str.w	r3, [sl]
 800aa1a:	89a3      	ldrh	r3, [r4, #12]
 800aa1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa20:	81a3      	strh	r3, [r4, #12]
 800aa22:	f04f 30ff 	mov.w	r0, #4294967295
 800aa26:	e7e9      	b.n	800a9fc <__ssputs_r+0x88>

0800aa28 <_svfiprintf_r>:
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	4698      	mov	r8, r3
 800aa2e:	898b      	ldrh	r3, [r1, #12]
 800aa30:	061b      	lsls	r3, r3, #24
 800aa32:	b09d      	sub	sp, #116	; 0x74
 800aa34:	4607      	mov	r7, r0
 800aa36:	460d      	mov	r5, r1
 800aa38:	4614      	mov	r4, r2
 800aa3a:	d50e      	bpl.n	800aa5a <_svfiprintf_r+0x32>
 800aa3c:	690b      	ldr	r3, [r1, #16]
 800aa3e:	b963      	cbnz	r3, 800aa5a <_svfiprintf_r+0x32>
 800aa40:	2140      	movs	r1, #64	; 0x40
 800aa42:	f7ff fb8f 	bl	800a164 <_malloc_r>
 800aa46:	6028      	str	r0, [r5, #0]
 800aa48:	6128      	str	r0, [r5, #16]
 800aa4a:	b920      	cbnz	r0, 800aa56 <_svfiprintf_r+0x2e>
 800aa4c:	230c      	movs	r3, #12
 800aa4e:	603b      	str	r3, [r7, #0]
 800aa50:	f04f 30ff 	mov.w	r0, #4294967295
 800aa54:	e0d0      	b.n	800abf8 <_svfiprintf_r+0x1d0>
 800aa56:	2340      	movs	r3, #64	; 0x40
 800aa58:	616b      	str	r3, [r5, #20]
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa5e:	2320      	movs	r3, #32
 800aa60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa64:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa68:	2330      	movs	r3, #48	; 0x30
 800aa6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ac10 <_svfiprintf_r+0x1e8>
 800aa6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa72:	f04f 0901 	mov.w	r9, #1
 800aa76:	4623      	mov	r3, r4
 800aa78:	469a      	mov	sl, r3
 800aa7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa7e:	b10a      	cbz	r2, 800aa84 <_svfiprintf_r+0x5c>
 800aa80:	2a25      	cmp	r2, #37	; 0x25
 800aa82:	d1f9      	bne.n	800aa78 <_svfiprintf_r+0x50>
 800aa84:	ebba 0b04 	subs.w	fp, sl, r4
 800aa88:	d00b      	beq.n	800aaa2 <_svfiprintf_r+0x7a>
 800aa8a:	465b      	mov	r3, fp
 800aa8c:	4622      	mov	r2, r4
 800aa8e:	4629      	mov	r1, r5
 800aa90:	4638      	mov	r0, r7
 800aa92:	f7ff ff6f 	bl	800a974 <__ssputs_r>
 800aa96:	3001      	adds	r0, #1
 800aa98:	f000 80a9 	beq.w	800abee <_svfiprintf_r+0x1c6>
 800aa9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa9e:	445a      	add	r2, fp
 800aaa0:	9209      	str	r2, [sp, #36]	; 0x24
 800aaa2:	f89a 3000 	ldrb.w	r3, [sl]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	f000 80a1 	beq.w	800abee <_svfiprintf_r+0x1c6>
 800aaac:	2300      	movs	r3, #0
 800aaae:	f04f 32ff 	mov.w	r2, #4294967295
 800aab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aab6:	f10a 0a01 	add.w	sl, sl, #1
 800aaba:	9304      	str	r3, [sp, #16]
 800aabc:	9307      	str	r3, [sp, #28]
 800aabe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aac2:	931a      	str	r3, [sp, #104]	; 0x68
 800aac4:	4654      	mov	r4, sl
 800aac6:	2205      	movs	r2, #5
 800aac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aacc:	4850      	ldr	r0, [pc, #320]	; (800ac10 <_svfiprintf_r+0x1e8>)
 800aace:	f7f5 fb7f 	bl	80001d0 <memchr>
 800aad2:	9a04      	ldr	r2, [sp, #16]
 800aad4:	b9d8      	cbnz	r0, 800ab0e <_svfiprintf_r+0xe6>
 800aad6:	06d0      	lsls	r0, r2, #27
 800aad8:	bf44      	itt	mi
 800aada:	2320      	movmi	r3, #32
 800aadc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aae0:	0711      	lsls	r1, r2, #28
 800aae2:	bf44      	itt	mi
 800aae4:	232b      	movmi	r3, #43	; 0x2b
 800aae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaea:	f89a 3000 	ldrb.w	r3, [sl]
 800aaee:	2b2a      	cmp	r3, #42	; 0x2a
 800aaf0:	d015      	beq.n	800ab1e <_svfiprintf_r+0xf6>
 800aaf2:	9a07      	ldr	r2, [sp, #28]
 800aaf4:	4654      	mov	r4, sl
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	f04f 0c0a 	mov.w	ip, #10
 800aafc:	4621      	mov	r1, r4
 800aafe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab02:	3b30      	subs	r3, #48	; 0x30
 800ab04:	2b09      	cmp	r3, #9
 800ab06:	d94d      	bls.n	800aba4 <_svfiprintf_r+0x17c>
 800ab08:	b1b0      	cbz	r0, 800ab38 <_svfiprintf_r+0x110>
 800ab0a:	9207      	str	r2, [sp, #28]
 800ab0c:	e014      	b.n	800ab38 <_svfiprintf_r+0x110>
 800ab0e:	eba0 0308 	sub.w	r3, r0, r8
 800ab12:	fa09 f303 	lsl.w	r3, r9, r3
 800ab16:	4313      	orrs	r3, r2
 800ab18:	9304      	str	r3, [sp, #16]
 800ab1a:	46a2      	mov	sl, r4
 800ab1c:	e7d2      	b.n	800aac4 <_svfiprintf_r+0x9c>
 800ab1e:	9b03      	ldr	r3, [sp, #12]
 800ab20:	1d19      	adds	r1, r3, #4
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	9103      	str	r1, [sp, #12]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	bfbb      	ittet	lt
 800ab2a:	425b      	neglt	r3, r3
 800ab2c:	f042 0202 	orrlt.w	r2, r2, #2
 800ab30:	9307      	strge	r3, [sp, #28]
 800ab32:	9307      	strlt	r3, [sp, #28]
 800ab34:	bfb8      	it	lt
 800ab36:	9204      	strlt	r2, [sp, #16]
 800ab38:	7823      	ldrb	r3, [r4, #0]
 800ab3a:	2b2e      	cmp	r3, #46	; 0x2e
 800ab3c:	d10c      	bne.n	800ab58 <_svfiprintf_r+0x130>
 800ab3e:	7863      	ldrb	r3, [r4, #1]
 800ab40:	2b2a      	cmp	r3, #42	; 0x2a
 800ab42:	d134      	bne.n	800abae <_svfiprintf_r+0x186>
 800ab44:	9b03      	ldr	r3, [sp, #12]
 800ab46:	1d1a      	adds	r2, r3, #4
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	9203      	str	r2, [sp, #12]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	bfb8      	it	lt
 800ab50:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab54:	3402      	adds	r4, #2
 800ab56:	9305      	str	r3, [sp, #20]
 800ab58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ac20 <_svfiprintf_r+0x1f8>
 800ab5c:	7821      	ldrb	r1, [r4, #0]
 800ab5e:	2203      	movs	r2, #3
 800ab60:	4650      	mov	r0, sl
 800ab62:	f7f5 fb35 	bl	80001d0 <memchr>
 800ab66:	b138      	cbz	r0, 800ab78 <_svfiprintf_r+0x150>
 800ab68:	9b04      	ldr	r3, [sp, #16]
 800ab6a:	eba0 000a 	sub.w	r0, r0, sl
 800ab6e:	2240      	movs	r2, #64	; 0x40
 800ab70:	4082      	lsls	r2, r0
 800ab72:	4313      	orrs	r3, r2
 800ab74:	3401      	adds	r4, #1
 800ab76:	9304      	str	r3, [sp, #16]
 800ab78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab7c:	4825      	ldr	r0, [pc, #148]	; (800ac14 <_svfiprintf_r+0x1ec>)
 800ab7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab82:	2206      	movs	r2, #6
 800ab84:	f7f5 fb24 	bl	80001d0 <memchr>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d038      	beq.n	800abfe <_svfiprintf_r+0x1d6>
 800ab8c:	4b22      	ldr	r3, [pc, #136]	; (800ac18 <_svfiprintf_r+0x1f0>)
 800ab8e:	bb1b      	cbnz	r3, 800abd8 <_svfiprintf_r+0x1b0>
 800ab90:	9b03      	ldr	r3, [sp, #12]
 800ab92:	3307      	adds	r3, #7
 800ab94:	f023 0307 	bic.w	r3, r3, #7
 800ab98:	3308      	adds	r3, #8
 800ab9a:	9303      	str	r3, [sp, #12]
 800ab9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab9e:	4433      	add	r3, r6
 800aba0:	9309      	str	r3, [sp, #36]	; 0x24
 800aba2:	e768      	b.n	800aa76 <_svfiprintf_r+0x4e>
 800aba4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aba8:	460c      	mov	r4, r1
 800abaa:	2001      	movs	r0, #1
 800abac:	e7a6      	b.n	800aafc <_svfiprintf_r+0xd4>
 800abae:	2300      	movs	r3, #0
 800abb0:	3401      	adds	r4, #1
 800abb2:	9305      	str	r3, [sp, #20]
 800abb4:	4619      	mov	r1, r3
 800abb6:	f04f 0c0a 	mov.w	ip, #10
 800abba:	4620      	mov	r0, r4
 800abbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abc0:	3a30      	subs	r2, #48	; 0x30
 800abc2:	2a09      	cmp	r2, #9
 800abc4:	d903      	bls.n	800abce <_svfiprintf_r+0x1a6>
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d0c6      	beq.n	800ab58 <_svfiprintf_r+0x130>
 800abca:	9105      	str	r1, [sp, #20]
 800abcc:	e7c4      	b.n	800ab58 <_svfiprintf_r+0x130>
 800abce:	fb0c 2101 	mla	r1, ip, r1, r2
 800abd2:	4604      	mov	r4, r0
 800abd4:	2301      	movs	r3, #1
 800abd6:	e7f0      	b.n	800abba <_svfiprintf_r+0x192>
 800abd8:	ab03      	add	r3, sp, #12
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	462a      	mov	r2, r5
 800abde:	4b0f      	ldr	r3, [pc, #60]	; (800ac1c <_svfiprintf_r+0x1f4>)
 800abe0:	a904      	add	r1, sp, #16
 800abe2:	4638      	mov	r0, r7
 800abe4:	f7fd fe3e 	bl	8008864 <_printf_float>
 800abe8:	1c42      	adds	r2, r0, #1
 800abea:	4606      	mov	r6, r0
 800abec:	d1d6      	bne.n	800ab9c <_svfiprintf_r+0x174>
 800abee:	89ab      	ldrh	r3, [r5, #12]
 800abf0:	065b      	lsls	r3, r3, #25
 800abf2:	f53f af2d 	bmi.w	800aa50 <_svfiprintf_r+0x28>
 800abf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abf8:	b01d      	add	sp, #116	; 0x74
 800abfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfe:	ab03      	add	r3, sp, #12
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	462a      	mov	r2, r5
 800ac04:	4b05      	ldr	r3, [pc, #20]	; (800ac1c <_svfiprintf_r+0x1f4>)
 800ac06:	a904      	add	r1, sp, #16
 800ac08:	4638      	mov	r0, r7
 800ac0a:	f7fe f8cf 	bl	8008dac <_printf_i>
 800ac0e:	e7eb      	b.n	800abe8 <_svfiprintf_r+0x1c0>
 800ac10:	0800b80c 	.word	0x0800b80c
 800ac14:	0800b816 	.word	0x0800b816
 800ac18:	08008865 	.word	0x08008865
 800ac1c:	0800a975 	.word	0x0800a975
 800ac20:	0800b812 	.word	0x0800b812

0800ac24 <__sflush_r>:
 800ac24:	898a      	ldrh	r2, [r1, #12]
 800ac26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2a:	4605      	mov	r5, r0
 800ac2c:	0710      	lsls	r0, r2, #28
 800ac2e:	460c      	mov	r4, r1
 800ac30:	d458      	bmi.n	800ace4 <__sflush_r+0xc0>
 800ac32:	684b      	ldr	r3, [r1, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	dc05      	bgt.n	800ac44 <__sflush_r+0x20>
 800ac38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	dc02      	bgt.n	800ac44 <__sflush_r+0x20>
 800ac3e:	2000      	movs	r0, #0
 800ac40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac46:	2e00      	cmp	r6, #0
 800ac48:	d0f9      	beq.n	800ac3e <__sflush_r+0x1a>
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac50:	682f      	ldr	r7, [r5, #0]
 800ac52:	6a21      	ldr	r1, [r4, #32]
 800ac54:	602b      	str	r3, [r5, #0]
 800ac56:	d032      	beq.n	800acbe <__sflush_r+0x9a>
 800ac58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	075a      	lsls	r2, r3, #29
 800ac5e:	d505      	bpl.n	800ac6c <__sflush_r+0x48>
 800ac60:	6863      	ldr	r3, [r4, #4]
 800ac62:	1ac0      	subs	r0, r0, r3
 800ac64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac66:	b10b      	cbz	r3, 800ac6c <__sflush_r+0x48>
 800ac68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac6a:	1ac0      	subs	r0, r0, r3
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	4602      	mov	r2, r0
 800ac70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac72:	6a21      	ldr	r1, [r4, #32]
 800ac74:	4628      	mov	r0, r5
 800ac76:	47b0      	blx	r6
 800ac78:	1c43      	adds	r3, r0, #1
 800ac7a:	89a3      	ldrh	r3, [r4, #12]
 800ac7c:	d106      	bne.n	800ac8c <__sflush_r+0x68>
 800ac7e:	6829      	ldr	r1, [r5, #0]
 800ac80:	291d      	cmp	r1, #29
 800ac82:	d82b      	bhi.n	800acdc <__sflush_r+0xb8>
 800ac84:	4a29      	ldr	r2, [pc, #164]	; (800ad2c <__sflush_r+0x108>)
 800ac86:	410a      	asrs	r2, r1
 800ac88:	07d6      	lsls	r6, r2, #31
 800ac8a:	d427      	bmi.n	800acdc <__sflush_r+0xb8>
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	6062      	str	r2, [r4, #4]
 800ac90:	04d9      	lsls	r1, r3, #19
 800ac92:	6922      	ldr	r2, [r4, #16]
 800ac94:	6022      	str	r2, [r4, #0]
 800ac96:	d504      	bpl.n	800aca2 <__sflush_r+0x7e>
 800ac98:	1c42      	adds	r2, r0, #1
 800ac9a:	d101      	bne.n	800aca0 <__sflush_r+0x7c>
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	b903      	cbnz	r3, 800aca2 <__sflush_r+0x7e>
 800aca0:	6560      	str	r0, [r4, #84]	; 0x54
 800aca2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aca4:	602f      	str	r7, [r5, #0]
 800aca6:	2900      	cmp	r1, #0
 800aca8:	d0c9      	beq.n	800ac3e <__sflush_r+0x1a>
 800acaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acae:	4299      	cmp	r1, r3
 800acb0:	d002      	beq.n	800acb8 <__sflush_r+0x94>
 800acb2:	4628      	mov	r0, r5
 800acb4:	f7ff f9e2 	bl	800a07c <_free_r>
 800acb8:	2000      	movs	r0, #0
 800acba:	6360      	str	r0, [r4, #52]	; 0x34
 800acbc:	e7c0      	b.n	800ac40 <__sflush_r+0x1c>
 800acbe:	2301      	movs	r3, #1
 800acc0:	4628      	mov	r0, r5
 800acc2:	47b0      	blx	r6
 800acc4:	1c41      	adds	r1, r0, #1
 800acc6:	d1c8      	bne.n	800ac5a <__sflush_r+0x36>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d0c5      	beq.n	800ac5a <__sflush_r+0x36>
 800acce:	2b1d      	cmp	r3, #29
 800acd0:	d001      	beq.n	800acd6 <__sflush_r+0xb2>
 800acd2:	2b16      	cmp	r3, #22
 800acd4:	d101      	bne.n	800acda <__sflush_r+0xb6>
 800acd6:	602f      	str	r7, [r5, #0]
 800acd8:	e7b1      	b.n	800ac3e <__sflush_r+0x1a>
 800acda:	89a3      	ldrh	r3, [r4, #12]
 800acdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ace0:	81a3      	strh	r3, [r4, #12]
 800ace2:	e7ad      	b.n	800ac40 <__sflush_r+0x1c>
 800ace4:	690f      	ldr	r7, [r1, #16]
 800ace6:	2f00      	cmp	r7, #0
 800ace8:	d0a9      	beq.n	800ac3e <__sflush_r+0x1a>
 800acea:	0793      	lsls	r3, r2, #30
 800acec:	680e      	ldr	r6, [r1, #0]
 800acee:	bf08      	it	eq
 800acf0:	694b      	ldreq	r3, [r1, #20]
 800acf2:	600f      	str	r7, [r1, #0]
 800acf4:	bf18      	it	ne
 800acf6:	2300      	movne	r3, #0
 800acf8:	eba6 0807 	sub.w	r8, r6, r7
 800acfc:	608b      	str	r3, [r1, #8]
 800acfe:	f1b8 0f00 	cmp.w	r8, #0
 800ad02:	dd9c      	ble.n	800ac3e <__sflush_r+0x1a>
 800ad04:	6a21      	ldr	r1, [r4, #32]
 800ad06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad08:	4643      	mov	r3, r8
 800ad0a:	463a      	mov	r2, r7
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	47b0      	blx	r6
 800ad10:	2800      	cmp	r0, #0
 800ad12:	dc06      	bgt.n	800ad22 <__sflush_r+0xfe>
 800ad14:	89a3      	ldrh	r3, [r4, #12]
 800ad16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad1a:	81a3      	strh	r3, [r4, #12]
 800ad1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad20:	e78e      	b.n	800ac40 <__sflush_r+0x1c>
 800ad22:	4407      	add	r7, r0
 800ad24:	eba8 0800 	sub.w	r8, r8, r0
 800ad28:	e7e9      	b.n	800acfe <__sflush_r+0xda>
 800ad2a:	bf00      	nop
 800ad2c:	dfbffffe 	.word	0xdfbffffe

0800ad30 <_fflush_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	690b      	ldr	r3, [r1, #16]
 800ad34:	4605      	mov	r5, r0
 800ad36:	460c      	mov	r4, r1
 800ad38:	b913      	cbnz	r3, 800ad40 <_fflush_r+0x10>
 800ad3a:	2500      	movs	r5, #0
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
 800ad40:	b118      	cbz	r0, 800ad4a <_fflush_r+0x1a>
 800ad42:	6a03      	ldr	r3, [r0, #32]
 800ad44:	b90b      	cbnz	r3, 800ad4a <_fflush_r+0x1a>
 800ad46:	f7fe f9df 	bl	8009108 <__sinit>
 800ad4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d0f3      	beq.n	800ad3a <_fflush_r+0xa>
 800ad52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad54:	07d0      	lsls	r0, r2, #31
 800ad56:	d404      	bmi.n	800ad62 <_fflush_r+0x32>
 800ad58:	0599      	lsls	r1, r3, #22
 800ad5a:	d402      	bmi.n	800ad62 <_fflush_r+0x32>
 800ad5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad5e:	f7fe fb00 	bl	8009362 <__retarget_lock_acquire_recursive>
 800ad62:	4628      	mov	r0, r5
 800ad64:	4621      	mov	r1, r4
 800ad66:	f7ff ff5d 	bl	800ac24 <__sflush_r>
 800ad6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad6c:	07da      	lsls	r2, r3, #31
 800ad6e:	4605      	mov	r5, r0
 800ad70:	d4e4      	bmi.n	800ad3c <_fflush_r+0xc>
 800ad72:	89a3      	ldrh	r3, [r4, #12]
 800ad74:	059b      	lsls	r3, r3, #22
 800ad76:	d4e1      	bmi.n	800ad3c <_fflush_r+0xc>
 800ad78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad7a:	f7fe faf3 	bl	8009364 <__retarget_lock_release_recursive>
 800ad7e:	e7dd      	b.n	800ad3c <_fflush_r+0xc>

0800ad80 <memmove>:
 800ad80:	4288      	cmp	r0, r1
 800ad82:	b510      	push	{r4, lr}
 800ad84:	eb01 0402 	add.w	r4, r1, r2
 800ad88:	d902      	bls.n	800ad90 <memmove+0x10>
 800ad8a:	4284      	cmp	r4, r0
 800ad8c:	4623      	mov	r3, r4
 800ad8e:	d807      	bhi.n	800ada0 <memmove+0x20>
 800ad90:	1e43      	subs	r3, r0, #1
 800ad92:	42a1      	cmp	r1, r4
 800ad94:	d008      	beq.n	800ada8 <memmove+0x28>
 800ad96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad9e:	e7f8      	b.n	800ad92 <memmove+0x12>
 800ada0:	4402      	add	r2, r0
 800ada2:	4601      	mov	r1, r0
 800ada4:	428a      	cmp	r2, r1
 800ada6:	d100      	bne.n	800adaa <memmove+0x2a>
 800ada8:	bd10      	pop	{r4, pc}
 800adaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adb2:	e7f7      	b.n	800ada4 <memmove+0x24>

0800adb4 <_sbrk_r>:
 800adb4:	b538      	push	{r3, r4, r5, lr}
 800adb6:	4d06      	ldr	r5, [pc, #24]	; (800add0 <_sbrk_r+0x1c>)
 800adb8:	2300      	movs	r3, #0
 800adba:	4604      	mov	r4, r0
 800adbc:	4608      	mov	r0, r1
 800adbe:	602b      	str	r3, [r5, #0]
 800adc0:	f7f7 fc02 	bl	80025c8 <_sbrk>
 800adc4:	1c43      	adds	r3, r0, #1
 800adc6:	d102      	bne.n	800adce <_sbrk_r+0x1a>
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	b103      	cbz	r3, 800adce <_sbrk_r+0x1a>
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	bd38      	pop	{r3, r4, r5, pc}
 800add0:	200008a4 	.word	0x200008a4

0800add4 <__assert_func>:
 800add4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800add6:	4614      	mov	r4, r2
 800add8:	461a      	mov	r2, r3
 800adda:	4b09      	ldr	r3, [pc, #36]	; (800ae00 <__assert_func+0x2c>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4605      	mov	r5, r0
 800ade0:	68d8      	ldr	r0, [r3, #12]
 800ade2:	b14c      	cbz	r4, 800adf8 <__assert_func+0x24>
 800ade4:	4b07      	ldr	r3, [pc, #28]	; (800ae04 <__assert_func+0x30>)
 800ade6:	9100      	str	r1, [sp, #0]
 800ade8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adec:	4906      	ldr	r1, [pc, #24]	; (800ae08 <__assert_func+0x34>)
 800adee:	462b      	mov	r3, r5
 800adf0:	f000 f872 	bl	800aed8 <fiprintf>
 800adf4:	f000 f882 	bl	800aefc <abort>
 800adf8:	4b04      	ldr	r3, [pc, #16]	; (800ae0c <__assert_func+0x38>)
 800adfa:	461c      	mov	r4, r3
 800adfc:	e7f3      	b.n	800ade6 <__assert_func+0x12>
 800adfe:	bf00      	nop
 800ae00:	2000006c 	.word	0x2000006c
 800ae04:	0800b827 	.word	0x0800b827
 800ae08:	0800b834 	.word	0x0800b834
 800ae0c:	0800b862 	.word	0x0800b862

0800ae10 <_calloc_r>:
 800ae10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae12:	fba1 2402 	umull	r2, r4, r1, r2
 800ae16:	b94c      	cbnz	r4, 800ae2c <_calloc_r+0x1c>
 800ae18:	4611      	mov	r1, r2
 800ae1a:	9201      	str	r2, [sp, #4]
 800ae1c:	f7ff f9a2 	bl	800a164 <_malloc_r>
 800ae20:	9a01      	ldr	r2, [sp, #4]
 800ae22:	4605      	mov	r5, r0
 800ae24:	b930      	cbnz	r0, 800ae34 <_calloc_r+0x24>
 800ae26:	4628      	mov	r0, r5
 800ae28:	b003      	add	sp, #12
 800ae2a:	bd30      	pop	{r4, r5, pc}
 800ae2c:	220c      	movs	r2, #12
 800ae2e:	6002      	str	r2, [r0, #0]
 800ae30:	2500      	movs	r5, #0
 800ae32:	e7f8      	b.n	800ae26 <_calloc_r+0x16>
 800ae34:	4621      	mov	r1, r4
 800ae36:	f7fe fa00 	bl	800923a <memset>
 800ae3a:	e7f4      	b.n	800ae26 <_calloc_r+0x16>

0800ae3c <__ascii_mbtowc>:
 800ae3c:	b082      	sub	sp, #8
 800ae3e:	b901      	cbnz	r1, 800ae42 <__ascii_mbtowc+0x6>
 800ae40:	a901      	add	r1, sp, #4
 800ae42:	b142      	cbz	r2, 800ae56 <__ascii_mbtowc+0x1a>
 800ae44:	b14b      	cbz	r3, 800ae5a <__ascii_mbtowc+0x1e>
 800ae46:	7813      	ldrb	r3, [r2, #0]
 800ae48:	600b      	str	r3, [r1, #0]
 800ae4a:	7812      	ldrb	r2, [r2, #0]
 800ae4c:	1e10      	subs	r0, r2, #0
 800ae4e:	bf18      	it	ne
 800ae50:	2001      	movne	r0, #1
 800ae52:	b002      	add	sp, #8
 800ae54:	4770      	bx	lr
 800ae56:	4610      	mov	r0, r2
 800ae58:	e7fb      	b.n	800ae52 <__ascii_mbtowc+0x16>
 800ae5a:	f06f 0001 	mvn.w	r0, #1
 800ae5e:	e7f8      	b.n	800ae52 <__ascii_mbtowc+0x16>

0800ae60 <_realloc_r>:
 800ae60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae64:	4680      	mov	r8, r0
 800ae66:	4614      	mov	r4, r2
 800ae68:	460e      	mov	r6, r1
 800ae6a:	b921      	cbnz	r1, 800ae76 <_realloc_r+0x16>
 800ae6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae70:	4611      	mov	r1, r2
 800ae72:	f7ff b977 	b.w	800a164 <_malloc_r>
 800ae76:	b92a      	cbnz	r2, 800ae84 <_realloc_r+0x24>
 800ae78:	f7ff f900 	bl	800a07c <_free_r>
 800ae7c:	4625      	mov	r5, r4
 800ae7e:	4628      	mov	r0, r5
 800ae80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae84:	f000 f841 	bl	800af0a <_malloc_usable_size_r>
 800ae88:	4284      	cmp	r4, r0
 800ae8a:	4607      	mov	r7, r0
 800ae8c:	d802      	bhi.n	800ae94 <_realloc_r+0x34>
 800ae8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae92:	d812      	bhi.n	800aeba <_realloc_r+0x5a>
 800ae94:	4621      	mov	r1, r4
 800ae96:	4640      	mov	r0, r8
 800ae98:	f7ff f964 	bl	800a164 <_malloc_r>
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	d0ed      	beq.n	800ae7e <_realloc_r+0x1e>
 800aea2:	42bc      	cmp	r4, r7
 800aea4:	4622      	mov	r2, r4
 800aea6:	4631      	mov	r1, r6
 800aea8:	bf28      	it	cs
 800aeaa:	463a      	movcs	r2, r7
 800aeac:	f7fe fa5b 	bl	8009366 <memcpy>
 800aeb0:	4631      	mov	r1, r6
 800aeb2:	4640      	mov	r0, r8
 800aeb4:	f7ff f8e2 	bl	800a07c <_free_r>
 800aeb8:	e7e1      	b.n	800ae7e <_realloc_r+0x1e>
 800aeba:	4635      	mov	r5, r6
 800aebc:	e7df      	b.n	800ae7e <_realloc_r+0x1e>

0800aebe <__ascii_wctomb>:
 800aebe:	b149      	cbz	r1, 800aed4 <__ascii_wctomb+0x16>
 800aec0:	2aff      	cmp	r2, #255	; 0xff
 800aec2:	bf85      	ittet	hi
 800aec4:	238a      	movhi	r3, #138	; 0x8a
 800aec6:	6003      	strhi	r3, [r0, #0]
 800aec8:	700a      	strbls	r2, [r1, #0]
 800aeca:	f04f 30ff 	movhi.w	r0, #4294967295
 800aece:	bf98      	it	ls
 800aed0:	2001      	movls	r0, #1
 800aed2:	4770      	bx	lr
 800aed4:	4608      	mov	r0, r1
 800aed6:	4770      	bx	lr

0800aed8 <fiprintf>:
 800aed8:	b40e      	push	{r1, r2, r3}
 800aeda:	b503      	push	{r0, r1, lr}
 800aedc:	4601      	mov	r1, r0
 800aede:	ab03      	add	r3, sp, #12
 800aee0:	4805      	ldr	r0, [pc, #20]	; (800aef8 <fiprintf+0x20>)
 800aee2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aee6:	6800      	ldr	r0, [r0, #0]
 800aee8:	9301      	str	r3, [sp, #4]
 800aeea:	f000 f83f 	bl	800af6c <_vfiprintf_r>
 800aeee:	b002      	add	sp, #8
 800aef0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aef4:	b003      	add	sp, #12
 800aef6:	4770      	bx	lr
 800aef8:	2000006c 	.word	0x2000006c

0800aefc <abort>:
 800aefc:	b508      	push	{r3, lr}
 800aefe:	2006      	movs	r0, #6
 800af00:	f000 fa0c 	bl	800b31c <raise>
 800af04:	2001      	movs	r0, #1
 800af06:	f7f7 fae7 	bl	80024d8 <_exit>

0800af0a <_malloc_usable_size_r>:
 800af0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af0e:	1f18      	subs	r0, r3, #4
 800af10:	2b00      	cmp	r3, #0
 800af12:	bfbc      	itt	lt
 800af14:	580b      	ldrlt	r3, [r1, r0]
 800af16:	18c0      	addlt	r0, r0, r3
 800af18:	4770      	bx	lr

0800af1a <__sfputc_r>:
 800af1a:	6893      	ldr	r3, [r2, #8]
 800af1c:	3b01      	subs	r3, #1
 800af1e:	2b00      	cmp	r3, #0
 800af20:	b410      	push	{r4}
 800af22:	6093      	str	r3, [r2, #8]
 800af24:	da08      	bge.n	800af38 <__sfputc_r+0x1e>
 800af26:	6994      	ldr	r4, [r2, #24]
 800af28:	42a3      	cmp	r3, r4
 800af2a:	db01      	blt.n	800af30 <__sfputc_r+0x16>
 800af2c:	290a      	cmp	r1, #10
 800af2e:	d103      	bne.n	800af38 <__sfputc_r+0x1e>
 800af30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af34:	f000 b934 	b.w	800b1a0 <__swbuf_r>
 800af38:	6813      	ldr	r3, [r2, #0]
 800af3a:	1c58      	adds	r0, r3, #1
 800af3c:	6010      	str	r0, [r2, #0]
 800af3e:	7019      	strb	r1, [r3, #0]
 800af40:	4608      	mov	r0, r1
 800af42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <__sfputs_r>:
 800af48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4a:	4606      	mov	r6, r0
 800af4c:	460f      	mov	r7, r1
 800af4e:	4614      	mov	r4, r2
 800af50:	18d5      	adds	r5, r2, r3
 800af52:	42ac      	cmp	r4, r5
 800af54:	d101      	bne.n	800af5a <__sfputs_r+0x12>
 800af56:	2000      	movs	r0, #0
 800af58:	e007      	b.n	800af6a <__sfputs_r+0x22>
 800af5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af5e:	463a      	mov	r2, r7
 800af60:	4630      	mov	r0, r6
 800af62:	f7ff ffda 	bl	800af1a <__sfputc_r>
 800af66:	1c43      	adds	r3, r0, #1
 800af68:	d1f3      	bne.n	800af52 <__sfputs_r+0xa>
 800af6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af6c <_vfiprintf_r>:
 800af6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af70:	460d      	mov	r5, r1
 800af72:	b09d      	sub	sp, #116	; 0x74
 800af74:	4614      	mov	r4, r2
 800af76:	4698      	mov	r8, r3
 800af78:	4606      	mov	r6, r0
 800af7a:	b118      	cbz	r0, 800af84 <_vfiprintf_r+0x18>
 800af7c:	6a03      	ldr	r3, [r0, #32]
 800af7e:	b90b      	cbnz	r3, 800af84 <_vfiprintf_r+0x18>
 800af80:	f7fe f8c2 	bl	8009108 <__sinit>
 800af84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af86:	07d9      	lsls	r1, r3, #31
 800af88:	d405      	bmi.n	800af96 <_vfiprintf_r+0x2a>
 800af8a:	89ab      	ldrh	r3, [r5, #12]
 800af8c:	059a      	lsls	r2, r3, #22
 800af8e:	d402      	bmi.n	800af96 <_vfiprintf_r+0x2a>
 800af90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af92:	f7fe f9e6 	bl	8009362 <__retarget_lock_acquire_recursive>
 800af96:	89ab      	ldrh	r3, [r5, #12]
 800af98:	071b      	lsls	r3, r3, #28
 800af9a:	d501      	bpl.n	800afa0 <_vfiprintf_r+0x34>
 800af9c:	692b      	ldr	r3, [r5, #16]
 800af9e:	b99b      	cbnz	r3, 800afc8 <_vfiprintf_r+0x5c>
 800afa0:	4629      	mov	r1, r5
 800afa2:	4630      	mov	r0, r6
 800afa4:	f000 f93a 	bl	800b21c <__swsetup_r>
 800afa8:	b170      	cbz	r0, 800afc8 <_vfiprintf_r+0x5c>
 800afaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afac:	07dc      	lsls	r4, r3, #31
 800afae:	d504      	bpl.n	800afba <_vfiprintf_r+0x4e>
 800afb0:	f04f 30ff 	mov.w	r0, #4294967295
 800afb4:	b01d      	add	sp, #116	; 0x74
 800afb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afba:	89ab      	ldrh	r3, [r5, #12]
 800afbc:	0598      	lsls	r0, r3, #22
 800afbe:	d4f7      	bmi.n	800afb0 <_vfiprintf_r+0x44>
 800afc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afc2:	f7fe f9cf 	bl	8009364 <__retarget_lock_release_recursive>
 800afc6:	e7f3      	b.n	800afb0 <_vfiprintf_r+0x44>
 800afc8:	2300      	movs	r3, #0
 800afca:	9309      	str	r3, [sp, #36]	; 0x24
 800afcc:	2320      	movs	r3, #32
 800afce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afd2:	f8cd 800c 	str.w	r8, [sp, #12]
 800afd6:	2330      	movs	r3, #48	; 0x30
 800afd8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b18c <_vfiprintf_r+0x220>
 800afdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afe0:	f04f 0901 	mov.w	r9, #1
 800afe4:	4623      	mov	r3, r4
 800afe6:	469a      	mov	sl, r3
 800afe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afec:	b10a      	cbz	r2, 800aff2 <_vfiprintf_r+0x86>
 800afee:	2a25      	cmp	r2, #37	; 0x25
 800aff0:	d1f9      	bne.n	800afe6 <_vfiprintf_r+0x7a>
 800aff2:	ebba 0b04 	subs.w	fp, sl, r4
 800aff6:	d00b      	beq.n	800b010 <_vfiprintf_r+0xa4>
 800aff8:	465b      	mov	r3, fp
 800affa:	4622      	mov	r2, r4
 800affc:	4629      	mov	r1, r5
 800affe:	4630      	mov	r0, r6
 800b000:	f7ff ffa2 	bl	800af48 <__sfputs_r>
 800b004:	3001      	adds	r0, #1
 800b006:	f000 80a9 	beq.w	800b15c <_vfiprintf_r+0x1f0>
 800b00a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b00c:	445a      	add	r2, fp
 800b00e:	9209      	str	r2, [sp, #36]	; 0x24
 800b010:	f89a 3000 	ldrb.w	r3, [sl]
 800b014:	2b00      	cmp	r3, #0
 800b016:	f000 80a1 	beq.w	800b15c <_vfiprintf_r+0x1f0>
 800b01a:	2300      	movs	r3, #0
 800b01c:	f04f 32ff 	mov.w	r2, #4294967295
 800b020:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b024:	f10a 0a01 	add.w	sl, sl, #1
 800b028:	9304      	str	r3, [sp, #16]
 800b02a:	9307      	str	r3, [sp, #28]
 800b02c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b030:	931a      	str	r3, [sp, #104]	; 0x68
 800b032:	4654      	mov	r4, sl
 800b034:	2205      	movs	r2, #5
 800b036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b03a:	4854      	ldr	r0, [pc, #336]	; (800b18c <_vfiprintf_r+0x220>)
 800b03c:	f7f5 f8c8 	bl	80001d0 <memchr>
 800b040:	9a04      	ldr	r2, [sp, #16]
 800b042:	b9d8      	cbnz	r0, 800b07c <_vfiprintf_r+0x110>
 800b044:	06d1      	lsls	r1, r2, #27
 800b046:	bf44      	itt	mi
 800b048:	2320      	movmi	r3, #32
 800b04a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b04e:	0713      	lsls	r3, r2, #28
 800b050:	bf44      	itt	mi
 800b052:	232b      	movmi	r3, #43	; 0x2b
 800b054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b058:	f89a 3000 	ldrb.w	r3, [sl]
 800b05c:	2b2a      	cmp	r3, #42	; 0x2a
 800b05e:	d015      	beq.n	800b08c <_vfiprintf_r+0x120>
 800b060:	9a07      	ldr	r2, [sp, #28]
 800b062:	4654      	mov	r4, sl
 800b064:	2000      	movs	r0, #0
 800b066:	f04f 0c0a 	mov.w	ip, #10
 800b06a:	4621      	mov	r1, r4
 800b06c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b070:	3b30      	subs	r3, #48	; 0x30
 800b072:	2b09      	cmp	r3, #9
 800b074:	d94d      	bls.n	800b112 <_vfiprintf_r+0x1a6>
 800b076:	b1b0      	cbz	r0, 800b0a6 <_vfiprintf_r+0x13a>
 800b078:	9207      	str	r2, [sp, #28]
 800b07a:	e014      	b.n	800b0a6 <_vfiprintf_r+0x13a>
 800b07c:	eba0 0308 	sub.w	r3, r0, r8
 800b080:	fa09 f303 	lsl.w	r3, r9, r3
 800b084:	4313      	orrs	r3, r2
 800b086:	9304      	str	r3, [sp, #16]
 800b088:	46a2      	mov	sl, r4
 800b08a:	e7d2      	b.n	800b032 <_vfiprintf_r+0xc6>
 800b08c:	9b03      	ldr	r3, [sp, #12]
 800b08e:	1d19      	adds	r1, r3, #4
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	9103      	str	r1, [sp, #12]
 800b094:	2b00      	cmp	r3, #0
 800b096:	bfbb      	ittet	lt
 800b098:	425b      	neglt	r3, r3
 800b09a:	f042 0202 	orrlt.w	r2, r2, #2
 800b09e:	9307      	strge	r3, [sp, #28]
 800b0a0:	9307      	strlt	r3, [sp, #28]
 800b0a2:	bfb8      	it	lt
 800b0a4:	9204      	strlt	r2, [sp, #16]
 800b0a6:	7823      	ldrb	r3, [r4, #0]
 800b0a8:	2b2e      	cmp	r3, #46	; 0x2e
 800b0aa:	d10c      	bne.n	800b0c6 <_vfiprintf_r+0x15a>
 800b0ac:	7863      	ldrb	r3, [r4, #1]
 800b0ae:	2b2a      	cmp	r3, #42	; 0x2a
 800b0b0:	d134      	bne.n	800b11c <_vfiprintf_r+0x1b0>
 800b0b2:	9b03      	ldr	r3, [sp, #12]
 800b0b4:	1d1a      	adds	r2, r3, #4
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	9203      	str	r2, [sp, #12]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	bfb8      	it	lt
 800b0be:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0c2:	3402      	adds	r4, #2
 800b0c4:	9305      	str	r3, [sp, #20]
 800b0c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b19c <_vfiprintf_r+0x230>
 800b0ca:	7821      	ldrb	r1, [r4, #0]
 800b0cc:	2203      	movs	r2, #3
 800b0ce:	4650      	mov	r0, sl
 800b0d0:	f7f5 f87e 	bl	80001d0 <memchr>
 800b0d4:	b138      	cbz	r0, 800b0e6 <_vfiprintf_r+0x17a>
 800b0d6:	9b04      	ldr	r3, [sp, #16]
 800b0d8:	eba0 000a 	sub.w	r0, r0, sl
 800b0dc:	2240      	movs	r2, #64	; 0x40
 800b0de:	4082      	lsls	r2, r0
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	3401      	adds	r4, #1
 800b0e4:	9304      	str	r3, [sp, #16]
 800b0e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ea:	4829      	ldr	r0, [pc, #164]	; (800b190 <_vfiprintf_r+0x224>)
 800b0ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0f0:	2206      	movs	r2, #6
 800b0f2:	f7f5 f86d 	bl	80001d0 <memchr>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	d03f      	beq.n	800b17a <_vfiprintf_r+0x20e>
 800b0fa:	4b26      	ldr	r3, [pc, #152]	; (800b194 <_vfiprintf_r+0x228>)
 800b0fc:	bb1b      	cbnz	r3, 800b146 <_vfiprintf_r+0x1da>
 800b0fe:	9b03      	ldr	r3, [sp, #12]
 800b100:	3307      	adds	r3, #7
 800b102:	f023 0307 	bic.w	r3, r3, #7
 800b106:	3308      	adds	r3, #8
 800b108:	9303      	str	r3, [sp, #12]
 800b10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b10c:	443b      	add	r3, r7
 800b10e:	9309      	str	r3, [sp, #36]	; 0x24
 800b110:	e768      	b.n	800afe4 <_vfiprintf_r+0x78>
 800b112:	fb0c 3202 	mla	r2, ip, r2, r3
 800b116:	460c      	mov	r4, r1
 800b118:	2001      	movs	r0, #1
 800b11a:	e7a6      	b.n	800b06a <_vfiprintf_r+0xfe>
 800b11c:	2300      	movs	r3, #0
 800b11e:	3401      	adds	r4, #1
 800b120:	9305      	str	r3, [sp, #20]
 800b122:	4619      	mov	r1, r3
 800b124:	f04f 0c0a 	mov.w	ip, #10
 800b128:	4620      	mov	r0, r4
 800b12a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b12e:	3a30      	subs	r2, #48	; 0x30
 800b130:	2a09      	cmp	r2, #9
 800b132:	d903      	bls.n	800b13c <_vfiprintf_r+0x1d0>
 800b134:	2b00      	cmp	r3, #0
 800b136:	d0c6      	beq.n	800b0c6 <_vfiprintf_r+0x15a>
 800b138:	9105      	str	r1, [sp, #20]
 800b13a:	e7c4      	b.n	800b0c6 <_vfiprintf_r+0x15a>
 800b13c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b140:	4604      	mov	r4, r0
 800b142:	2301      	movs	r3, #1
 800b144:	e7f0      	b.n	800b128 <_vfiprintf_r+0x1bc>
 800b146:	ab03      	add	r3, sp, #12
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	462a      	mov	r2, r5
 800b14c:	4b12      	ldr	r3, [pc, #72]	; (800b198 <_vfiprintf_r+0x22c>)
 800b14e:	a904      	add	r1, sp, #16
 800b150:	4630      	mov	r0, r6
 800b152:	f7fd fb87 	bl	8008864 <_printf_float>
 800b156:	4607      	mov	r7, r0
 800b158:	1c78      	adds	r0, r7, #1
 800b15a:	d1d6      	bne.n	800b10a <_vfiprintf_r+0x19e>
 800b15c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b15e:	07d9      	lsls	r1, r3, #31
 800b160:	d405      	bmi.n	800b16e <_vfiprintf_r+0x202>
 800b162:	89ab      	ldrh	r3, [r5, #12]
 800b164:	059a      	lsls	r2, r3, #22
 800b166:	d402      	bmi.n	800b16e <_vfiprintf_r+0x202>
 800b168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b16a:	f7fe f8fb 	bl	8009364 <__retarget_lock_release_recursive>
 800b16e:	89ab      	ldrh	r3, [r5, #12]
 800b170:	065b      	lsls	r3, r3, #25
 800b172:	f53f af1d 	bmi.w	800afb0 <_vfiprintf_r+0x44>
 800b176:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b178:	e71c      	b.n	800afb4 <_vfiprintf_r+0x48>
 800b17a:	ab03      	add	r3, sp, #12
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	462a      	mov	r2, r5
 800b180:	4b05      	ldr	r3, [pc, #20]	; (800b198 <_vfiprintf_r+0x22c>)
 800b182:	a904      	add	r1, sp, #16
 800b184:	4630      	mov	r0, r6
 800b186:	f7fd fe11 	bl	8008dac <_printf_i>
 800b18a:	e7e4      	b.n	800b156 <_vfiprintf_r+0x1ea>
 800b18c:	0800b80c 	.word	0x0800b80c
 800b190:	0800b816 	.word	0x0800b816
 800b194:	08008865 	.word	0x08008865
 800b198:	0800af49 	.word	0x0800af49
 800b19c:	0800b812 	.word	0x0800b812

0800b1a0 <__swbuf_r>:
 800b1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a2:	460e      	mov	r6, r1
 800b1a4:	4614      	mov	r4, r2
 800b1a6:	4605      	mov	r5, r0
 800b1a8:	b118      	cbz	r0, 800b1b2 <__swbuf_r+0x12>
 800b1aa:	6a03      	ldr	r3, [r0, #32]
 800b1ac:	b90b      	cbnz	r3, 800b1b2 <__swbuf_r+0x12>
 800b1ae:	f7fd ffab 	bl	8009108 <__sinit>
 800b1b2:	69a3      	ldr	r3, [r4, #24]
 800b1b4:	60a3      	str	r3, [r4, #8]
 800b1b6:	89a3      	ldrh	r3, [r4, #12]
 800b1b8:	071a      	lsls	r2, r3, #28
 800b1ba:	d525      	bpl.n	800b208 <__swbuf_r+0x68>
 800b1bc:	6923      	ldr	r3, [r4, #16]
 800b1be:	b31b      	cbz	r3, 800b208 <__swbuf_r+0x68>
 800b1c0:	6823      	ldr	r3, [r4, #0]
 800b1c2:	6922      	ldr	r2, [r4, #16]
 800b1c4:	1a98      	subs	r0, r3, r2
 800b1c6:	6963      	ldr	r3, [r4, #20]
 800b1c8:	b2f6      	uxtb	r6, r6
 800b1ca:	4283      	cmp	r3, r0
 800b1cc:	4637      	mov	r7, r6
 800b1ce:	dc04      	bgt.n	800b1da <__swbuf_r+0x3a>
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	f7ff fdac 	bl	800ad30 <_fflush_r>
 800b1d8:	b9e0      	cbnz	r0, 800b214 <__swbuf_r+0x74>
 800b1da:	68a3      	ldr	r3, [r4, #8]
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	60a3      	str	r3, [r4, #8]
 800b1e0:	6823      	ldr	r3, [r4, #0]
 800b1e2:	1c5a      	adds	r2, r3, #1
 800b1e4:	6022      	str	r2, [r4, #0]
 800b1e6:	701e      	strb	r6, [r3, #0]
 800b1e8:	6962      	ldr	r2, [r4, #20]
 800b1ea:	1c43      	adds	r3, r0, #1
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d004      	beq.n	800b1fa <__swbuf_r+0x5a>
 800b1f0:	89a3      	ldrh	r3, [r4, #12]
 800b1f2:	07db      	lsls	r3, r3, #31
 800b1f4:	d506      	bpl.n	800b204 <__swbuf_r+0x64>
 800b1f6:	2e0a      	cmp	r6, #10
 800b1f8:	d104      	bne.n	800b204 <__swbuf_r+0x64>
 800b1fa:	4621      	mov	r1, r4
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	f7ff fd97 	bl	800ad30 <_fflush_r>
 800b202:	b938      	cbnz	r0, 800b214 <__swbuf_r+0x74>
 800b204:	4638      	mov	r0, r7
 800b206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b208:	4621      	mov	r1, r4
 800b20a:	4628      	mov	r0, r5
 800b20c:	f000 f806 	bl	800b21c <__swsetup_r>
 800b210:	2800      	cmp	r0, #0
 800b212:	d0d5      	beq.n	800b1c0 <__swbuf_r+0x20>
 800b214:	f04f 37ff 	mov.w	r7, #4294967295
 800b218:	e7f4      	b.n	800b204 <__swbuf_r+0x64>
	...

0800b21c <__swsetup_r>:
 800b21c:	b538      	push	{r3, r4, r5, lr}
 800b21e:	4b2a      	ldr	r3, [pc, #168]	; (800b2c8 <__swsetup_r+0xac>)
 800b220:	4605      	mov	r5, r0
 800b222:	6818      	ldr	r0, [r3, #0]
 800b224:	460c      	mov	r4, r1
 800b226:	b118      	cbz	r0, 800b230 <__swsetup_r+0x14>
 800b228:	6a03      	ldr	r3, [r0, #32]
 800b22a:	b90b      	cbnz	r3, 800b230 <__swsetup_r+0x14>
 800b22c:	f7fd ff6c 	bl	8009108 <__sinit>
 800b230:	89a3      	ldrh	r3, [r4, #12]
 800b232:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b236:	0718      	lsls	r0, r3, #28
 800b238:	d422      	bmi.n	800b280 <__swsetup_r+0x64>
 800b23a:	06d9      	lsls	r1, r3, #27
 800b23c:	d407      	bmi.n	800b24e <__swsetup_r+0x32>
 800b23e:	2309      	movs	r3, #9
 800b240:	602b      	str	r3, [r5, #0]
 800b242:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b246:	81a3      	strh	r3, [r4, #12]
 800b248:	f04f 30ff 	mov.w	r0, #4294967295
 800b24c:	e034      	b.n	800b2b8 <__swsetup_r+0x9c>
 800b24e:	0758      	lsls	r0, r3, #29
 800b250:	d512      	bpl.n	800b278 <__swsetup_r+0x5c>
 800b252:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b254:	b141      	cbz	r1, 800b268 <__swsetup_r+0x4c>
 800b256:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b25a:	4299      	cmp	r1, r3
 800b25c:	d002      	beq.n	800b264 <__swsetup_r+0x48>
 800b25e:	4628      	mov	r0, r5
 800b260:	f7fe ff0c 	bl	800a07c <_free_r>
 800b264:	2300      	movs	r3, #0
 800b266:	6363      	str	r3, [r4, #52]	; 0x34
 800b268:	89a3      	ldrh	r3, [r4, #12]
 800b26a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b26e:	81a3      	strh	r3, [r4, #12]
 800b270:	2300      	movs	r3, #0
 800b272:	6063      	str	r3, [r4, #4]
 800b274:	6923      	ldr	r3, [r4, #16]
 800b276:	6023      	str	r3, [r4, #0]
 800b278:	89a3      	ldrh	r3, [r4, #12]
 800b27a:	f043 0308 	orr.w	r3, r3, #8
 800b27e:	81a3      	strh	r3, [r4, #12]
 800b280:	6923      	ldr	r3, [r4, #16]
 800b282:	b94b      	cbnz	r3, 800b298 <__swsetup_r+0x7c>
 800b284:	89a3      	ldrh	r3, [r4, #12]
 800b286:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b28a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b28e:	d003      	beq.n	800b298 <__swsetup_r+0x7c>
 800b290:	4621      	mov	r1, r4
 800b292:	4628      	mov	r0, r5
 800b294:	f000 f884 	bl	800b3a0 <__smakebuf_r>
 800b298:	89a0      	ldrh	r0, [r4, #12]
 800b29a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b29e:	f010 0301 	ands.w	r3, r0, #1
 800b2a2:	d00a      	beq.n	800b2ba <__swsetup_r+0x9e>
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	60a3      	str	r3, [r4, #8]
 800b2a8:	6963      	ldr	r3, [r4, #20]
 800b2aa:	425b      	negs	r3, r3
 800b2ac:	61a3      	str	r3, [r4, #24]
 800b2ae:	6923      	ldr	r3, [r4, #16]
 800b2b0:	b943      	cbnz	r3, 800b2c4 <__swsetup_r+0xa8>
 800b2b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b2b6:	d1c4      	bne.n	800b242 <__swsetup_r+0x26>
 800b2b8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ba:	0781      	lsls	r1, r0, #30
 800b2bc:	bf58      	it	pl
 800b2be:	6963      	ldrpl	r3, [r4, #20]
 800b2c0:	60a3      	str	r3, [r4, #8]
 800b2c2:	e7f4      	b.n	800b2ae <__swsetup_r+0x92>
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	e7f7      	b.n	800b2b8 <__swsetup_r+0x9c>
 800b2c8:	2000006c 	.word	0x2000006c

0800b2cc <_raise_r>:
 800b2cc:	291f      	cmp	r1, #31
 800b2ce:	b538      	push	{r3, r4, r5, lr}
 800b2d0:	4604      	mov	r4, r0
 800b2d2:	460d      	mov	r5, r1
 800b2d4:	d904      	bls.n	800b2e0 <_raise_r+0x14>
 800b2d6:	2316      	movs	r3, #22
 800b2d8:	6003      	str	r3, [r0, #0]
 800b2da:	f04f 30ff 	mov.w	r0, #4294967295
 800b2de:	bd38      	pop	{r3, r4, r5, pc}
 800b2e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b2e2:	b112      	cbz	r2, 800b2ea <_raise_r+0x1e>
 800b2e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2e8:	b94b      	cbnz	r3, 800b2fe <_raise_r+0x32>
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f000 f830 	bl	800b350 <_getpid_r>
 800b2f0:	462a      	mov	r2, r5
 800b2f2:	4601      	mov	r1, r0
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2fa:	f000 b817 	b.w	800b32c <_kill_r>
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d00a      	beq.n	800b318 <_raise_r+0x4c>
 800b302:	1c59      	adds	r1, r3, #1
 800b304:	d103      	bne.n	800b30e <_raise_r+0x42>
 800b306:	2316      	movs	r3, #22
 800b308:	6003      	str	r3, [r0, #0]
 800b30a:	2001      	movs	r0, #1
 800b30c:	e7e7      	b.n	800b2de <_raise_r+0x12>
 800b30e:	2400      	movs	r4, #0
 800b310:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b314:	4628      	mov	r0, r5
 800b316:	4798      	blx	r3
 800b318:	2000      	movs	r0, #0
 800b31a:	e7e0      	b.n	800b2de <_raise_r+0x12>

0800b31c <raise>:
 800b31c:	4b02      	ldr	r3, [pc, #8]	; (800b328 <raise+0xc>)
 800b31e:	4601      	mov	r1, r0
 800b320:	6818      	ldr	r0, [r3, #0]
 800b322:	f7ff bfd3 	b.w	800b2cc <_raise_r>
 800b326:	bf00      	nop
 800b328:	2000006c 	.word	0x2000006c

0800b32c <_kill_r>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	4d07      	ldr	r5, [pc, #28]	; (800b34c <_kill_r+0x20>)
 800b330:	2300      	movs	r3, #0
 800b332:	4604      	mov	r4, r0
 800b334:	4608      	mov	r0, r1
 800b336:	4611      	mov	r1, r2
 800b338:	602b      	str	r3, [r5, #0]
 800b33a:	f7f7 f8bd 	bl	80024b8 <_kill>
 800b33e:	1c43      	adds	r3, r0, #1
 800b340:	d102      	bne.n	800b348 <_kill_r+0x1c>
 800b342:	682b      	ldr	r3, [r5, #0]
 800b344:	b103      	cbz	r3, 800b348 <_kill_r+0x1c>
 800b346:	6023      	str	r3, [r4, #0]
 800b348:	bd38      	pop	{r3, r4, r5, pc}
 800b34a:	bf00      	nop
 800b34c:	200008a4 	.word	0x200008a4

0800b350 <_getpid_r>:
 800b350:	f7f7 b8aa 	b.w	80024a8 <_getpid>

0800b354 <__swhatbuf_r>:
 800b354:	b570      	push	{r4, r5, r6, lr}
 800b356:	460c      	mov	r4, r1
 800b358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b35c:	2900      	cmp	r1, #0
 800b35e:	b096      	sub	sp, #88	; 0x58
 800b360:	4615      	mov	r5, r2
 800b362:	461e      	mov	r6, r3
 800b364:	da0d      	bge.n	800b382 <__swhatbuf_r+0x2e>
 800b366:	89a3      	ldrh	r3, [r4, #12]
 800b368:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b36c:	f04f 0100 	mov.w	r1, #0
 800b370:	bf0c      	ite	eq
 800b372:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b376:	2340      	movne	r3, #64	; 0x40
 800b378:	2000      	movs	r0, #0
 800b37a:	6031      	str	r1, [r6, #0]
 800b37c:	602b      	str	r3, [r5, #0]
 800b37e:	b016      	add	sp, #88	; 0x58
 800b380:	bd70      	pop	{r4, r5, r6, pc}
 800b382:	466a      	mov	r2, sp
 800b384:	f000 f848 	bl	800b418 <_fstat_r>
 800b388:	2800      	cmp	r0, #0
 800b38a:	dbec      	blt.n	800b366 <__swhatbuf_r+0x12>
 800b38c:	9901      	ldr	r1, [sp, #4]
 800b38e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b392:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b396:	4259      	negs	r1, r3
 800b398:	4159      	adcs	r1, r3
 800b39a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b39e:	e7eb      	b.n	800b378 <__swhatbuf_r+0x24>

0800b3a0 <__smakebuf_r>:
 800b3a0:	898b      	ldrh	r3, [r1, #12]
 800b3a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3a4:	079d      	lsls	r5, r3, #30
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	460c      	mov	r4, r1
 800b3aa:	d507      	bpl.n	800b3bc <__smakebuf_r+0x1c>
 800b3ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	6123      	str	r3, [r4, #16]
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	6163      	str	r3, [r4, #20]
 800b3b8:	b002      	add	sp, #8
 800b3ba:	bd70      	pop	{r4, r5, r6, pc}
 800b3bc:	ab01      	add	r3, sp, #4
 800b3be:	466a      	mov	r2, sp
 800b3c0:	f7ff ffc8 	bl	800b354 <__swhatbuf_r>
 800b3c4:	9900      	ldr	r1, [sp, #0]
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	f7fe fecb 	bl	800a164 <_malloc_r>
 800b3ce:	b948      	cbnz	r0, 800b3e4 <__smakebuf_r+0x44>
 800b3d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3d4:	059a      	lsls	r2, r3, #22
 800b3d6:	d4ef      	bmi.n	800b3b8 <__smakebuf_r+0x18>
 800b3d8:	f023 0303 	bic.w	r3, r3, #3
 800b3dc:	f043 0302 	orr.w	r3, r3, #2
 800b3e0:	81a3      	strh	r3, [r4, #12]
 800b3e2:	e7e3      	b.n	800b3ac <__smakebuf_r+0xc>
 800b3e4:	89a3      	ldrh	r3, [r4, #12]
 800b3e6:	6020      	str	r0, [r4, #0]
 800b3e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ec:	81a3      	strh	r3, [r4, #12]
 800b3ee:	9b00      	ldr	r3, [sp, #0]
 800b3f0:	6163      	str	r3, [r4, #20]
 800b3f2:	9b01      	ldr	r3, [sp, #4]
 800b3f4:	6120      	str	r0, [r4, #16]
 800b3f6:	b15b      	cbz	r3, 800b410 <__smakebuf_r+0x70>
 800b3f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	f000 f81d 	bl	800b43c <_isatty_r>
 800b402:	b128      	cbz	r0, 800b410 <__smakebuf_r+0x70>
 800b404:	89a3      	ldrh	r3, [r4, #12]
 800b406:	f023 0303 	bic.w	r3, r3, #3
 800b40a:	f043 0301 	orr.w	r3, r3, #1
 800b40e:	81a3      	strh	r3, [r4, #12]
 800b410:	89a3      	ldrh	r3, [r4, #12]
 800b412:	431d      	orrs	r5, r3
 800b414:	81a5      	strh	r5, [r4, #12]
 800b416:	e7cf      	b.n	800b3b8 <__smakebuf_r+0x18>

0800b418 <_fstat_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4d07      	ldr	r5, [pc, #28]	; (800b438 <_fstat_r+0x20>)
 800b41c:	2300      	movs	r3, #0
 800b41e:	4604      	mov	r4, r0
 800b420:	4608      	mov	r0, r1
 800b422:	4611      	mov	r1, r2
 800b424:	602b      	str	r3, [r5, #0]
 800b426:	f7f7 f8a6 	bl	8002576 <_fstat>
 800b42a:	1c43      	adds	r3, r0, #1
 800b42c:	d102      	bne.n	800b434 <_fstat_r+0x1c>
 800b42e:	682b      	ldr	r3, [r5, #0]
 800b430:	b103      	cbz	r3, 800b434 <_fstat_r+0x1c>
 800b432:	6023      	str	r3, [r4, #0]
 800b434:	bd38      	pop	{r3, r4, r5, pc}
 800b436:	bf00      	nop
 800b438:	200008a4 	.word	0x200008a4

0800b43c <_isatty_r>:
 800b43c:	b538      	push	{r3, r4, r5, lr}
 800b43e:	4d06      	ldr	r5, [pc, #24]	; (800b458 <_isatty_r+0x1c>)
 800b440:	2300      	movs	r3, #0
 800b442:	4604      	mov	r4, r0
 800b444:	4608      	mov	r0, r1
 800b446:	602b      	str	r3, [r5, #0]
 800b448:	f7f7 f8a5 	bl	8002596 <_isatty>
 800b44c:	1c43      	adds	r3, r0, #1
 800b44e:	d102      	bne.n	800b456 <_isatty_r+0x1a>
 800b450:	682b      	ldr	r3, [r5, #0]
 800b452:	b103      	cbz	r3, 800b456 <_isatty_r+0x1a>
 800b454:	6023      	str	r3, [r4, #0]
 800b456:	bd38      	pop	{r3, r4, r5, pc}
 800b458:	200008a4 	.word	0x200008a4

0800b45c <_init>:
 800b45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45e:	bf00      	nop
 800b460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b462:	bc08      	pop	{r3}
 800b464:	469e      	mov	lr, r3
 800b466:	4770      	bx	lr

0800b468 <_fini>:
 800b468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46a:	bf00      	nop
 800b46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b46e:	bc08      	pop	{r3}
 800b470:	469e      	mov	lr, r3
 800b472:	4770      	bx	lr
